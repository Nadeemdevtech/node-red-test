[
    {
        "id": "62403d7ab629bda7",
        "type": "tab",
        "label": "Variables",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "484f7e34439765a5",
        "type": "tab",
        "label": "Dashboard",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "6bd4386c39e3eb95",
        "type": "tab",
        "label": "mySql",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "8fdafe46424ef527",
        "type": "tab",
        "label": "TuesdayWork(12-7-2022)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "7d21f6a3794af32c",
        "type": "tab",
        "label": "Master Ingestion",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d855af0dc63d7647",
        "type": "tab",
        "label": "Practice (Master Ingestion)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f7d9e8689641f632",
        "type": "tab",
        "label": "WMS Integration ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ab8323c0235e4e7",
        "type": "tab",
        "label": "Virgin(SOH)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b4bee3fd0d180490",
        "type": "tab",
        "label": "Virgin(Printing)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3934868f5ace485b",
        "type": "tab",
        "label": "CCM Integration",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "302faf26d346ae52",
        "type": "tab",
        "label": "[RUBA] SOH",
        "disabled": true,
        "info": ""
    },
    {
        "id": "fd0452957f4a0322",
        "type": "tab",
        "label": "[RUBA] GOODS IN",
        "disabled": true,
        "info": ""
    },
    {
        "id": "9cf062cd8fdccf3c",
        "type": "tab",
        "label": "[RUBA] COUNTED Items",
        "disabled": true,
        "info": ""
    },
    {
        "id": "f56f2cf481d749b9",
        "type": "tab",
        "label": "[RUBA] PRINTING",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d64197e1a7365a2a",
        "type": "tab",
        "label": "[RUBA] SUPPLY CHAIN Validator",
        "disabled": true,
        "info": "Virgit to Rubaiyat",
        "env": []
    },
    {
        "id": "155c727e74cb3361",
        "type": "tab",
        "label": "MongoDB Connection ",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "9dda84db99f66cba",
        "type": "tab",
        "label": "Flow 12",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "fa9ca0946da23687",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ceb078855481dd99",
        "type": "tab",
        "label": "Ad_Port",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b3edb4d5e13763dc",
        "type": "subflow",
        "name": "Copy Metadata Printing",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "133d0325e53716d3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 220,
                "wires": [
                    {
                        "id": "0ab4801961471cfd",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "c184857f94f92d67",
        "type": "subflow",
        "name": "Copy Metadata CC",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "cc79fc1ab6f43fb7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 80,
                "wires": [
                    {
                        "id": "2e355772daca5203",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "b9d72e462d78c08f",
        "type": "subflow",
        "name": "Copy Metadata Printing (3)",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "50433adc406bea0f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 220,
                "wires": [
                    {
                        "id": "1242c2b8c7434a6a",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5320966ce4df3d0f",
        "type": "subflow",
        "name": "Copy Metadata Printing (3) (2)",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "aa9f18e3aa72f44c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 220,
                "wires": [
                    {
                        "id": "855f90d309772bfb",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "5e3de42f.1e83bc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "8080",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "92a9cd27.99b9d",
        "type": "ui_group",
        "name": "Test1",
        "tab": "29141e28bbf91d6f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6bcaee2a9503cef3",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "26500c142891678b",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "29141e28bbf91d6f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9ff909043d291326",
        "type": "ui_group",
        "name": "Speedo Meter",
        "tab": "29141e28bbf91d6f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "bbd0f946f544a60d",
        "type": "ui_group",
        "name": "Add Student",
        "tab": "29141e28bbf91d6f",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "da26ed7746bfb9b4",
        "type": "ui_tab",
        "name": "Speedo Meter",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "323db425adbf8f14",
        "type": "ui_tab",
        "name": "Login form",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7aa3194d7fa6f75d",
        "type": "ui_group",
        "name": "Login ",
        "tab": "323db425adbf8f14",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5be74984d135973b",
        "type": "ui_group",
        "name": "Firebase Data",
        "tab": "f39361ab47754716",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f39361ab47754716",
        "type": "ui_tab",
        "name": "Firebase Data ",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d882d226ab44a9d9",
        "type": "ui_group",
        "name": "Sensor",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f994eabc581ae1ba",
        "type": "ui_group",
        "name": "Counter",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b76b175eb1c06672",
        "type": "ui_group",
        "name": "Sinusoid",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "dfb4a60f.d788f8",
        "type": "ui_group",
        "name": "Data Export",
        "tab": "48418b79.0f5834",
        "order": 1,
        "disp": true,
        "width": "12"
    },
    {
        "id": "48418b79.0f5834",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "7a106693.b850b8",
        "type": "ui_group",
        "name": "table",
        "tab": "a9cc4011.4f89a",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "a9cc4011.4f89a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "8afa890fa624105a",
        "type": "MySQLdatabase",
        "name": "localhost",
        "host": "localhost",
        "port": "3306",
        "db": "sys",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "7b8f6438.90b4fc",
        "type": "sqlitedb",
        "db": "C:/Users/Nadeem Ch/Desktop/UAE_Virgin_SOH_405_19082022_122843.db",
        "mode": "RWC"
    },
    {
        "id": "52cb23b1f21426be",
        "type": "sqlitedb",
        "db": "/data/sqlitedb/VIRGIN_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "70042ab88621c9ba",
        "type": "sqlitedb",
        "db": "C:/Users/Nadeem/Desktop/RUBAIYAT_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "82664b308449f318",
        "type": "sqlitedb",
        "db": "C:/Users/Nadeem Ch/Desktop/AD_Port_Data0.db",
        "mode": "RWC"
    },
    {
        "id": "07f899ec0eb16241",
        "type": "sqlitedb",
        "db": "C:\\Users\\Nadeem\\OneDrive\\Desktop\\Virgin Pro/VIRGIN_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "1ad557d5.253ef",
        "type": "sqlitedb",
        "db": "/data/sqlitedb/VIRGIN_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "a5e25bc5504b2641",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "Nadeem"
    },
    {
        "id": "8a9f27dbb0500d4e",
        "type": "SFTP-credentials",
        "host": "192.168.70.115",
        "port": "22",
        "username": "Nadeem Ch",
        "password": "ch  "
    },
    {
        "id": "38d826fb79202031",
        "type": "SFTP-credentials",
        "host": " 172.19.112.1",
        "port": "22",
        "username": "Nadeem Ch",
        "password": "ch  "
    },
    {
        "id": "e8af21eb228b9ce0",
        "type": "ftp",
        "d": true,
        "host": "ftpupload.net",
        "port": "",
        "secureOptions": "",
        "user": "ezyro_32160775",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "c55579f67e4bd129",
        "type": "ftp",
        "host": "ftp.nodered.com",
        "port": "21",
        "secureOptions": "",
        "user": "nadeem",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "cfeb4b10ffd68bfd",
        "type": "ftp",
        "host": "ftpupload.net",
        "port": "21",
        "secureOptions": "",
        "user": "lblog_32383917",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "1d42e634748499c1",
        "type": "ftp",
        "host": "ftpupload.net",
        "port": "",
        "secureOptions": "",
        "user": "ezyro_32160775",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "d15c1336b6856659",
        "type": "ftp",
        "host": "ftpupload.net",
        "port": "",
        "secureOptions": "",
        "user": "lblog_32383917",
        "connTimeout": "",
        "pasvTimeout": "",
        "keepalive": ""
    },
    {
        "id": "928a31b8ab14be27",
        "type": "remote-config",
        "name": "Node-RED UI",
        "host": "localhost",
        "protocol": "http",
        "port": "1880",
        "baseurl": "/",
        "instancehash": "p42n06sz1en40u6zsp2rtdwv4nhlrbsl16un6o9o3li7kuqaedhx2iguy5f3zvsm",
        "server": "nodered03.remote-red.com",
        "region": "us"
    },
    {
        "id": "2e97ea7f1fab23cf",
        "type": "dutch-weather-conf",
        "lat": "51.42408",
        "lng": "5.442794"
    },
    {
        "id": "e94410849d3ba261",
        "type": "dutch-weather-conf",
        "lat": "51.42408",
        "lng": "5.442794"
    },
    {
        "id": "92ae78283fc2fda1",
        "type": "mongodb-config",
        "hostname": "139.59.68.19",
        "port": "27017",
        "db": "ADPKLP21?authSource=admin",
        "name": "MongoDB"
    },
    {
        "id": "59e5ceb19a22b592",
        "type": "sftp",
        "host": "localhost",
        "port": "22",
        "tryKeyboard": false,
        "key": "",
        "keyname": "",
        "algorithms_kex": "ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1",
        "algorithms_cipher": "aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm,aes128-gcm@openssh.com,aes256-gcm,aes256-gcm@openssh.com",
        "algorithms_serverHostKey": "ssh-rsa,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521",
        "algorithms_hmac": "hmac-sha2-256,hmac-sha2-512,hmac-sha1",
        "algorithms_compress": "none,zlib@openssh.com,zlib"
    },
    {
        "id": "cd743025.293b8",
        "type": "sqlitedb",
        "db": "D:/Flow db file/SC-RUBAIYAT_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "630c81f1caeddf3c",
        "type": "sqlitedb",
        "db": "/data/sqlitedb/SC-RUBAIYAT_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "c017b9497bab797f",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "Guillermo"
    },
    {
        "id": "8de9fdd5dc3a437e",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "Guillermo"
    },
    {
        "id": "0048e11c6fc80daa",
        "type": "sqlitedb",
        "db": "/data/sqlitedb/SC-RUBAIYAT_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "405fc20b69c8591e",
        "type": "sqlitedb",
        "db": "/data/sqlitedb/SC-RUBAIYAT_CountData.db",
        "mode": "RWC"
    },
    {
        "id": "211349b719a1d604",
        "type": "mongodb",
        "hostname": "139.59.68.19",
        "port": "27017",
        "db": "ADPKLP21?authSource=admin",
        "name": "Mongodb"
    },
    {
        "id": "89bb548239426793",
        "type": "MySQLdatabase",
        "name": "",
        "host": "localhost",
        "port": "3306",
        "db": "virgin_main",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "90b9e886c74f7cb0",
        "type": "mongodb2",
        "z": "ceb078855481dd99",
        "uri": "mongodb://admin:Inn0vent!@139.59.68.19:27017/ADPKLP21",
        "name": "mongodb",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "133d0325e53716d3",
        "type": "function",
        "z": "b3edb4d5e13763dc",
        "name": "Matching SKUs",
        "func": "//Parse only skus\nvar original_skus = msg.items_toCopy.map(item => item.SKU_original);\nvar skusStrg = \"\",padded;\noriginal_skus.forEach((sku, index) => {\n    skusStrg += `'${sku}',`;\n});\nskusStrg = skusStrg.slice(0,-1);\n\n// prepare query to get all Assets for each item.\nmsg.topic = \"SELECT * FROM master WHERE UniqueID IN (\"+skusStrg+\");\";\n//node.warn(msg.topic);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "5d7ac64defc5aa2f",
        "type": "function",
        "z": "b3edb4d5e13763dc",
        "name": "Copy Metadata",
        "func": "const defaultMapping = [\n    {item:\"SKU\", asset:\"SKU\", copyFlag: true},\n    {item:\"Description\", asset:\"Description\", copyFlag: true},\n    {item:\"DepartmentID\", asset:\"DepartmentID\", copyFlag: true},\n    {item:\"Brand\", asset:\"Brand\", copyFlag: true},\n    {item:\"Style\", asset:\"Style\", copyFlag: true},\n    {item:\"SupplierName\", asset:\"SupplierName\", copyFlag: true},\n    {item:\"Color\", asset:\"Color\", copyFlag: true},\n    {item:\"Size\", asset:\"Size\", copyFlag: true},\n    {item:\"Season\", asset:\"Season\", copyFlag: true},\n    {item:\"Price\", asset:\"Price\", copyFlag: true},\n    {item:\"SupplierItemNum\", asset:\"SupplierItemNum\", copyFlag: true},\n    {item:\"TotalPrice\", asset:\"TotalPrice\", copyFlag: true},\n    ];\n\nvar assetResponse = msg.payload;\nvar allAssets = assetResponse.reduce((acc, current) => {\n    acc[current.UniqueID] = current;\n    return acc;\n},{});\n\nvar copiedData = copyAllMetadata(msg.items_toCopy, allAssets);\n//node.warn(copiedData);\n\nvar sqlvalues = \"\";\ncopiedData.forEach( item => {\n    if(item.validated === 1){\n        sqlvalues += `('${item.serialNumber}','${item.SKU_original}','${item.SKU}','${item.Description}','${item.DepartmentID}','${item.Brand}','${item.Style}','${item.SupplierName}','${item.Color}','${item.Size}','${item.Season}','${item.Price}','${item.SupplierItemNum}','${item.TotalPrice}','${item.check_flag}','${item.validated}','${msg.zone}','${msg.store}','${msg.disposition}'),`;\n    } else{\n        sqlvalues += `('${item.serialNumber}','${item.SKU_original}','','','','','','','','','','','','','${item.check_flag}','${item.validated}','','',''),`;\n    }\n});\nsqlvalues = sqlvalues.slice(0,-1);\nmsg.topic = \"INSERT OR REPLACE INTO Inventory (TagID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,SupplierItemNum,TotalPrice,check_flag,validated,zone,store,Retail_Disposition) VALUES \"+sqlvalues+\";\";\n//node.warn(msg.topic);\nreturn msg;\n\n//Functions and constants\nfunction copyAllMetadata(items, assets){\n    var newItems = [];\n    items.forEach(item => {\n        item.check_flag = 1;\n        //node.warn(assets[item.SKU_original]);\n        if(assets[item.SKU_original]){\n            item.validated = 1;\n            newItems.push(copyMetadata(item, assets[item.SKU_original]));\n            \n        }\n        else{\n            item.validated = 0;\n            newItems.push(item);\n        }\n    });\n    \n    return newItems;\n}\n\nfunction copyMetadata(item, asset, dataMap){\n    dataMap = dataMap || defaultMapping;\n    var newItem = item;\n    dataMap.forEach(data => {\n        if(data.copyFlag)\n            newItem[data.item] = asset[data.asset] || newItem[data.item];\n    });\n    return newItem;\n} ",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3ef433efba16d459",
        "type": "debug",
        "z": "b3edb4d5e13763dc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "0ea33ceeb3050176",
        "type": "debug",
        "z": "b3edb4d5e13763dc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "76e812cbfaa8d7bc",
        "type": "sqlite",
        "z": "c184857f94f92d67",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get master",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "79209958ba8f0658"
            ]
        ]
    },
    {
        "id": "cc79fc1ab6f43fb7",
        "type": "function",
        "z": "c184857f94f92d67",
        "name": "Matching SKUs",
        "func": "//Parse only skus\nvar original_skus = msg.items_toCopy.map(item => item.SKU_original);\nvar skusStrg = \"\";\noriginal_skus.forEach((sku, index) => {\n    skusStrg += `'${sku}',`;\n});\nskusStrg = skusStrg.slice(0,-1);\n\n// prepare query to get all Assets for each item.\nmsg.topic = \"SELECT * FROM master WHERE SKU_original in (\"+skusStrg+\")\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 80,
        "wires": [
            [
                "76e812cbfaa8d7bc"
            ]
        ]
    },
    {
        "id": "83a89f7f59badccd",
        "type": "function",
        "z": "c184857f94f92d67",
        "name": "Copy Metadata_old",
        "func": "const defaultMapping = [\n    {item:\"SKU\", asset:\"SKU\", copyFlag: true},\n    {item:\"Description\", asset:\"Description\", copyFlag: true},\n    {item:\"DepartmentID\", asset:\"DepartmentID\", copyFlag: true},\n    {item:\"Brand\", asset:\"Brand\", copyFlag: true},\n    {item:\"Style\", asset:\"Style\", copyFlag: true},\n    {item:\"SupplierName\", asset:\"SupplierName\", copyFlag: true},\n    {item:\"Color\", asset:\"Color\", copyFlag: true},\n    {item:\"Size\", asset:\"Size\", copyFlag: true},\n    {item:\"Season\", asset:\"Season\", copyFlag: true},\n    {item:\"Price\", asset:\"Price\", copyFlag: true},\n    {item:\"TotalPrice\", asset:\"TotalPrice\", copyFlag: true},\n    ];\n\nvar assetResponse = msg.payload;\nvar allAssets = assetResponse.reduce((acc, current) => {\n    acc[current.SKU_original] = current;\n    return acc;\n},{});\n\nvar copiedData = copyAllMetadata(msg.items_toCopy, allAssets);\n\nvar sqlvalues = \"\";\ncopiedData.forEach( item => {\n    if(item.validated === 1){\n        sqlvalues += `('${item.serialNumber}','${item.Retail_CycleCountDate}','${item.Retail_CycleCountID}','${item.SKU_original}','${item.SKU}','${item.Description}','${item.DepartmentID}','${item.Brand}','${item.Style}','${item.SupplierName}','${item.Color}','${item.Size}','${item.Season}','${item.Price}','${item.TotalPrice}','${item.check_flag}','${item.validated}','${msg.zone}','${msg.store}','${msg.disposition}'),`;\n    } else{\n        sqlvalues += `('${item.serialNumber}','${item.Retail_CycleCountDate}','${item.Retail_CycleCountID}','${item.SKU_original}','','','','','','','','','','','','${item.check_flag}','${item.validated}','','',''),`;\n    }\n});\nsqlvalues = sqlvalues.slice(0,-1);\nmsg.topic = \"INSERT OR REPLACE INTO CountedItems\"+msg.store+\" (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,TotalPrice,check_flag,validated,zone,store,Retail_Disposition) VALUES \"+sqlvalues+\";\";\nnode.warn(msg.topic);\nreturn msg;\n\n//Functions and constants\nfunction copyAllMetadata(items, assets){\n    var newItems = [];\n    items.forEach(item => {\n        item.check_flag = 1;\n        if(assets[item.SKU_original]){\n            item.validated = 1;\n            newItems.push(copyMetadata(item, assets[item.SKU_original]));\n        }\n        else{\n            item.validated = 0;\n            newItems.push(item);\n        }\n    });\n    \n    return newItems;\n}\n\nfunction copyMetadata(item, asset, dataMap){\n    dataMap = dataMap || defaultMapping;\n    var newItem = item;\n    dataMap.forEach(data => {\n        if(data.copyFlag)\n            newItem[data.item] = asset[data.asset] || newItem[data.item];\n    });\n    return newItem;\n} ",
        "outputs": 1,
        "noerr": 0,
        "x": 150,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "0336cedf508efdbf",
        "type": "sqlite",
        "z": "c184857f94f92d67",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Inventory",
        "x": 1020,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "79209958ba8f0658",
        "type": "function",
        "z": "c184857f94f92d67",
        "name": "Copy Metadata",
        "func": "const defaultMapping = [\n    {item:\"SKU\", asset:\"SKU\", copyFlag: true},\n    {item:\"Description\", asset:\"Description\", copyFlag: true},\n    {item:\"DepartmentID\", asset:\"DepartmentID\", copyFlag: true},\n    {item:\"Brand\", asset:\"Brand\", copyFlag: true},\n    {item:\"Style\", asset:\"Style\", copyFlag: true},\n    {item:\"SupplierName\", asset:\"SupplierName\", copyFlag: true},\n    {item:\"Color\", asset:\"Color\", copyFlag: true},\n    {item:\"Size\", asset:\"Size\", copyFlag: true},\n    {item:\"Season\", asset:\"Season\", copyFlag: true},\n    {item:\"Price\", asset:\"PriceOriginal\", copyFlag: true},\n    {item:\"TotalPrice\", asset:\"TotalPrice\", copyFlag: true},\n    ];\n    \nvar assetResponse = msg.payload;\nvar allAssets = assetResponse.reduce((acc, current) => {\n    acc[current.SKU_original] = current;\n    return acc;\n},{});\n\nvar copiedData = copyAllMetadata(msg.items_toCopy, allAssets);\n//node.warn(copiedData);\n\nvar sqlvalues = \"\";\nvar sqlvaluesUnknown = \"\";\nvar sqlvaluesNM = \"\";\ncopiedData.forEach( item => {\n    if(item.validated === 1){\n        sqlvalues += `('${item.serialNumber}','${item.Retail_CycleCountDate}','${item.Retail_CycleCountID}','${item.SKU_original}','${item.SKU}','${item.Description}','${item.DepartmentID}','${item.Brand}','${item.Style}','${item.SupplierName}','${item.Color}','${item.Size}','${item.Season}','${item.Price}','${item.TotalPrice}','${item.check_flag}','${item.validated}','${msg.zone}','${msg.store}','${msg.disposition}'),`;\n    } else{\n        sqlvaluesNM += `('${item.serialNumber}','${item.Retail_CycleCountDate}','${item.Retail_CycleCountID}','${item.SKU_original}','','','','','','','','','','','','${item.check_flag}','${item.validated}','','','','2'),`;\n        sqlvaluesUnknown += `('${item.serialNumber}','${item.Retail_CycleCountDate}','${item.Retail_CycleCountID}','${item.SKU_original}','','','','','','','','','','','','${item.check_flag}','${item.validated}','','',''),`;\n        \n    }\n});\nsqlvalues = sqlvalues.slice(0,-1);\nsqlvaluesUnknown = sqlvaluesUnknown.slice(0,-1);\nsqlvaluesNM = sqlvaluesNM.slice(0,-1);\n\nmsg.topic = \"INSERT OR REPLACE INTO CountedItems\"+msg.store+\" (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,TotalPrice,check_flag,validated,zone,store,Retail_Disposition) VALUES \"+sqlvalues+\";\";\nmsg.topicNM = \"INSERT OR REPLACE INTO CountedItems\"+msg.store+\" (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,TotalPrice,check_flag,validated,zone,store,Retail_Disposition,matching) VALUES \"+sqlvaluesNM+\";\";\nmsg.topicINV = \"INSERT OR REPLACE INTO Inventory (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,TotalPrice,check_flag,validated,zone,store,Retail_Disposition) VALUES \"+sqlvalues+\";\";\n\nif(sqlvaluesNM.length > 0){\n     msg.process = 4;\n}\nif(sqlvaluesUnknown){\n    msg.topicUNK = \"INSERT OR REPLACE INTO CountedItemsUnknown\"+msg.store+\" (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,TotalPrice,check_flag,validated,zone,store,Retail_Disposition) VALUES \"+sqlvaluesUnknown+\";\";\n    msg.process = 3;\n}\n//node.warn(msg.topic);\nreturn msg;\n\n//Functions and constants\nfunction copyAllMetadata(items, assets){\n    var newItems = [];\n    items.forEach(item => {\n        item.check_flag = 1;\n        //node.warn(assets[item.SKU_original]);\n        if(assets[item.SKU_original]){\n            item.validated = 1;\n            newItems.push(copyMetadata(item, assets[item.SKU_original]));\n            \n        }\n        else{\n            item.validated = 0;\n            newItems.push(item);\n        }\n    });\n    \n    return newItems;\n}\n\nfunction copyMetadata(item, asset, dataMap){\n    dataMap = dataMap || defaultMapping;\n    var newItem = item;\n    dataMap.forEach(data => {\n        if(data.copyFlag)\n            newItem[data.item] = asset[data.asset] || newItem[data.item];\n    });\n    return newItem;\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "f17b7aef1b289e32",
                "9f0f87ed237223fe",
                "7f0b7d0edbb46642",
                "39f2ebf6ed5cb373"
            ]
        ]
    },
    {
        "id": "f17b7aef1b289e32",
        "type": "change",
        "z": "c184857f94f92d67",
        "name": "to Inventory",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topicINV",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 140,
        "wires": [
            [
                "0336cedf508efdbf"
            ]
        ]
    },
    {
        "id": "9f0f87ed237223fe",
        "type": "switch",
        "z": "c184857f94f92d67",
        "name": "",
        "property": "process",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 200,
        "wires": [
            [
                "81f642b0e9bc9a15"
            ]
        ]
    },
    {
        "id": "81f642b0e9bc9a15",
        "type": "change",
        "z": "c184857f94f92d67",
        "name": "to Unknown",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topicUNK",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 200,
        "wires": [
            [
                "4bcb9e9d5e808913"
            ]
        ]
    },
    {
        "id": "7f0b7d0edbb46642",
        "type": "switch",
        "z": "c184857f94f92d67",
        "name": "",
        "property": "process",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "9c98442bacbd1019"
            ]
        ]
    },
    {
        "id": "9c98442bacbd1019",
        "type": "change",
        "z": "c184857f94f92d67",
        "name": "to NotMatching",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topicNM",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 260,
        "wires": [
            [
                "4aacf1e92f524bd5"
            ]
        ]
    },
    {
        "id": "39f2ebf6ed5cb373",
        "type": "sqlite",
        "z": "c184857f94f92d67",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Counted Items",
        "x": 850,
        "y": 80,
        "wires": [
            [
                "2e355772daca5203"
            ]
        ]
    },
    {
        "id": "4bcb9e9d5e808913",
        "type": "sqlite",
        "z": "c184857f94f92d67",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Counted Unknown",
        "x": 1170,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4aacf1e92f524bd5",
        "type": "sqlite",
        "z": "c184857f94f92d67",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Counted Not Matching",
        "x": 1200,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "2e355772daca5203",
        "type": "delay",
        "z": "c184857f94f92d67",
        "name": "1s",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1070,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b6bbf9b1d119e29e",
        "type": "debug",
        "z": "c184857f94f92d67",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 40,
        "wires": []
    },
    {
        "id": "fafcb00e15742b7a",
        "type": "sqlite",
        "z": "b9d72e462d78c08f",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get master",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "8f29e2f31c6e6456"
            ]
        ]
    },
    {
        "id": "50433adc406bea0f",
        "type": "function",
        "z": "b9d72e462d78c08f",
        "name": "Matching SKUs",
        "func": "//Parse only skus\nvar original_skus = msg.items_toCopy.map(item => item.SKU_original);\nvar skusStrg = \"\",padded;\noriginal_skus.forEach((sku, index) => {\n    skusStrg += `'${sku}',`;\n});\nskusStrg = skusStrg.slice(0,-1);\n\n// prepare query to get all Assets for each item.\nmsg.topic = \"SELECT * FROM master WHERE SKU_original IN (\"+skusStrg+\");\";\n//node.warn(msg.topic);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "fafcb00e15742b7a"
            ]
        ]
    },
    {
        "id": "8f29e2f31c6e6456",
        "type": "function",
        "z": "b9d72e462d78c08f",
        "name": "Copy Metadata",
        "func": "const defaultMapping = [\n    {item:\"SKU\", asset:\"SKU\", copyFlag: true},\n    {item:\"Description\", asset:\"Description\", copyFlag: true},\n    {item:\"DepartmentID\", asset:\"DepartmentID\", copyFlag: true},\n    {item:\"Brand\", asset:\"Brand\", copyFlag: true},\n    {item:\"Style\", asset:\"Style\", copyFlag: true},\n    {item:\"SupplierName\", asset:\"SupplierName\", copyFlag: true},\n    {item:\"Color\", asset:\"Color\", copyFlag: true},\n    {item:\"Size\", asset:\"Size\", copyFlag: true},\n    {item:\"Season\", asset:\"Season\", copyFlag: true},\n    {item:\"Price\", asset:\"PriceOriginal\", copyFlag: true},\n    {item:\"TotalPrice\", asset:\"TotalPrice\", copyFlag: true},\n    ];\n\nvar assetResponse = msg.payload;\nvar allAssets = assetResponse.reduce((acc, current) => {\n    acc[current.SKU_original] = current;\n    return acc;\n},{});\n\nvar copiedData = copyAllMetadata(msg.items_toCopy, allAssets);\n//node.warn(copiedData);\n\nvar sqlvalues = \"\";\ncopiedData.forEach( item => {\n    if(item.validated === 1){\n        sqlvalues += `('${item.serialNumber}','${item.SKU_original}','${item.SKU}','${item.Description}','${item.DepartmentID}','${item.Brand}','${item.Style}','${item.SupplierName}','${item.Color}','${item.Size}','${item.Season}','${item.Price}','${item.TotalPrice}','${item.check_flag}','${item.validated}','${msg.zone}','${msg.store}','${msg.disposition}','${item.Purchase_Order}','${item.Supplier_Number}','${item.Shipment_Number}','${item.Comments}'),`;\n    } else{\n        sqlvalues += `('${item.serialNumber}','${item.SKU_original}','','','','','','','','','','','','${item.check_flag}','${item.validated}','${msg.zone}','${msg.store}','${msg.disposition}','${item.Purchase_Order}','${item.Supplier_Number}','${item.Shipment_Number}','${item.Comments}'),`;\n    }\n});\nsqlvalues = sqlvalues.slice(0,-1);\nmsg.topic = \"INSERT OR REPLACE INTO Inventory (TagID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,TotalPrice,check_flag,validated,zone,store,Retail_Disposition,Purchase_Order,Supplier_Number,Shipment_Number,Comments) VALUES \"+sqlvalues+\";\";\n//node.warn(msg.topic);\nreturn msg;\n\n//Functions and constants\nfunction copyAllMetadata(items, assets){\n    var newItems = [];\n    items.forEach(item => {\n        item.check_flag = 1;\n        //node.warn(assets[item.SKU_original]);\n        if(assets[item.SKU_original]){\n            item.validated = 1;\n            newItems.push(copyMetadata(item, assets[item.SKU_original]));\n            \n        }\n        else{\n            item.validated = 0;\n            newItems.push(item);\n        }\n    });\n    \n    return newItems;\n}\n\nfunction copyMetadata(item, asset, dataMap){\n    dataMap = dataMap || defaultMapping;\n    var newItem = item;\n    dataMap.forEach(data => {\n        if(data.copyFlag)\n            newItem[data.item] = asset[data.asset] || newItem[data.item];\n    });\n    return newItem;\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 160,
        "wires": [
            [
                "1242c2b8c7434a6a"
            ]
        ]
    },
    {
        "id": "1242c2b8c7434a6a",
        "type": "sqlite",
        "z": "b9d72e462d78c08f",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Inventory",
        "x": 720,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4086a77cb8329631",
        "type": "debug",
        "z": "b9d72e462d78c08f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "e59bc181e1930a77",
        "type": "debug",
        "z": "b9d72e462d78c08f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "e10abbcffcf99b45",
        "type": "sqlite",
        "z": "5320966ce4df3d0f",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get master",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "a30f948a38a9af15"
            ]
        ]
    },
    {
        "id": "aa9f18e3aa72f44c",
        "type": "function",
        "z": "5320966ce4df3d0f",
        "name": "Matching SKUs",
        "func": "//Parse only skus\nvar original_skus = msg.items_toCopy.map(item => item.SKU_original);\nvar skusStrg = \"\",padded;\noriginal_skus.forEach((sku, index) => {\n    skusStrg += `'${sku}',`;\n});\nskusStrg = skusStrg.slice(0,-1);\n\n// prepare query to get all Assets for each item.\nmsg.topic = \"SELECT * FROM master WHERE SKU_original IN (\"+skusStrg+\");\";\n//node.warn(msg.topic);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "e10abbcffcf99b45"
            ]
        ]
    },
    {
        "id": "a30f948a38a9af15",
        "type": "function",
        "z": "5320966ce4df3d0f",
        "name": "Copy Metadata",
        "func": "const defaultMapping = [\n    {item:\"SKU\", asset:\"SKU\", copyFlag: true},\n    {item:\"Description\", asset:\"Description\", copyFlag: true},\n    {item:\"DepartmentID\", asset:\"DepartmentID\", copyFlag: true},\n    {item:\"Brand\", asset:\"Brand\", copyFlag: true},\n    {item:\"Style\", asset:\"Style\", copyFlag: true},\n    {item:\"SupplierName\", asset:\"SupplierName\", copyFlag: true},\n    {item:\"Color\", asset:\"Color\", copyFlag: true},\n    {item:\"Size\", asset:\"Size\", copyFlag: true},\n    {item:\"Season\", asset:\"Season\", copyFlag: true},\n    {item:\"Price\", asset:\"PriceOriginal\", copyFlag: true},\n    {item:\"TotalPrice\", asset:\"TotalPrice\", copyFlag: true},\n    ];\n\nvar assetResponse = msg.payload;\nvar allAssets = assetResponse.reduce((acc, current) => {\n    acc[current.SKU_original] = current;\n    return acc;\n},{});\n\nvar copiedData = copyAllMetadata(msg.items_toCopy, allAssets);\n//node.warn(copiedData);\n\nvar sqlvalues = \"\";\ncopiedData.forEach( item => {\n    if(item.validated === 1){\n        sqlvalues += `('${item.serialNumber}','${item.SKU_original}','${item.SKU}','${item.Description}','${item.DepartmentID}','${item.Brand}','${item.Style}','${item.SupplierName}','${item.Color}','${item.Size}','${item.Season}','${item.Price}','${item.TotalPrice}','${item.check_flag}','${item.validated}','${msg.zone}','${msg.store}','${msg.disposition}','${item.Purchase_Order}','${item.Supplier_Number}','${item.Shipment_Number}','${item.Comments}'),`;\n    } else{\n        sqlvalues += `('${item.serialNumber}','${item.SKU_original}','','','','','','','','','','','','${item.check_flag}','${item.validated}','${msg.zone}','${msg.store}','${msg.disposition}','${item.Purchase_Order}','${item.Supplier_Number}','${item.Shipment_Number}','${item.Comments}'),`;\n    }\n});\nsqlvalues = sqlvalues.slice(0,-1);\nmsg.topic = \"INSERT OR REPLACE INTO Inventory (TagID,SKU_original,SKU,Description,DepartmentID,Brand,Style,SupplierName,Color,Size,Season,Price,TotalPrice,check_flag,validated,zone,store,Retail_Disposition,Purchase_Order,Supplier_Number,Shipment_Number,Comments) VALUES \"+sqlvalues+\";\";\n//node.warn(msg.topic);\nreturn msg;\n\n//Functions and constants\nfunction copyAllMetadata(items, assets){\n    var newItems = [];\n    items.forEach(item => {\n        item.check_flag = 1;\n        //node.warn(assets[item.SKU_original]);\n        if(assets[item.SKU_original]){\n            item.validated = 1;\n            newItems.push(copyMetadata(item, assets[item.SKU_original]));\n            \n        }\n        else{\n            item.validated = 0;\n            newItems.push(item);\n        }\n    });\n    \n    return newItems;\n}\n\nfunction copyMetadata(item, asset, dataMap){\n    dataMap = dataMap || defaultMapping;\n    var newItem = item;\n    dataMap.forEach(data => {\n        if(data.copyFlag)\n            newItem[data.item] = asset[data.asset] || newItem[data.item];\n    });\n    return newItem;\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 160,
        "wires": [
            [
                "855f90d309772bfb"
            ]
        ]
    },
    {
        "id": "855f90d309772bfb",
        "type": "sqlite",
        "z": "5320966ce4df3d0f",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Inventory",
        "x": 720,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "bd8193bc22e86252",
        "type": "debug",
        "z": "5320966ce4df3d0f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "b4c84ddd007cd25b",
        "type": "debug",
        "z": "5320966ce4df3d0f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "c60204d3e7671048",
        "type": "inject",
        "z": "62403d7ab629bda7",
        "name": "Senssor1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "da2bc7f70c8f868c"
            ]
        ]
    },
    {
        "id": "671431171dcdf848",
        "type": "debug",
        "z": "62403d7ab629bda7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "da2bc7f70c8f868c",
        "type": "function",
        "z": "62403d7ab629bda7",
        "name": "Function1",
        "func": "var count=context.get('Count') || 0;\ncount +=1;\nmsg.payload=\"F1 \"+msg.payload+\" \"+count;\ncontext.set('Count', count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "671431171dcdf848"
            ]
        ]
    },
    {
        "id": "9f873012cf5ea342",
        "type": "inject",
        "z": "62403d7ab629bda7",
        "name": "Senssor2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "7de5342f0879ceac"
            ]
        ]
    },
    {
        "id": "7de5342f0879ceac",
        "type": "function",
        "z": "62403d7ab629bda7",
        "name": "Function2",
        "func": "var count =context.get('count') || 0;\ncount +=1;\nmsg.payload=\"F2 \"+msg.payload+\" \"+count;\ncontext.set('count', count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "c48c7b7a4add6ca6"
            ]
        ]
    },
    {
        "id": "c48c7b7a4add6ca6",
        "type": "debug",
        "z": "62403d7ab629bda7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 180,
        "wires": []
    },
    {
        "id": "79b91e33117044ec",
        "type": "inject",
        "z": "62403d7ab629bda7",
        "name": "Senssor3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "7f437c57137621ca"
            ]
        ]
    },
    {
        "id": "7f437c57137621ca",
        "type": "function",
        "z": "62403d7ab629bda7",
        "name": "Multiple",
        "func": "var count1 =context.get('count1') || 0;\nvar count2 =context.get('count2') || 0;\ncount1 +=1;\ncount2 +=2;\n\nmsg.payload=\"F3 \"+msg.payload+\" \"+count1 +\" \"+count2;\ncontext.set('count1', count1);\ncontext.set('count2', count2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "297e6e671532fe7a"
            ]
        ]
    },
    {
        "id": "297e6e671532fe7a",
        "type": "debug",
        "z": "62403d7ab629bda7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 260,
        "wires": []
    },
    {
        "id": "f6ce7e0842eeda40",
        "type": "inject",
        "z": "62403d7ab629bda7",
        "name": "Senssor4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "d314b176f4ea381d"
            ]
        ]
    },
    {
        "id": "d314b176f4ea381d",
        "type": "function",
        "z": "62403d7ab629bda7",
        "name": "Uses Object",
        "func": "var local =context.get('data') || {};\nif(local.count===undefined)\n{\n    local.count=0;\n}\nlocal.count +=1;\n\nmsg.payload=\"F4 \"+msg.payload+\" \"+local.count;\ncontext.set('data', local);\n// context.set('count2', count2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "a804f0bbcd6a8ac2"
            ]
        ]
    },
    {
        "id": "a804f0bbcd6a8ac2",
        "type": "debug",
        "z": "62403d7ab629bda7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "b9cabfec1da4c392",
        "type": "inject",
        "z": "62403d7ab629bda7",
        "name": "Senssor5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "14a9497d16b36ab2"
            ]
        ]
    },
    {
        "id": "14a9497d16b36ab2",
        "type": "function",
        "z": "62403d7ab629bda7",
        "name": "flow 1",
        "func": "var count =flow.get('count') || 0;\n\ncount +=1;\nmsg.payload=\"F5 \"+msg.payload+\" \"+count;\nflow.set('count', count);\n// context.set('count2', count2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "b3fd536915da9f54"
            ]
        ]
    },
    {
        "id": "b3fd536915da9f54",
        "type": "debug",
        "z": "62403d7ab629bda7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 520,
        "wires": []
    },
    {
        "id": "e6e80c30f2de415b",
        "type": "function",
        "z": "62403d7ab629bda7",
        "name": "flow 2",
        "func": "var count =flow.get('count') || 0;\n\ncount +=2;\nmsg.payload=\"F6 \"+msg.payload+\" \"+count;\nflow.set('count', count);\n// context.set('count2', count2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 520,
        "wires": [
            [
                "a03bf0b64dc1c9dc"
            ]
        ]
    },
    {
        "id": "a03bf0b64dc1c9dc",
        "type": "debug",
        "z": "62403d7ab629bda7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 600,
        "wires": []
    },
    {
        "id": "81c78d42d9263c3b",
        "type": "inject",
        "z": "62403d7ab629bda7",
        "name": "Senssor6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "e6e80c30f2de415b"
            ]
        ]
    },
    {
        "id": "74070f8e907dc874",
        "type": "ui_button",
        "z": "484f7e34439765a5",
        "d": true,
        "name": "",
        "group": "92a9cd27.99b9d",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Hi",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "4f73525b0bc29d02",
                "49cea8c1effe9a1d",
                "f2acbb829ab98de8",
                "3ef3aa94ead77582"
            ]
        ]
    },
    {
        "id": "4f73525b0bc29d02",
        "type": "debug",
        "z": "484f7e34439765a5",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 160,
        "wires": []
    },
    {
        "id": "49cea8c1effe9a1d",
        "type": "ui_audio",
        "z": "484f7e34439765a5",
        "d": true,
        "name": "",
        "group": "92a9cd27.99b9d",
        "voice": "",
        "always": "",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "f2acbb829ab98de8",
        "type": "ui_text",
        "z": "484f7e34439765a5",
        "d": true,
        "group": "92a9cd27.99b9d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "f3b8035082c46deb",
        "type": "ui_gauge",
        "z": "484f7e34439765a5",
        "name": "",
        "group": "9ff909043d291326",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Measure Speed",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "30",
        "seg2": "70",
        "x": 500,
        "y": 380,
        "wires": []
    },
    {
        "id": "3ef3aa94ead77582",
        "type": "ui_toast",
        "z": "484f7e34439765a5",
        "d": true,
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 510,
        "y": 200,
        "wires": []
    },
    {
        "id": "28dcb2c1947d51fa",
        "type": "ui_slider",
        "z": "484f7e34439765a5",
        "name": "",
        "label": "slider",
        "tooltip": "",
        "group": "9ff909043d291326",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "100",
        "step": 1,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "f3b8035082c46deb",
                "21677a38990cff47",
                "a1c94a7974f84700"
            ]
        ]
    },
    {
        "id": "21677a38990cff47",
        "type": "ui_chart",
        "z": "484f7e34439765a5",
        "name": "",
        "group": "9ff909043d291326",
        "order": 3,
        "width": "4",
        "height": "3",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 470,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "54752619c41ab884",
        "type": "ui_dropdown",
        "z": "484f7e34439765a5",
        "name": "",
        "label": "Select Dpt",
        "tooltip": "",
        "place": "Select option",
        "group": "bbd0f946f544a60d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "IT",
                "value": "1",
                "type": "str"
            },
            {
                "label": "CS",
                "value": "2",
                "type": "str"
            },
            {
                "label": "LAW",
                "value": "3",
                "type": "str"
            },
            {
                "label": "English",
                "value": "4",
                "type": "str"
            },
            {
                "label": "Ecnomics",
                "value": "5",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "f3f75a02912b2efc"
            ]
        ]
    },
    {
        "id": "cb9b067132b10aee",
        "type": "ui_form",
        "z": "484f7e34439765a5",
        "name": "",
        "label": "",
        "group": "bbd0f946f544a60d",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Firstname",
                "value": "Firstname",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Lastname",
                "value": "Lastname",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Firstname": "",
            "Lastname": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "633ba15df769288c"
            ]
        ]
    },
    {
        "id": "f3f75a02912b2efc",
        "type": "ui_dropdown",
        "z": "484f7e34439765a5",
        "name": "",
        "label": "Select Class",
        "tooltip": "",
        "place": "Select option",
        "group": "bbd0f946f544a60d",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Morning",
                "value": "1",
                "type": "str"
            },
            {
                "label": "Evening",
                "value": "2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 320,
        "wires": [
            [
                "633ba15df769288c"
            ]
        ]
    },
    {
        "id": "633ba15df769288c",
        "type": "debug",
        "z": "484f7e34439765a5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 260,
        "wires": []
    },
    {
        "id": "a1c94a7974f84700",
        "type": "ui_chart",
        "z": "484f7e34439765a5",
        "name": "",
        "group": "9ff909043d291326",
        "order": 3,
        "width": "2",
        "height": "3",
        "label": "chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 470,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4773657eced6c10a",
        "type": "ui_form",
        "z": "484f7e34439765a5",
        "name": "Login form",
        "label": "",
        "group": "7aa3194d7fa6f75d",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "value": "Username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "Username": "",
            "Password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "x": 110,
        "y": 580,
        "wires": [
            [
                "09a90a1907f146d6"
            ]
        ],
        "info": "<links>\r\n    <a href=\"https://tinyurl.com/wakeup-heroku\" style=\"text-decoration: none;\">\r\n        <img height=\"18\" alt=\"appscripts\" src=\"https://www.gstatic.com/script/apps_script_1x_24dp.png\"/>\r\n    </a>\r\n    <a href=\"https://github.com/hybuild-project/nodered-heroku\" style=\"text-decoration: none;\">\r\n        <img height=\"18\" alt=\"github\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/240px-Octicons-mark-github.svg.png\"/>\r\n    </a>\r\n    <a href=\"https://dashboard.heroku.com/apps/nodered-on-cloud\" style=\"text-decoration: none;\">\r\n        <img height=\"18\" alt=\"heroku\" src=\"https://status.heroku.com/images/apple-touch-icon-120x120-df4786699abad2c062b3126d2caa0655.png\"/>\r\n    </a>\r\n    <a href=\"../editor\" style=\"text-decoration: none;\">\r\n        <img height=\"18\" alt=\"nodered\" src=\"https://nodered.org/about/resources/media/node-red-icon.png\">\r\n    </a>\r\n</links>"
    },
    {
        "id": "d7cfefd77d1300e3",
        "type": "debug",
        "z": "484f7e34439765a5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 620,
        "wires": []
    },
    {
        "id": "539cc65a75ec2746",
        "type": "inject",
        "z": "484f7e34439765a5",
        "name": "Get Data ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Nadeem123",
        "payloadType": "str",
        "x": 120,
        "y": 900,
        "wires": [
            [
                "0b4fd89e5659d3ac"
            ]
        ]
    },
    {
        "id": "0b4fd89e5659d3ac",
        "type": "http request",
        "z": "484f7e34439765a5",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://fir-connect-fec84-default-rtdb.firebaseio.com/new_Array.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 290,
        "y": 900,
        "wires": [
            [
                "c808dbac7ec8db53"
            ]
        ]
    },
    {
        "id": "c808dbac7ec8db53",
        "type": "debug",
        "z": "484f7e34439765a5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 900,
        "wires": []
    },
    {
        "id": "b89d96242e6ffcaf",
        "type": "ui_button",
        "z": "484f7e34439765a5",
        "name": "",
        "group": "5be74984d135973b",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Add Data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 1040,
        "wires": [
            [
                "ae5e47632d04dacb",
                "17f9931d8c6947c0",
                "2263927f247b75f0"
            ]
        ]
    },
    {
        "id": "ae5e47632d04dacb",
        "type": "ui_text_input",
        "z": "484f7e34439765a5",
        "name": "",
        "label": "E-mail",
        "tooltip": "",
        "group": "5be74984d135973b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 270,
        "y": 1020,
        "wires": [
            [
                "bb689b135eb5bf1c"
            ]
        ]
    },
    {
        "id": "17f9931d8c6947c0",
        "type": "ui_text_input",
        "z": "484f7e34439765a5",
        "name": "",
        "label": "Name",
        "tooltip": "",
        "group": "5be74984d135973b",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "bb689b135eb5bf1c"
            ]
        ]
    },
    {
        "id": "2263927f247b75f0",
        "type": "ui_text_input",
        "z": "484f7e34439765a5",
        "name": "",
        "label": "surName",
        "tooltip": "",
        "group": "5be74984d135973b",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 280,
        "y": 1100,
        "wires": [
            [
                "bb689b135eb5bf1c"
            ]
        ]
    },
    {
        "id": "bb689b135eb5bf1c",
        "type": "debug",
        "z": "484f7e34439765a5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a69393b4f1565a2e",
        "type": "inject",
        "z": "484f7e34439765a5",
        "name": "Post Data ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Nadeem",
        "payloadType": "str",
        "x": 120,
        "y": 960,
        "wires": [
            [
                "fe721534313184e1"
            ]
        ]
    },
    {
        "id": "fe721534313184e1",
        "type": "http request",
        "z": "484f7e34439765a5",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://fir-connect-fec84-default-rtdb.firebaseio.com/User/-N6HHhusMa3RrQavw9Ai.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 290,
        "y": 960,
        "wires": [
            [
                "79a15cb7739b1448"
            ]
        ]
    },
    {
        "id": "79a15cb7739b1448",
        "type": "debug",
        "z": "484f7e34439765a5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 960,
        "wires": []
    },
    {
        "id": "09a90a1907f146d6",
        "type": "function",
        "z": "484f7e34439765a5",
        "name": "",
        "func": "var Username=\"Nadeem\";\nvar Password=\"nadeem123\"\nif(msg.payload.Username==Username && msg.payload.Password==Password){\n    msg.payload=\"Login Successfull\";\n}else{\n    msg.payload=\"incorrect username and password\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": [
            [
                "d7cfefd77d1300e3",
                "525fca0a50cf7439",
                "4d926eb7b22e2f24"
            ]
        ]
    },
    {
        "id": "525fca0a50cf7439",
        "type": "ui_audio",
        "z": "484f7e34439765a5",
        "name": "",
        "group": "7aa3194d7fa6f75d",
        "voice": "",
        "always": "",
        "x": 560,
        "y": 560,
        "wires": []
    },
    {
        "id": "4d926eb7b22e2f24",
        "type": "ui_toast",
        "z": "484f7e34439765a5",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 570,
        "y": 660,
        "wires": []
    },
    {
        "id": "3fc0e275e6f10fed",
        "type": "ui_template",
        "z": "484f7e34439765a5",
        "group": "7aa3194d7fa6f75d",
        "name": "Links",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<links>\n    <a href=\"https://tinyurl.com/wakeup-heroku\" style=\"text-decoration: none;\">\n        <img height=\"18\" alt=\"appscripts\" src=\"https://www.gstatic.com/script/apps_script_1x_24dp.png\"/>\n    </a>\n    <a href=\"https://github.com/hybuild-project/nodered-heroku\" style=\"text-decoration: none;\">\n        <img height=\"18\" alt=\"github\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/240px-Octicons-mark-github.svg.png\"/>\n    </a>\n    <a href=\"https://dashboard.heroku.com/apps/nodered-on-cloud\" style=\"text-decoration: none;\">\n        <img height=\"18\" alt=\"heroku\" src=\"https://status.heroku.com/images/apple-touch-icon-120x120-df4786699abad2c062b3126d2caa0655.png\"/>\n    </a>\n    <a href=\"../editor\" style=\"text-decoration: none;\">\n        <img height=\"18\" alt=\"nodered\" src=\"https://nodered.org/about/resources/media/node-red-icon.png\">\n    </a>\n</links>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 330,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "7ac074324fd09c79",
        "type": "ui_template",
        "z": "484f7e34439765a5",
        "group": "92a9cd27.99b9d",
        "name": "Head",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .md-toolbar-tools{\n        background-image: url(\"https://media-exp1.licdn.com/dms/image/C4E0BAQEpubQDkW_FlQ/company-logo_200_200/0/1596367778963?e=2147483647&v=beta&t=7mLgtUHc8ni4PXMbnamf3OF3ybTHLzHDTrsIs5-MMO0\");\n        background-repeat: no-repeat;\n        background-position: 98%;\n        background-size: contain;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 330,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "2f4427dc27c03be9",
        "type": "ui_template",
        "z": "484f7e34439765a5",
        "group": "7aa3194d7fa6f75d",
        "name": "Body",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "\n<p></p>\n<a class=\"my-title\">Welcom to Innovent</a>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 330,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "fa5e34c3bdcd81da",
        "type": "comment",
        "z": "484f7e34439765a5",
        "name": "Login Tab Work",
        "info": "",
        "x": 340,
        "y": 540,
        "wires": []
    },
    {
        "id": "b9540d1dbf5d2fd0",
        "type": "comment",
        "z": "484f7e34439765a5",
        "d": true,
        "name": "Home Tab Work",
        "info": "",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "6d78bf540d4c4141",
        "type": "comment",
        "z": "484f7e34439765a5",
        "name": "Firebase Tab Work",
        "info": "",
        "x": 372,
        "y": 852.3333129882812,
        "wires": []
    },
    {
        "id": "8f554b524d30f495",
        "type": "comment",
        "z": "484f7e34439765a5",
        "name": "Email Work",
        "info": "",
        "x": 910,
        "y": 540,
        "wires": []
    },
    {
        "id": "110056f3766aa43e",
        "type": "inject",
        "z": "484f7e34439765a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "hello",
        "payloadType": "str",
        "x": 790,
        "y": 620,
        "wires": [
            [
                "244e7ca2e2bcca19",
                "794ddba479cd4632"
            ]
        ]
    },
    {
        "id": "794ddba479cd4632",
        "type": "debug",
        "z": "484f7e34439765a5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 680,
        "wires": []
    },
    {
        "id": "244e7ca2e2bcca19",
        "type": "e-mail",
        "z": "484f7e34439765a5",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "nadeem.ch6465@gmail.com",
        "dname": "",
        "x": 1060,
        "y": 620,
        "wires": []
    },
    {
        "id": "31e259b362dd58c1",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Select first_name from student_record;",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "e06cb134a61edd38"
            ]
        ]
    },
    {
        "id": "01168f7b247f66aa",
        "type": "debug",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 160,
        "wires": []
    },
    {
        "id": "38f9534b5856a341",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "Msg1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hi Saqib ,, i has send you msg through node red using whatsapp node.",
        "payloadType": "str",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "a64f2ca848287b47"
            ]
        ]
    },
    {
        "id": "10e5d2053750522b",
        "type": "debug",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "159ac54c6c211bd9",
        "type": "function",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "func": "var c=\"NAdemm\"\nmsg.payload = c;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 440,
        "wires": [
            [
                "5e7f8b239209a47a"
            ]
        ]
    },
    {
        "id": "e98ec94c1831a186",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "Msg1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "hello",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "159ac54c6c211bd9"
            ]
        ]
    },
    {
        "id": "5e7f8b239209a47a",
        "type": "debug",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 440,
        "wires": []
    },
    {
        "id": "af4e83e0e63d323a",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Select  attendance_status from attendance_session_table;",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "e06cb134a61edd38"
            ]
        ]
    },
    {
        "id": "081357f9829a6206",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Select * from attendance_table;",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 40,
        "wires": [
            [
                "294c20cb5e8158b4"
            ]
        ]
    },
    {
        "id": "ae6847daa67e0d70",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Select * from attendance_table;",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "294c20cb5e8158b4"
            ]
        ]
    },
    {
        "id": "90cdc82e0373b5e7",
        "type": "debug",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 60,
        "wires": []
    },
    {
        "id": "62dfcaa2cbf18433",
        "type": "debug",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 580,
        "wires": []
    },
    {
        "id": "7d10d1ceed5f6dcc",
        "type": "http in",
        "z": "6bd4386c39e3eb95",
        "name": "Node2",
        "url": "http://localhost:8080/faculty",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 600,
        "wires": [
            [
                "9bf60147c29b5648"
            ]
        ]
    },
    {
        "id": "4a5e46c992028b88",
        "type": "http in",
        "z": "6bd4386c39e3eb95",
        "name": "Node1",
        "url": "http://localhost:8080/attendance",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 560,
        "wires": [
            [
                "9bf60147c29b5648"
            ]
        ]
    },
    {
        "id": "294c20cb5e8158b4",
        "type": "join",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 306.67718505859375,
        "y": 70.00631713867188,
        "wires": [
            [
                "90cdc82e0373b5e7"
            ]
        ]
    },
    {
        "id": "9bf60147c29b5648",
        "type": "join",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "7",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 270,
        "y": 580,
        "wires": [
            [
                "62dfcaa2cbf18433"
            ]
        ]
    },
    {
        "id": "0fe36c1080c855e4",
        "type": "join",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 570,
        "y": 220,
        "wires": [
            [
                "01168f7b247f66aa"
            ]
        ]
    },
    {
        "id": "2bce2a96ca56d3b4",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Helloworld",
        "payloadType": "str",
        "x": 220,
        "y": 800,
        "wires": [
            [
                "83c8eaa8694e81be"
            ]
        ]
    },
    {
        "id": "83c8eaa8694e81be",
        "type": "debug",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 800,
        "wires": []
    },
    {
        "id": "b6880c39c6bcc69a",
        "type": "debug",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f2fe78ca7f19394e",
        "type": "http response",
        "z": "6bd4386c39e3eb95",
        "name": "request response",
        "statusCode": "200",
        "headers": {
            "Status": "Success"
        },
        "x": 490,
        "y": 1160,
        "wires": []
    },
    {
        "id": "702976d7734e154a",
        "type": "inject",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 134.44444274902344,
        "y": 1058.8887939453125,
        "wires": [
            [
                "5d41e8966e4184dd"
            ]
        ]
    },
    {
        "id": "5d41e8966e4184dd",
        "type": "http request",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:8080/attendance",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "b6880c39c6bcc69a",
                "f2fe78ca7f19394e"
            ]
        ]
    },
    {
        "id": "e06cb134a61edd38",
        "type": "mysql",
        "z": "6bd4386c39e3eb95",
        "mydb": "8afa890fa624105a",
        "name": "",
        "x": 300,
        "y": 220,
        "wires": [
            [
                "fd8398da58244c39"
            ]
        ]
    },
    {
        "id": "a64f2ca848287b47",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "account": "a5e25bc5504b2641",
        "text": "hi ",
        "inputtypemessage": "str",
        "rejectssl": false,
        "x": 360,
        "y": 400,
        "wires": [
            [
                "10e5d2053750522b"
            ]
        ]
    },
    {
        "id": "fd8398da58244c39",
        "type": "merge",
        "z": "6bd4386c39e3eb95",
        "name": "",
        "timeout": "",
        "x": 410,
        "y": 280,
        "wires": [
            [
                "0fe36c1080c855e4"
            ]
        ]
    },
    {
        "id": "5f88c54323feda7a",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "msg1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "5870dbd0c8b4673a"
            ]
        ]
    },
    {
        "id": "3ec2cebd614ba746",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "msg2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "5870dbd0c8b4673a"
            ]
        ]
    },
    {
        "id": "467c175d5fb2d470",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "msg3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "29",
        "payloadType": "num",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "5870dbd0c8b4673a"
            ]
        ]
    },
    {
        "id": "5870dbd0c8b4673a",
        "type": "switch",
        "z": "8fdafe46424ef527",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 330,
        "y": 180,
        "wires": [
            [
                "9bdabd36154449de"
            ],
            [
                "7998446b942f388d"
            ],
            [
                "abf5165b780b9bb4"
            ]
        ]
    },
    {
        "id": "9bdabd36154449de",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 120,
        "wires": []
    },
    {
        "id": "abf5165b780b9bb4",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 240,
        "wires": []
    },
    {
        "id": "7998446b942f388d",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 180,
        "wires": []
    },
    {
        "id": "10bed411dfcde08a",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "a9e41dc605bc1b3e"
            ]
        ]
    },
    {
        "id": "a9e41dc605bc1b3e",
        "type": "http request",
        "z": "8fdafe46424ef527",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:8080/attendance",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 370,
        "y": 380,
        "wires": [
            [
                "c1f87019831ef97d"
            ]
        ]
    },
    {
        "id": "c1f87019831ef97d",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 380,
        "wires": []
    },
    {
        "id": "1ceaa63608f2376f",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "GET DATA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select  username,password from faculty_record;",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 460,
        "wires": [
            [
                "850e2f3c9914e2be"
            ]
        ]
    },
    {
        "id": "7800be9cb2d32d95",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 460,
        "wires": []
    },
    {
        "id": "c37a5f455b928b54",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "POST DATA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "insert into student_record(address, first_name, last_name, phone_no, available_balance)Values('Pakisatn', 'Farukh', 'ali', '8762387618', '500')",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "26600b58c0d189e2"
            ]
        ]
    },
    {
        "id": "c1761677009e5d20",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 540,
        "wires": []
    },
    {
        "id": "04257387a781ab05",
        "type": "change",
        "z": "8fdafe46424ef527",
        "name": "Change Node",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Nadeem",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 760,
        "wires": [
            [
                "882970ec01d1f6fe"
            ]
        ]
    },
    {
        "id": "80aa9009745c3436",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "change Text using Change node",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hello",
        "payloadType": "str",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "04257387a781ab05",
                "882970ec01d1f6fe"
            ]
        ]
    },
    {
        "id": "882970ec01d1f6fe",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 700,
        "wires": []
    },
    {
        "id": "8b649972ddf2051b",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "Enter Text=Hello",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hello",
        "payloadType": "str",
        "x": 160,
        "y": 920,
        "wires": [
            [
                "7e2a404097d65605"
            ]
        ]
    },
    {
        "id": "7e2a404097d65605",
        "type": "function",
        "z": "8fdafe46424ef527",
        "name": "If Condition",
        "func": "if(msg.payload==\"Hello\"){\n    msg.payload=\"ALi\";\n}else{\n    msg.payload=\"Hello\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 920,
        "wires": [
            [
                "01ee16a567e2b288"
            ]
        ]
    },
    {
        "id": "01ee16a567e2b288",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 920,
        "wires": []
    },
    {
        "id": "c0acd20472e40b3b",
        "type": "inject",
        "z": "8fdafe46424ef527",
        "name": "Inject Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hello",
        "payloadType": "str",
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "d9b0ef7483b6e27e"
            ]
        ]
    },
    {
        "id": "d9b0ef7483b6e27e",
        "type": "function",
        "z": "8fdafe46424ef527",
        "name": "Replace text",
        "func": "msg.payload=\"Hello\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1040,
        "wires": [
            [
                "7e2a404097d65605",
                "b9e57b8e1e047db2"
            ]
        ]
    },
    {
        "id": "b9e57b8e1e047db2",
        "type": "debug",
        "z": "8fdafe46424ef527",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1040,
        "wires": []
    },
    {
        "id": "850e2f3c9914e2be",
        "type": "mysql",
        "z": "8fdafe46424ef527",
        "mydb": "8afa890fa624105a",
        "name": "",
        "x": 360,
        "y": 460,
        "wires": [
            [
                "7800be9cb2d32d95"
            ]
        ]
    },
    {
        "id": "26600b58c0d189e2",
        "type": "mysql",
        "z": "8fdafe46424ef527",
        "mydb": "8afa890fa624105a",
        "name": "",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "c1761677009e5d20"
            ]
        ]
    },
    {
        "id": "ddde6605a55e7f83",
        "type": "delay",
        "z": "7d21f6a3794af32c",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 320,
        "wires": [
            [
                "864d70741291da93"
            ]
        ],
        "info": "msg.payload= \"hey\";\nreturn msg.payload;"
    },
    {
        "id": "864d70741291da93",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Filename",
        "func": "msg.localFilename = \"D:/New folder/UAE_Virgin_ItemMaster_08082022_102735\" + msg.payload;\nmsg.filename =  global.get('ftpItemMaster') + msg.payload;\nmsg.file = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "ff64b52bc426b94e"
            ]
        ]
    },
    {
        "id": "c3d97851ea84cc50",
        "type": "switch",
        "z": "7d21f6a3794af32c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 240,
        "wires": [
            [
                "37aca9f4b702d8f0"
            ],
            [
                "94e7801c5a5a32ca",
                "6c0b0759ac7303cf"
            ]
        ]
    },
    {
        "id": "d7f4412b6a24512e",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Read FTP new files",
        "func": "\nlet files = msg.payload;\n \nlet fileNames = [];\nlet qty = 0;\nfiles.forEach((file, i) => {\n    //node.warn(\"FTP Master Files sliced: \" + file.name)\n    if (file.name.slice(0, 22) === 'UAE_Virgin_ItemMaster_') {\n        fileNames.push(file.name);\n        qty++;\n    }\n});\nnode.warn(\"FTP Master Files Processed: \" + qty)\nmsg.payload = fileNames;\nmsg.qty = qty;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 240,
        "wires": [
            [
                "c3d97851ea84cc50"
            ]
        ]
    },
    {
        "id": "37aca9f4b702d8f0",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "Directory Empty",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "{\t    \"result\": \"No new master files on ftp server!\"\t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 180,
        "wires": []
    },
    {
        "id": "6c0b0759ac7303cf",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "{\t   \"FTP Master Info\": {\t       \"Message\":\"FTP Master Files Found\",\t       \"time\":$now(),\t       \"Files\": qty\t    }\t    \t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 240,
        "wires": []
    },
    {
        "id": "3c1de8f42f6e9cda",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Path to move",
        "func": "msg.sourceFile = msg.filename;\nmsg.detinationFile =  global.get('ftpItemMaster') + \"Processed/\" \n+ msg.file;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 380,
        "wires": [
            [
                "556624c8f2cf42b4",
                "2e8e7429a7d95ae2"
            ]
        ]
    },
    {
        "id": "556624c8f2cf42b4",
        "type": "switch",
        "z": "7d21f6a3794af32c",
        "name": "",
        "property": "fileCreated",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 380,
        "wires": [
            [
                "9714e0ebc6b83332"
            ]
        ]
    },
    {
        "id": "42e9b968be5c2823",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 180,
        "wires": []
    },
    {
        "id": "9714e0ebc6b83332",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Paths",
        "func": "msg.masterSource = global.get('masterSource');\nmsg.masterToProcess = global.get('masterToProcess');\nmsg.masterProcessed = global.get('masterProcessed')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 500,
        "wires": [
            [
                "2000d42c25e77517"
            ]
        ]
    },
    {
        "id": "b60a0d021a2dfb1f",
        "type": "link in",
        "z": "7d21f6a3794af32c",
        "name": "",
        "links": [],
        "x": 325,
        "y": 500,
        "wires": [
            [
                "9714e0ebc6b83332"
            ]
        ]
    },
    {
        "id": "8f6c60101151593f",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Categorize",
        "func": "var files = msg.files;\nvar filename;\nmsg.emptyMaster = false;\nfor(i=0;i<files.length;i++){\n    filename = files[i];\n    if(filename.match(/Virgin_ItemMaster_.*/)){\n        msg.filenameItemMaster=filename;\n        return msg;\n    }\n}\nmsg.emptyMaster = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 620,
        "wires": [
            [
                "5c1c1b0ddef23d81"
            ]
        ]
    },
    {
        "id": "5c1c1b0ddef23d81",
        "type": "switch",
        "z": "7d21f6a3794af32c",
        "name": "",
        "property": "emptyMaster",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 680,
        "wires": [
            [
                "d7fb2677da38b437"
            ],
            [
                "98887169da5239bd"
            ]
        ]
    },
    {
        "id": "d7fb2677da38b437",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Filename",
        "func": "msg.filename = msg.source+msg.filenameItemMaster;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 620,
        "wires": [
            [
                "e407b010fc522481"
            ]
        ]
    },
    {
        "id": "98887169da5239bd",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "Directory Empty",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "{\t    \"result\": \"Master Directory Empty!\"\t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 740,
        "wires": []
    },
    {
        "id": "beda5e08663e70f2",
        "type": "file in",
        "z": "7d21f6a3794af32c",
        "name": "MasterFile",
        "filename": "C:\\\\data\\\\master\\\\toProcess\\\\master.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 690,
        "y": 500,
        "wires": [
            [
                "eea42a661634cd0b"
            ]
        ]
    },
    {
        "id": "eea42a661634cd0b",
        "type": "csv",
        "z": "7d21f6a3794af32c",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 730,
        "y": 440,
        "wires": [
            [
                "a91283935cbdd00d",
                "d7468559157cb4df"
            ]
        ]
    },
    {
        "id": "cc7276b540b8f165",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Init-sub",
        "func": "var results = msg.payload;\nlet sqlRow = [];\n\nvar counterg = Math.ceil(results.length / 50);\nglobal.set(\"counter\", counterg);\nglobal.set(\"toprocess\", results.length);\nglobal.set(\"tmp\", 0);\n\nvar countersql = Math.ceil(results.length / 1000);\nglobal.set(\"counter2\", countersql);\nglobal.set(\"toprocess2\", results.length);\nglobal.set(\"tmp2\", 0);\n\nvar currentTime = new Date().getTime();\nvar toUpdate = [];\nvar failed = [];\n\nlet query = \"\";\nlet sqlHeader = \"\";\nlet sqlValueI = \"\";\n\nconst sqlCol = flow.get(\"MasterSQLCol\");\nconst csvColumns = flow.get(\"MasterCSVCol\");\nresults.forEach((row, i) => {\n  csvColumns.forEach((csvCol, i) => {\n      const regex = /\\'/ig;\n      if(csvCol !== 'Country' && csvCol !== 'Currency') {\n           row[csvCol] = row[csvCol].toString().replace(regex, '\\'\\'');\n      }\n    switch (csvCol) {\n      case \"product_number\":\n        sqlRow[sqlCol.indexOf(\"ID\")] = row[csvCol];\n        sqlRow[sqlCol.indexOf(\"UniqueID\")] = row[csvCol];\n        break;\n      case \"department\":\n        sqlRow[sqlCol.indexOf(\"DepartmentID\")] = row[csvCol];\n        break;\n      case \"item_group\":\n        sqlRow[sqlCol.indexOf(\"GroupCode\")] = row[csvCol];\n        break;\n      case \"Country\":\n        sqlRow[sqlCol.indexOf(\"Country\")] = \"UAE\";\n        break;\n      case \"supplier\":\n        sqlRow[sqlCol.indexOf(\"SupplierNum\")] = row[csvCol];\n        break;\n      case \"supplier_name\":\n        sqlRow[sqlCol.indexOf(\"SupplierName\")] = row[csvCol];\n        break;\n      case \"barcode\":\n        let barcode = row[csvCol];\n        let barcodePadded = barcode.toString().padStart(14, \"0\");\n        sqlRow[sqlCol.indexOf(\"GTIN\")] = barcodePadded;\n        sqlRow[sqlCol.indexOf(\"GTINOriginal\")] = barcode;\n        break;\n      case \"external_item_number\":\n        sqlRow[sqlCol.indexOf(\"SupplierItemNum\")] = row[csvCol];\n        break;\n      case \"vsp\":\n        sqlRow[sqlCol.indexOf(\"TotalPrice\")] = row[csvCol];\n        break;\n      case \"Currency\":\n        sqlRow[sqlCol.indexOf(\"Currency\")] = \"AED\";\n        break;\n      case \"sku\":\n        let sku = row[csvCol];\n        let skuPadded = sku.toString().padStart(14, \"0\");\n        sqlRow[sqlCol.indexOf(\"sku\")] = skuPadded;\n        sqlRow[sqlCol.indexOf(\"SKU_original\")] = sku;\n        break;\n      case \"class\":\n        sqlRow[sqlCol.indexOf(\"Category\")] = row[csvCol];\n        break;\n      case \"subdepartment\":\n        sqlRow[sqlCol.indexOf(\"SubdepartmentID\")] = row[csvCol];\n        break;\n      case \"subclass\":\n        sqlRow[sqlCol.indexOf(\"Subcategory\")] = row[csvCol];\n        break;\n      default:\n        sqlRow[sqlCol.indexOf(csvCol)] = row.hasOwnProperty(csvCol)\n          ? row[csvCol]\n          : \"\";\n\n        break;\n    }\n  });\n\n  sqlRow.forEach((col, i) => {\n    sqlValueI = sqlValueI + col + \"','\";\n    sqlHeader = sqlHeader + sqlCol[i] + \"','\";\n\n  });\n\n  sqlValueI = sqlValueI.slice(0, sqlValueI.length - 2);\n  sqlHeader = sqlHeader.slice(0, sqlHeader.length - 2);\n  query =\n    \"INSERT or REPLACE INTO MASTER\" +\n    \"('\" +\n    sqlHeader +\n    \")\" +\n    \" VALUES \" +\n    \"('\" +\n    sqlValueI +\n    \");\" +\n    \"\\n\" +\n    query;\n\n  sqlValueI = \"\";\n  sqlHeader = \"\";\n});\n\nmsg.topic = \"BEGIN TRANSACTION;\" + \"\\n\" + query + \"COMMIT;\";\n\nmsg.payload = toUpdate;\nmsg.FailedToUpdate = failed;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "390cd327c90e68f9",
                "b85c7fe25a9840c0",
                "a8a7448336942834"
            ]
        ]
    },
    {
        "id": "ebdab08a6bd0c7f6",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "Master Processed",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "{\t   \"result\": {\t       \"Message\": \"Master Processed successfully!\",\t       \"masterFile\": msg.filenameItemMaster,\t       \"time\": $now(),\t       \"Files\": qty\t    }\t}\t\t",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 480,
        "wires": []
    },
    {
        "id": "390cd327c90e68f9",
        "type": "switch",
        "z": "7d21f6a3794af32c",
        "name": "",
        "property": "FailedToUpdate",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 930,
        "y": 300,
        "wires": [
            [
                "d222ee3c9bd497f9"
            ]
        ]
    },
    {
        "id": "d222ee3c9bd497f9",
        "type": "change",
        "z": "7d21f6a3794af32c",
        "name": "Failed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "FailedToUpdate",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "a3e1b2902c55262f"
            ]
        ]
    },
    {
        "id": "c8da76813bbaa3ce",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Response",
        "func": "var counter = global.get('counter2');\nvar tmp = global.get('tmp2');\n\n//node.warn(\"COUNTER: \"+ counter);\n//node.warn(\"INCREASED COUNTER: \"+ tmp);\n\nif (tmp<=counter){\n    \n    tmp=tmp+1;\n    global.set(\"tmp2\",tmp);\n    //node.warn(\"TMP: \"+ global.get('tmp'));\n    var toprocess = global.get('toprocess');\n    if (tmp === counter){\n        node.warn(\" ***** Successfully processed: \" +toprocess+ \" ITEM MASTER records in SQLITE DB ***** \");\n        msg.payload = {process:true};\n        return msg.payload\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 360,
        "wires": [
            [
                "b2e9a1e348b13476"
            ]
        ],
        "icon": "node-red/white-globe.png"
    },
    {
        "id": "a3e1b2902c55262f",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/data/logs/ItemMaster/'+ shortDate + '/inbound/failed_to_update_' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "dd89988ed2a36f1e"
            ]
        ]
    },
    {
        "id": "b2e9a1e348b13476",
        "type": "link out",
        "z": "7d21f6a3794af32c",
        "name": "",
        "mode": "link",
        "links": [
            "a8edb53e9ea8bac9",
            "d4e020fef247d193"
        ],
        "x": 1215,
        "y": 360,
        "wires": []
    },
    {
        "id": "dd89988ed2a36f1e",
        "type": "file",
        "z": "7d21f6a3794af32c",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 1360,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "09909c36637b1543",
        "type": "inject",
        "z": "7d21f6a3794af32c",
        "name": "Item-Master",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "4d2b3c7ad46d50d0"
            ]
        ]
    },
    {
        "id": "697ca1379a8ce88f",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 960,
        "wires": []
    },
    {
        "id": "e89d54b58a60529d",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "FTP PATHS",
        "func": "\nvar masterSource = \"/data/VirginRetail/ItemMaster/\";\nvar masterToProcess = \"/data/master/toProcess/\"\nvar masterProcessed = \"/data/VirginRetail/ItemMaster/Processed/\"\n\nvar ftpItemMaster  = \"/VirginRetail/ItemMaster/new.txt/\";\nvar ftpSOH  = \"/Virgin-RFID/VirginRetail/SOH/\";\n\nvar sohSource = \"/data/soh/\";\nvar sohToProcess = \"/data/soh/toProcess/\"\nvar sohProcessed = \"/data/soh/processed/\"\n\nglobal.set(\"sohSource\", sohSource);\nglobal.set(\"sohToProcess\", sohToProcess);\nglobal.set(\"sohProcessed\", sohProcessed);\n\nglobal.set(\"masterSource\", masterSource);\nglobal.set(\"masterToProcess\", masterToProcess);\nglobal.set(\"masterProcessed\", masterProcessed);\n\nglobal.set(\"ftpItemMaster\", ftpItemMaster);\nglobal.set(\"ftpSOH\", ftpSOH);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bfa442d6f0dc87eb",
        "type": "inject",
        "z": "7d21f6a3794af32c",
        "name": "Initialize",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "e89d54b58a60529d"
            ]
        ]
    },
    {
        "id": "7836e50e70578bc7",
        "type": "function",
        "z": "7d21f6a3794af32c",
        "name": "Flow Definitions",
        "func": "const SOHMASTERFIELDS = [\n  'inventory_status',\n  'item_ref',\n  'location_id',\n  'SubdepartmentID',\n  'variant',\n  'Subcategory',\n  'artist',\n  'author',\n  'configuration',\n  'release_date',\n  'serial_number',\n  'active_sales_price',\n  'purchase_price',\n  'latest_cost_price',\n  'unit',\n  'purchase_unit',\n  'unit_conversion',\n  'Description',\n  'DepartmentID',\n  'Brand',\n  'Style',\n  'GTIN',\n  'SupplierName',\n  'SupplierItemNum',\n  'Color',\n  'Size',\n  'TotalPrice',\n  'SKU_STORE_MATCHING'\n];\n\nconst SOHSQLCol = [\n  'product_number',\n  'serialNumber',\n  'Retail_SOHStoreNumber',\n  'Retail_SOHDate',\n  'Retail_SOHSKU',\n  'Retail_SKU',\n  'Retail_SOHQTY',\n  'timestamp',\n  'UniqueID',\n  'Description',\n  'DepartmentID',\n  'Brand',\n  'Style',\n  'GTINOriginal',\n  'GTIN',\n  'SupplierName',\n  'SupplierItemNum',\n  'Color',\n  'Size',\n  'Season',\n  'Price',\n  'validated',\n  'TotalPrice',\n  'UPC',\n  'inventory_status',\n  'item_ref',\n  'location_id',\n  'SubdepartmentID',\n  'variant',\n  'Subcategory',\n  'artist',\n  'author',\n  'configuration',\n  'release_date',\n  'serial_number',\n  'active_sales_price',\n  'purchase_price',\n  'latest_cost_price',\n  'unit',\n  'purchase_unit',\n  'unit_conversion'\n];\n\nconst SOHCSVCol = [\n'date',\n'product_number',\n'barcode',\n'inventory_status',\n'item_ref',\n'warehouse',\n'location_id',\n'quantity',\n'average_cost_price',\n];\n\n\nconst SOHLOGSQLCol = [\n  'product_number',\n  'serialNumber',\n  'Retail_SOHStoreNumber',\n  'Retail_SOHDate',\n  'Retail_SOHSKU',\n  'Retail_SKU',\n  'Retail_SOHQTY',\n  'timestamp'\n];\n\nconst MasterSQLCol = [\n  'UniqueID',\n  'sku',\n  'description',\n  'DepartmentID',\n  'brand',\n  'style',\n  'SKU_original',\n  'GTINOriginal',\n  'GTIN',\n  'SupplierName',\n  'SupplierItemNum',\n  'color',\n  'size',\n  'season',\n  'price',\n  'TotalPrice',\n  'Product_Code',\n  'Consumption',\n  'ID',\n  'GroupCode',\n  'category',\n  'POSupplierNum',\n  'currency',\n  'country',\n  'company',\n  'SupplierNum',\n  'SubdepartmentID',\n  'variant',\n  'subcategory',\n  'artist',\n  'author',\n  'configuration',\n  'release_date',\n  'serial_number',\n  'active_sales_price',\n  'purchase_price',\n  'latest_cost_price',\n  'unit',\n  'purchase_unit',\n  'unit_conversion',\n  'vat'\n];\n\nconst MasterCSVCol = [\n  'product_number',\n  'item_number',\n  'variant',\n  'item_group',\n  'sku',\n  'description',\n  'barcode',\n  'serial_number',\n  'size',\n  'color',\n  'release_date',\n  'artist',\n  'author',\n  'style',\n  'configuration',\n  'brand',\n  'department',\n  'subdepartment',\n  'supplier',\n  'supplier_name',\n  'company',\n  'class',\n  'subclass',\n  'vsp',\n  'active_sales_price',\n  'external_item_number',\n  'purchase_price',\n  'latest_cost_price',\n  'vat',\n  'unit',\n  'purchase_unit',\n  'unit_conversion',\n  'Country', //not in CSV\n  'Currency', //not in CSV\n  ];\n\nflow.set('MasterSQLCol', MasterSQLCol);\nflow.set('MasterCSVCol', MasterCSVCol);\n\nflow.set('SOHSQLCol', SOHSQLCol);\nflow.set('SOHLOGSQLCol', SOHLOGSQLCol);\nflow.set('SOHMASTERFIELDS', SOHMASTERFIELDS);\nflow.set('SOHCSVCol', SOHCSVCol);\n\n\nvar flowEnv = {\n  SOHSQLCol: flow.get('SOHSQLCol'),\n  sqlSOHLog: flow.get('SOHLOGSQLCol')\n\n};\n\nmsg.payload = flowEnv;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dbe38cae3399d50e",
        "type": "inject",
        "z": "7d21f6a3794af32c",
        "name": "Inbounds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "7836e50e70578bc7"
            ]
        ]
    },
    {
        "id": "2e8e7429a7d95ae2",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 440,
        "wires": []
    },
    {
        "id": "a8a7448336942834",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "f9e52c69f5fa05bc",
        "type": "inject",
        "z": "7d21f6a3794af32c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Select * From UAE_Virgin_SOH;",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "c7801aadb05c4a03",
                "697ca1379a8ce88f"
            ]
        ]
    },
    {
        "id": "b85c7fe25a9840c0",
        "type": "sqlite",
        "z": "7d21f6a3794af32c",
        "mydb": "82664b308449f318",
        "sqlquery": "batch",
        "sql": "",
        "name": "Master",
        "x": 950,
        "y": 360,
        "wires": [
            [
                "c8da76813bbaa3ce"
            ]
        ]
    },
    {
        "id": "c7801aadb05c4a03",
        "type": "sqlite",
        "z": "7d21f6a3794af32c",
        "mydb": "7b8f6438.90b4fc",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 350,
        "y": 900,
        "wires": [
            [
                "697ca1379a8ce88f"
            ]
        ]
    },
    {
        "id": "4d2b3c7ad46d50d0",
        "type": "ftp in",
        "z": "7d21f6a3794af32c",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "list",
        "filename": "VirginRetail/ItemMaster/UAE_Virgin_ItemMaster_08082022_102735.csv",
        "localFilename": "D:\\Virgin-Item Master\\UAE_Virgin_ItemMaster_08082022_102735",
        "name": "",
        "x": 290,
        "y": 240,
        "wires": [
            [
                "d7f4412b6a24512e",
                "42e9b968be5c2823"
            ]
        ]
    },
    {
        "id": "d7468559157cb4df",
        "type": "ftp in",
        "z": "7d21f6a3794af32c",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "put",
        "filename": "htdocs/VirginRetail/ItemMaster/UAE_Virgin_ItemMaster_08082022_102735.csv",
        "localFilename": "D:/New folder/UAE_Virgin_ItemMaster_08082022_102735",
        "name": "",
        "x": 650,
        "y": 380,
        "wires": [
            [
                "cc7276b540b8f165"
            ]
        ]
    },
    {
        "id": "ff64b52bc426b94e",
        "type": "ftp in",
        "z": "7d21f6a3794af32c",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "put",
        "filename": "UAE_Virgin_ItemMaster_08082022_102735.csv",
        "localFilename": "D:/New folder/UAE_Virgin_ItemMaster_08082022_102735",
        "name": "",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "3c1de8f42f6e9cda"
            ]
        ]
    },
    {
        "id": "94e7801c5a5a32ca",
        "type": "splitter",
        "z": "7d21f6a3794af32c",
        "name": "",
        "property": "payload",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "ddde6605a55e7f83"
            ]
        ]
    },
    {
        "id": "e407b010fc522481",
        "type": "fs-ops-move",
        "z": "7d21f6a3794af32c",
        "name": "MoveToProccess",
        "sourcePath": "masterSource",
        "sourcePathType": "msg",
        "sourceFilename": "filenameItemMaster",
        "sourceFilenameType": "msg",
        "destPath": "masterToProcess",
        "destPathType": "msg",
        "destFilename": "master.csv",
        "destFilenameType": "str",
        "link": false,
        "x": 710,
        "y": 560,
        "wires": [
            [
                "beda5e08663e70f2"
            ]
        ]
    },
    {
        "id": "a91283935cbdd00d",
        "type": "fs-ops-move",
        "z": "7d21f6a3794af32c",
        "name": "MoveToProcessed",
        "sourcePath": "masterToProcess",
        "sourcePathType": "msg",
        "sourceFilename": "master.csv",
        "sourceFilenameType": "str",
        "destPath": "masterProcessed",
        "destPathType": "msg",
        "destFilename": "filenameItemMaster",
        "destFilenameType": "msg",
        "link": false,
        "x": 970,
        "y": 480,
        "wires": [
            [
                "ebdab08a6bd0c7f6"
            ]
        ]
    },
    {
        "id": "2000d42c25e77517",
        "type": "fs-ops-dir",
        "z": "7d21f6a3794af32c",
        "name": "",
        "path": "masterSource",
        "pathType": "msg",
        "filter": "*.csv",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "8f6c60101151593f"
            ]
        ]
    },
    {
        "id": "04b0fe21ed5ad9c0",
        "type": "debug",
        "z": "7d21f6a3794af32c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c3dc0e3d79891e77",
        "type": "inject",
        "z": "7d21f6a3794af32c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Select * From UAE_Virgin_SOH;",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1060,
        "wires": [
            [
                "2e5cede2a141eb46",
                "04b0fe21ed5ad9c0"
            ]
        ]
    },
    {
        "id": "2e5cede2a141eb46",
        "type": "sqlite",
        "z": "7d21f6a3794af32c",
        "mydb": "7b8f6438.90b4fc",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 350,
        "y": 1060,
        "wires": [
            [
                "04b0fe21ed5ad9c0"
            ]
        ]
    },
    {
        "id": "384fc25fb5aac458",
        "type": "inject",
        "z": "d855af0dc63d7647",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "filename",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "7cc90d2c25de42e4"
            ]
        ]
    },
    {
        "id": "c6107e067100a06d",
        "type": "function",
        "z": "d855af0dc63d7647",
        "name": "",
        "func": "let files = msg.payload;\nlet fileNames = [];\nlet qty = 0;\n \nfiles.forEach((file, i) => {\n   // node.warn(\"FTP Master Files sliced: \" + file.name)\n    if (file.name.slice(0, 12) === 'VirginRetail') {\n        fileNames.push(file.name);\n        //node.warn(\"hey\"+ files) \n        qty++;\n        \n         \n// // fileNames.forEach((file, i) => {\n// //     //node.warn(\"FTP Master Files sliced: \" + file.name)\n// //     if (file.name.slice(0, 10) === 'ItemMaster') {\n// //         fileNames.push(file.name);\n// //         //node.warn(\"hey\"+ files) \n// //         qty++;\n// //     }\n        \n// });\n    }\n        \n});\nnode.warn(\"FTP Master Files Processed: \" + qty)\nmsg.payload = fileNames;\nmsg.qty = qty;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "fb5f331fbf45f5f1"
            ]
        ]
    },
    {
        "id": "fb5f331fbf45f5f1",
        "type": "switch",
        "z": "d855af0dc63d7647",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "60e6994b253f45bd"
            ],
            [
                "443f1942758be2c3",
                "eee712d318743015"
            ]
        ]
    },
    {
        "id": "443f1942758be2c3",
        "type": "debug",
        "z": "d855af0dc63d7647",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "{\t   \"FTP Master Info\": {\t       \"Message\":\"FTP Master Files Found\",\t       \"time\":$now(),\t       \"Files\": qty\t    }\t    \t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 260,
        "wires": []
    },
    {
        "id": "60e6994b253f45bd",
        "type": "debug",
        "z": "d855af0dc63d7647",
        "name": "Directory Empty",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "{\t    \"result\": \"No new master files on ftp server!\"\t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "107244a3f107b26e",
        "type": "function",
        "z": "d855af0dc63d7647",
        "name": "Path to move",
        "func": "msg.sourceFile = msg.filename;\nmsg.detinationFile =  global.get('ftpItemMaster');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "19d3098ac433813b"
            ]
        ]
    },
    {
        "id": "41b3cff56d1ee7de",
        "type": "inject",
        "z": "d855af0dc63d7647",
        "name": "Initialize",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "fbfad4b5ca6d07e5"
            ]
        ]
    },
    {
        "id": "fbfad4b5ca6d07e5",
        "type": "function",
        "z": "d855af0dc63d7647",
        "name": "FTP PATHS",
        "func": "\nvar masterSource = \"/data/VirginRetail/ItemMaster/\";\nvar masterToProcess = \"/data/master/toProcess/\"\nvar masterProcessed = \"/data/VirginRetail/ItemMaster/Processed/\"\n\nvar ftpItemMaster  = \"/VirginRetail/ItemMaster/Processed/\";\nvar ftpSOH  = \"/Virgin-RFID/VirginRetail/SOH/\";\n\nvar sohSource = \"/data/soh/\";\nvar sohToProcess = \"/data/soh/toProcess/\"\nvar sohProcessed = \"/data/soh/processed/\"\n\nglobal.set(\"sohSource\", sohSource);\nglobal.set(\"sohToProcess\", sohToProcess);\nglobal.set(\"sohProcessed\", sohProcessed);\n\nglobal.set(\"masterSource\", masterSource);\nglobal.set(\"masterToProcess\", masterToProcess);\nglobal.set(\"masterProcessed\", masterProcessed);\n\nglobal.set(\"ftpItemMaster\", ftpItemMaster);\nglobal.set(\"ftpSOH\", ftpSOH);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1b49e3b628270147",
        "type": "function",
        "z": "d855af0dc63d7647",
        "name": "Filename",
        "func": "msg.localFilename = \"D:/New folder/new.txt\" + msg.payload;\nmsg.filename =  global.get('ftpItemMaster') + msg.payload;\nmsg.file = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "4e319ded0a464fc7"
            ]
        ]
    },
    {
        "id": "19d3098ac433813b",
        "type": "debug",
        "z": "d855af0dc63d7647",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 340,
        "wires": []
    },
    {
        "id": "7827ad5de147f12e",
        "type": "debug",
        "z": "d855af0dc63d7647",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "ce35ebd1bdc29c85",
        "type": "inject",
        "z": "d855af0dc63d7647",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "filename",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "e529de7320d9ce77"
            ]
        ]
    },
    {
        "id": "aac3c7978f9fd07f",
        "type": "debug",
        "z": "d855af0dc63d7647",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 500,
        "wires": []
    },
    {
        "id": "de65e4f248df3eeb",
        "type": "debug",
        "z": "d855af0dc63d7647",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 420,
        "wires": []
    },
    {
        "id": "d6e7963b2893bdad",
        "type": "function",
        "z": "d855af0dc63d7647",
        "name": "",
        "func": "let files = msg.payload;\nlet fileNames = [];\nlet qty = 0;\n \nfiles.forEach((file, i) => {\n  // node.warn(\"FTP Master Files sliced: \" + file.name)\n    if (file.name.slice(0, 3) === 'new') {\n        fileNames.push(file.name);\n        //node.warn(\"hey\"+ files) \n        qty++;\n    }\n        \n});\nnode.warn(\"FTP Master Files Processed: \" + qty)\nmsg.payload = fileNames;\nmsg.qty = qty;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 480,
        "wires": [
            [
                "aac3c7978f9fd07f"
            ]
        ]
    },
    {
        "id": "a4a9d4a7b788d925",
        "type": "file in",
        "z": "d855af0dc63d7647",
        "name": "Read file",
        "filename": "C:/Users/Nadeem Ch/new.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 740,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "b289a579bffe45c3",
        "type": "inject",
        "z": "d855af0dc63d7647",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "filename",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 620,
        "wires": [
            [
                "29458bfe8d7e1e1a"
            ]
        ]
    },
    {
        "id": "d31930e2e4e54a3c",
        "type": "debug",
        "z": "d855af0dc63d7647",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 620,
        "wires": []
    },
    {
        "id": "38d84dcbc1130437",
        "type": "function",
        "z": "d855af0dc63d7647",
        "name": "Path to move",
        "func": "msg.sourceFile = msg.filename;\nmsg.detinationFile =  global.get('ftpItemMaster');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 442.0115661621094,
        "y": 557.8055419921875,
        "wires": [
            [
                "d31930e2e4e54a3c"
            ]
        ]
    },
    {
        "id": "4e319ded0a464fc7",
        "type": "ftp in",
        "z": "d855af0dc63d7647",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "get",
        "filename": "/VirginRetail/ItemMaster/new.txt",
        "localFilename": "D:\\New folder\\new.txt",
        "name": "",
        "x": 250,
        "y": 360,
        "wires": [
            [
                "107244a3f107b26e"
            ]
        ]
    },
    {
        "id": "7cc90d2c25de42e4",
        "type": "ftp in",
        "z": "d855af0dc63d7647",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "list",
        "filename": "/VirginRetail/ItemMaster/new.txt",
        "localFilename": "D:/New folder/new.txt",
        "name": "",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "7827ad5de147f12e",
                "c6107e067100a06d"
            ]
        ]
    },
    {
        "id": "e529de7320d9ce77",
        "type": "ftp in",
        "z": "d855af0dc63d7647",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "get",
        "filename": "/VirginRetail/ItemMaster/new.txt",
        "localFilename": "D:/New folder/new.txt",
        "name": "Get File",
        "x": 340,
        "y": 480,
        "wires": [
            [
                "de65e4f248df3eeb",
                "d6e7963b2893bdad"
            ]
        ]
    },
    {
        "id": "29458bfe8d7e1e1a",
        "type": "ftp in",
        "z": "d855af0dc63d7647",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "get",
        "filename": "/VirginRetail/ItemMaster/new.txt",
        "localFilename": "D:/New folder/new.txt",
        "name": "Get File",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "b41a60c30d7ea899"
            ]
        ]
    },
    {
        "id": "b41a60c30d7ea899",
        "type": "ftp in",
        "z": "d855af0dc63d7647",
        "ftp": "cfeb4b10ffd68bfd",
        "operation": "put",
        "filename": "/VirginRetail/ItemMaster/new.txt",
        "localFilename": "D:/New folder/new.txt",
        "name": "Put File",
        "x": 520,
        "y": 620,
        "wires": [
            [
                "38d84dcbc1130437"
            ]
        ]
    },
    {
        "id": "eee712d318743015",
        "type": "splitter",
        "z": "d855af0dc63d7647",
        "name": "",
        "property": "payload",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "1b49e3b628270147"
            ]
        ]
    },
    {
        "id": "bfbc98396a47581a",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/ASN",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "76469e076f59e0d1"
            ]
        ]
    },
    {
        "id": "2fe41199aed97f1d",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 240,
        "wires": []
    },
    {
        "id": "84eb23780305ab64",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Receiving",
        "info": "",
        "x": 160,
        "y": 180,
        "wires": []
    },
    {
        "id": "76469e076f59e0d1",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"SELECT ASN_HEADER_RECEIPT.RECEIPTKEY, ASN_DETAILS_RECEIPTDETAIL.SKU FROM ASN_HEADER_RECEIPT INNER JOIN ASN_DETAILS_RECEIPTDETAIL ON ASN_HEADER_RECEIPT.RECEIPTKEY=ASN_DETAILS_RECEIPTDETAIL.RECEIPTKEY\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "7db5a365a3ed847a"
            ]
        ]
    },
    {
        "id": "b89b0b5a8340bdea",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/Recomended-Location",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "b30903396996d47c"
            ]
        ]
    },
    {
        "id": "b30903396996d47c",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"Select recommendedLocation From ASN_4232344\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "555bccdcbda8b3d7"
            ]
        ]
    },
    {
        "id": "a506691d8adff5ca",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 440,
        "wires": []
    },
    {
        "id": "68776a76ab014c67",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/UPDATE/LPN/QTY",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "24febddf2d15b21e"
            ]
        ]
    },
    {
        "id": "24febddf2d15b21e",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"insert into ASN_4232344(LPN, )Values('3')\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "3be0a2c543957e74"
            ]
        ]
    },
    {
        "id": "431c727d32020412",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "288ff2a2b4b28802",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Put-Away",
        "info": "",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "6c9f847ad25cb61c",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/UPDATE/Bin-Location",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 520,
        "wires": [
            [
                "5e3d1909a390b59a"
            ]
        ]
    },
    {
        "id": "5e3d1909a390b59a",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"UPDATE ASN_4232344 SET Bin-location = '1000' WHERE LPN='1'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 520,
        "wires": [
            [
                "86f957c8c3ba7a9f"
            ]
        ]
    },
    {
        "id": "6fa2a50b11d057e7",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 520,
        "wires": []
    },
    {
        "id": "6c324b3d1ee83226",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Replenishment",
        "info": "",
        "x": 180,
        "y": 600,
        "wires": []
    },
    {
        "id": "722a5e3406ee8492",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/POST/BinLocation",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 680,
        "wires": [
            [
                "aa56aaae4e1a2480"
            ]
        ]
    },
    {
        "id": "aa56aaae4e1a2480",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"UPDATE ASN_4232344 SET Bin_location = 'shalf12' WHERE LPN='1'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "eef5a7f88216318f"
            ]
        ]
    },
    {
        "id": "ab6cf3cba1a7ee22",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 680,
        "wires": []
    },
    {
        "id": "e2a34612411714eb",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/po",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "55b6c10e148002d5"
            ]
        ]
    },
    {
        "id": "702bd206ee3b64b1",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"UPDATE ASN_4232344 SET DROP_ID = 'counter1' WHERE LPN='1'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 900,
        "wires": [
            [
                "53caeb2e1e889449"
            ]
        ]
    },
    {
        "id": "e5c852ba3fcc5d54",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 900,
        "wires": []
    },
    {
        "id": "55b6c10e148002d5",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"Select PO From ASN_4232344\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 820,
        "wires": [
            [
                "a6c9229a66ee336a"
            ]
        ]
    },
    {
        "id": "e6f349397445d4c0",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 820,
        "wires": []
    },
    {
        "id": "b445163232445091",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 980,
        "wires": []
    },
    {
        "id": "9e4c4176f8c54e94",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Picking",
        "info": "",
        "x": 150,
        "y": 760,
        "wires": []
    },
    {
        "id": "de39f61cbb98d208",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/UPDATE/DROP-ID",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 900,
        "wires": [
            [
                "702bd206ee3b64b1"
            ]
        ]
    },
    {
        "id": "d2d82b8882113d38",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "name": "",
        "url": "/UPDATE/QTY",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 980,
        "wires": [
            [
                "6d4a5a84568201b4"
            ]
        ]
    },
    {
        "id": "6d4a5a84568201b4",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "msg.topic=\"UPDATE ASN_4232344 SET qty = '2000' WHERE LPN='1'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 980,
        "wires": [
            [
                "6ab403ad2b96cb74"
            ]
        ]
    },
    {
        "id": "8f4196750b6c60e0",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 380,
        "wires": []
    },
    {
        "id": "7569883fc35440f0",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 760,
        "wires": []
    },
    {
        "id": "0b4e579503015b40",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "url": "/get/asn",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1320,
        "wires": [
            [
                "4f1d24a385ce3e3a"
            ]
        ]
    },
    {
        "id": "4f1d24a385ce3e3a",
        "type": "function",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "func": "msg.topic=\"Select RECEIPTDATE, RECEIPTKEY, SUPPLIERNAME From ASN_HEADER_RECEIPT;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1320,
        "wires": [
            [
                "c9017f3a6e558020"
            ]
        ]
    },
    {
        "id": "fc32808d2cb5d856",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1427cede2fa5b207",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "3ac4639983741241",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "url": "/get/sku/detail",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1580,
        "wires": [
            [
                "46044e7e3b2c6a0c"
            ]
        ]
    },
    {
        "id": "46044e7e3b2c6a0c",
        "type": "function",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "func": "msg.topic=\"Select * From ASN_DETAILS_RECEIPTDETAIL where RECEIPTKEY = '0000103670';\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1580,
        "wires": [
            [
                "4ea23f116fb51700"
            ]
        ]
    },
    {
        "id": "2ac45b83770bbc79",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 1520,
        "wires": []
    },
    {
        "id": "f0c23ae68d6c4332",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1580,
        "wires": []
    },
    {
        "id": "1e8ae45be4f783eb",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "url": "/get/asn/sku",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1460,
        "wires": [
            [
                "a4a930b62b262ebe"
            ]
        ]
    },
    {
        "id": "a4a930b62b262ebe",
        "type": "function",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "func": "msg.topic=\"Select ALTSKU, UOM, QTYEXPECTED, QTYRECEIVED From ASN_DETAILS_RECEIPTDETAIL where SKU = '0000162006'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1460,
        "wires": [
            [
                "8e2c7ee9b046b604"
            ]
        ]
    },
    {
        "id": "10cf5961110e245f",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1460,
        "wires": []
    },
    {
        "id": "35c1fb22ee028c0e",
        "type": "http in",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "url": "/post/lpn",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1700,
        "wires": [
            [
                "1cc40ed2baca81a4"
            ]
        ]
    },
    {
        "id": "1cc40ed2baca81a4",
        "type": "function",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "func": "msg.topic=\"insert into PICKING_DETAILS_PICKDETAIL(LOC, REFID )Values('PICKTO', '12')\"\n\"insert into ASN_DETAILS_RECEIPTDETAIL(LOTTABLE05, LOTTABLE03 )Values('01/Sep/2026 11:00:00 AM', '5673')\"\n\"insert into ITEM_MASTER_DETAILS(DESCR)Values('burnshield burn dressing')\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1700,
        "wires": [
            [
                "03429ba70b060b85"
            ]
        ]
    },
    {
        "id": "c751d2264255f517",
        "type": "http response",
        "z": "f7d9e8689641f632",
        "d": true,
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1700,
        "wires": []
    },
    {
        "id": "7db5a365a3ed847a",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 240,
        "wires": [
            [
                "2fe41199aed97f1d",
                "8f4196750b6c60e0"
            ]
        ]
    },
    {
        "id": "555bccdcbda8b3d7",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 440,
        "wires": [
            [
                "a506691d8adff5ca",
                "8f4196750b6c60e0"
            ]
        ]
    },
    {
        "id": "3be0a2c543957e74",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 300,
        "wires": [
            [
                "431c727d32020412",
                "8f4196750b6c60e0"
            ]
        ]
    },
    {
        "id": "86f957c8c3ba7a9f",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 520,
        "wires": [
            [
                "6fa2a50b11d057e7",
                "8f4196750b6c60e0"
            ]
        ]
    },
    {
        "id": "eef5a7f88216318f",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 680,
        "wires": [
            [
                "ab6cf3cba1a7ee22",
                "7569883fc35440f0"
            ]
        ]
    },
    {
        "id": "53caeb2e1e889449",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 900,
        "wires": [
            [
                "e5c852ba3fcc5d54",
                "7569883fc35440f0"
            ]
        ]
    },
    {
        "id": "a6c9229a66ee336a",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 820,
        "wires": [
            [
                "e6f349397445d4c0",
                "7569883fc35440f0"
            ]
        ]
    },
    {
        "id": "6ab403ad2b96cb74",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 610,
        "y": 980,
        "wires": [
            [
                "b445163232445091",
                "7569883fc35440f0"
            ]
        ]
    },
    {
        "id": "c9017f3a6e558020",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 590,
        "y": 1320,
        "wires": [
            [
                "fc32808d2cb5d856",
                "1427cede2fa5b207"
            ]
        ]
    },
    {
        "id": "4ea23f116fb51700",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 590,
        "y": 1580,
        "wires": [
            [
                "2ac45b83770bbc79",
                "f0c23ae68d6c4332"
            ]
        ]
    },
    {
        "id": "8e2c7ee9b046b604",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 590,
        "y": 1460,
        "wires": [
            [
                "10cf5961110e245f",
                "f0c23ae68d6c4332"
            ]
        ]
    },
    {
        "id": "03429ba70b060b85",
        "type": "sqlite",
        "z": "f7d9e8689641f632",
        "d": true,
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 590,
        "y": 1700,
        "wires": [
            [
                "c751d2264255f517",
                "f0c23ae68d6c4332"
            ]
        ]
    },
    {
        "id": "42a721f0aba9bbf8",
        "type": "mongodb-node",
        "z": "f7d9e8689641f632",
        "mongodb": "92ae78283fc2fda1",
        "name": "MongoDB",
        "collection": "AD_Port",
        "operation": "insert",
        "upsert": false,
        "multi": false,
        "x": 560,
        "y": 1860,
        "wires": [
            [
                "08e95244e0cbd9f8"
            ]
        ]
    },
    {
        "id": "9f5cb139930a5a4e",
        "type": "inject",
        "z": "f7d9e8689641f632",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "operationType === 'insert'",
        "payloadType": "str",
        "x": 130,
        "y": 1860,
        "wires": [
            [
                "a28572ab3156e62a"
            ]
        ]
    },
    {
        "id": "08e95244e0cbd9f8",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1860,
        "wires": []
    },
    {
        "id": "a28572ab3156e62a",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "var data = msg.payload;\nvar operationType = data;\nif (operationType === 'insert') {\n  var msgData = {};\n  msgData.collection = 'AD_Port'; // Corrected the typo 'colection' to 'collection'\n  msgData.payload = { 'name': 'Nadeem', 'age': '23' }; // Corrected the data assignment and object structure\n\n  var alertMessage = 'New record inserted:\\n' + JSON.stringify(msgData.payload);\n\n  // You can customize this part to send alerts via other means, e.g., email, push notification, or any other mechanism.\n  // For demonstration, we're just logging the alert.\n  node.warn(alertMessage);\n\n  return msgData;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1860,
        "wires": [
            [
                "42a721f0aba9bbf8",
                "4043f1e94d621d06"
            ]
        ]
    },
    {
        "id": "5106dab008af45cf",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Crud Operation",
        "info": "",
        "x": 120,
        "y": 1780,
        "wires": []
    },
    {
        "id": "01de3d5fb3a8ba86",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Insert",
        "info": "",
        "x": 550,
        "y": 1820,
        "wires": []
    },
    {
        "id": "4198b3c30cc1485f",
        "type": "mongodb-node",
        "z": "f7d9e8689641f632",
        "mongodb": "92ae78283fc2fda1",
        "name": "MongoDB",
        "collection": "AD_Port",
        "operation": "find",
        "upsert": false,
        "multi": false,
        "x": 580,
        "y": 2240,
        "wires": [
            [
                "fa216bdf378f3a04"
            ]
        ]
    },
    {
        "id": "412c25126e21422d",
        "type": "inject",
        "z": "f7d9e8689641f632",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2260,
        "wires": [
            [
                "6c9306c9c09e7f3e"
            ]
        ]
    },
    {
        "id": "fa216bdf378f3a04",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2260,
        "wires": []
    },
    {
        "id": "6c9306c9c09e7f3e",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "let msgData = {};\nmsgData.colection = 'AD_Port';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2260,
        "wires": [
            [
                "4198b3c30cc1485f"
            ]
        ]
    },
    {
        "id": "87c8ab721a840eec",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Read",
        "info": "",
        "x": 550,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0c09a4d990d90431",
        "type": "mongodb-node",
        "z": "f7d9e8689641f632",
        "mongodb": "92ae78283fc2fda1",
        "name": "MongoDB",
        "collection": "AD_Port",
        "operation": "update",
        "upsert": false,
        "multi": false,
        "x": 560,
        "y": 2360,
        "wires": [
            [
                "9500d28b807d198a"
            ]
        ]
    },
    {
        "id": "f86bddd5eecde958",
        "type": "inject",
        "z": "f7d9e8689641f632",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2360,
        "wires": [
            [
                "8a53da8f684dcb97"
            ]
        ]
    },
    {
        "id": "9500d28b807d198a",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2360,
        "wires": []
    },
    {
        "id": "8a53da8f684dcb97",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "let msgData = {};\nmsgData.colection = 'AD_Port';\nmsgData.query = {\"_id\": \"\"};\nmsgData.payload = {'$set' :{ 'name': 'Nadeem', 'age': '25' }};\nreturn msgData;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2360,
        "wires": [
            [
                "0c09a4d990d90431"
            ]
        ]
    },
    {
        "id": "ad7ee5c21e27e2d3",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Update",
        "info": "",
        "x": 550,
        "y": 2320,
        "wires": []
    },
    {
        "id": "45608de6836aaa98",
        "type": "mongodb-node",
        "z": "f7d9e8689641f632",
        "mongodb": "92ae78283fc2fda1",
        "name": "MongoDB",
        "collection": "AD_Port",
        "operation": "delete",
        "upsert": false,
        "multi": false,
        "x": 560,
        "y": 2460,
        "wires": [
            [
                "cc01dfcffa7118c7"
            ]
        ]
    },
    {
        "id": "5b5fa3082a8e859c",
        "type": "inject",
        "z": "f7d9e8689641f632",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2460,
        "wires": [
            [
                "300a7dfcd5029f10"
            ]
        ]
    },
    {
        "id": "cc01dfcffa7118c7",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 2460,
        "wires": []
    },
    {
        "id": "300a7dfcd5029f10",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "let msgData = {};\nmsgData.colection = 'AD_Port';\nreturn msgData;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2460,
        "wires": [
            [
                "45608de6836aaa98"
            ]
        ]
    },
    {
        "id": "5193a1fe87831663",
        "type": "comment",
        "z": "f7d9e8689641f632",
        "name": "Delete",
        "info": "",
        "x": 550,
        "y": 2420,
        "wires": []
    },
    {
        "id": "b385b10b6319370f",
        "type": "function",
        "z": "f7d9e8689641f632",
        "name": "",
        "func": "let msgData = {};\nmsgData.colection = 'AD_Port';\nmsg.payload = {'name':'Nadeem', 'age':'23'};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 342.33331298828125,
        "y": 1812.666748046875,
        "wires": [
            []
        ]
    },
    {
        "id": "1821a0d73da14124",
        "type": "ui_button",
        "z": "f7d9e8689641f632",
        "name": "",
        "group": "92a9cd27.99b9d",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "insert",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 2000,
        "wires": [
            [
                "d2f1610f4166d399",
                "176c6efee0e3c86c",
                "9da04cd89e327bc8",
                "a28572ab3156e62a"
            ]
        ]
    },
    {
        "id": "d2f1610f4166d399",
        "type": "debug",
        "z": "f7d9e8689641f632",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 2000,
        "wires": []
    },
    {
        "id": "176c6efee0e3c86c",
        "type": "ui_audio",
        "z": "f7d9e8689641f632",
        "name": "",
        "group": "92a9cd27.99b9d",
        "voice": "",
        "always": "",
        "x": 780,
        "y": 1920,
        "wires": []
    },
    {
        "id": "9da04cd89e327bc8",
        "type": "ui_text",
        "z": "f7d9e8689641f632",
        "group": "92a9cd27.99b9d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 770,
        "y": 1960,
        "wires": []
    },
    {
        "id": "4043f1e94d621d06",
        "type": "ui_toast",
        "z": "f7d9e8689641f632",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 810,
        "y": 2040,
        "wires": []
    },
    {
        "id": "375f5ee3a86614c5",
        "type": "inject",
        "z": "3ab8323c0235e4e7",
        "name": "Item SOH",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "/VirginRetail/ItemMaster/UAE_Virgin_SOH",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "478a7a6b502987da"
            ]
        ]
    },
    {
        "id": "1fe47e68d270424a",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 100,
        "wires": []
    },
    {
        "id": "331ae31847299fdb",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Read FTP new files",
        "func": "let files = msg.payload;\nlet fileNames = [];\nlet qty = 0;\nfiles.forEach((file, i) => {\n    if (file.name.slice(0, 14) === 'UAE_Virgin_SOH') {\n        fileNames.push(file.name);\n        qty++;\n    }\n});\nnode.warn(\"FTP SOH Files Processed: \" + qty)\nmsg.payload = fileNames;\nmsg.qty = qty;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "c8127434e1ca6e3a"
            ]
        ]
    },
    {
        "id": "c8127434e1ca6e3a",
        "type": "switch",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "d5495f1a140c9410"
            ],
            [
                "9d25fb06d23f64e0",
                "ddf49411b5cec374"
            ]
        ]
    },
    {
        "id": "d5495f1a140c9410",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "Directory Empty",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "{\t    \"result\": \"No new SOH files on ftp server!\",\t    \"SOHFiles\": qty\t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 60,
        "wires": []
    },
    {
        "id": "9d25fb06d23f64e0",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "{\t   \"FTP SOH Info\": {\t       \"Message\":\"FTP SOH Files Found\",\t       \"time\":$now(),\t       \"Files\": qty\t    }\t    \t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 160,
        "wires": []
    },
    {
        "id": "99c02b449020ca4f",
        "type": "delay",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 240,
        "wires": [
            [
                "3fd559122116e4c8"
            ]
        ]
    },
    {
        "id": "3fd559122116e4c8",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Filename",
        "func": "msg.source = global.get('sohSource');\nmsg.sohToProcess = global.get('sohToProcess');\nmsg.sohProcessed = global.get('sohProcessed');\n\nmsg.localFilename = \"/data/soh/\" + msg.payload;\n\n//path sftp Move Origin / Destination\nmsg.remoteFilePath = global.get('ftpSOH') + msg.payload;\nmsg.remoteDestPath =  global.get('ftpSOH')\n                      + \"Processed/\" + msg.payload;\n\nmsg.payload = msg.remoteFilePath; \nmsg.filename = msg.localFilename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "a40689bea18590eb"
            ]
        ]
    },
    {
        "id": "c7c323b8e1f09715",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Categorize",
        "func": "var files = msg.files;\nvar filename;\nmsg.emptyMaster = false;\nfor(i=0;i<files.length;i++){\n    filename = files[i];\n    if(filename.match(/Virgin_SOH_.*/)){\n        msg.filenameSOH=filename;\n        return msg;\n    }\n\n}\nmsg.emptyMaster = true;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "473c9ef86c61d6c8"
            ]
        ]
    },
    {
        "id": "473c9ef86c61d6c8",
        "type": "switch",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "property": "emptyMaster",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 540,
        "wires": [
            [
                "db24495071c40864"
            ],
            [
                "46715eb7cb67c396"
            ]
        ]
    },
    {
        "id": "db24495071c40864",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Filename SOH",
        "func": "msg.filename = msg.source+msg.filenameSOH;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "fe191f01633c9cbc"
            ]
        ]
    },
    {
        "id": "46715eb7cb67c396",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "Directory Empty",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "{\t    \"result\": \"SOH Directory Empty!\"\t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 600,
        "wires": []
    },
    {
        "id": "300f48cfaba79791",
        "type": "file in",
        "z": "3ab8323c0235e4e7",
        "name": "SOHFile",
        "filename": "/data/soh/toProcess/soh.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 920,
        "y": 600,
        "wires": [
            [
                "14a42e45137799ed"
            ]
        ]
    },
    {
        "id": "14a42e45137799ed",
        "type": "csv",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "sep": ";",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 910,
        "y": 540,
        "wires": [
            [
                "c1dd585584a0560c",
                "f6c33cef9c78d065",
                "3d0b2f3f4577bd64"
            ]
        ]
    },
    {
        "id": "f6c33cef9c78d065",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Init-sub",
        "func": "let results = msg.payload;\nconst csvColumns = flow.get(\"SOHCSVCol\");\nvar currentTime = new Date().getTime();\nvar currentDate = new Date();\nvar day = currentDate.getDate().toString();\nvar month = (currentDate.getMonth() + 1).toString();\nvar year = currentDate.getFullYear().toString();\nvar toUpdate = [];\nvar failed = [];\nvar barcodesTest = [];\nvar c = 0;\nvar Retail_SOHDate =\n  day.padStart(2, \"0\") +\n  \"/\" +\n  month.padStart(2, \"0\") +\n  \"/\" +\n  year.padStart(2, \"0\");\nnode.warn(results);\nresults.forEach((product, i) => {\n  if (product === null) {\n    node.warn(\"position: \" + i);\n    failed.push(product);\n  } else {\n    var Retail_SOHStoreNumber = product[\"warehouse\"];\n    //Here we will define the stores to process\n    if (Retail_SOHStoreNumber === 405 || Retail_SOHStoreNumber === 490) {\n      var Retail_SOHQTY = product[\"quantity\"];\n      if (Retail_SOHQTY > 0) {\n        var stor = Retail_SOHStoreNumber.toString().padStart(7, \"0\");\n        var barcodes = product[\"barcode\"].split(\";\");\n        barcodes.forEach((barcode, index) => {\n            c++;\n          barcodesTest.push(barcode);\n          var ID = product[\"product_number\"] + \"_\" + barcode;\n          Retail_SOHQTY = parseInt(product[\"quantity\"]);\n          var serial = stor + \"_\" + ID;\n          var itemToUpdate = {\n            thingTypeCode: \"SOHSTREAM\",\n            serialNumber: serial,\n            timestamp: currentTime,\n            Retail_SOHDate: Retail_SOHDate,\n            item_ref: product[\"item_ref\"],\n            Retail_SOHStoreNumber: Retail_SOHStoreNumber,\n            product_number: ID,\n            Retail_SOHQTY: Retail_SOHQTY,\n            found: 0,\n            source: \"FTPBRIDGESOH\",\n          };\n          toUpdate.push(itemToUpdate);\n        });\n      }\n    }\n  }\n});\n\nvar counterg = Math.ceil(toUpdate.length / 1000);\nvar counterg2 = Math.ceil(toUpdate.length / 50);\nglobal.set(\"counter\", counterg);\nglobal.set(\"counter2\", counterg2);\nglobal.set(\"toprocess\", toUpdate.length);\nglobal.set(\"tmp\", 0);\nnode.warn(barcodesTest);\n\n//node.warn(\"counter divided by 1000: \" + counterg);\n//node.warn(\"counter divided by 50: \" + counterg2);\n\nmsg.payload = toUpdate;\nmsg.FailedToUpdate = failed;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 440,
        "wires": [
            [
                "7c31df125ecaf771",
                "56ca2c97d47d4638"
            ]
        ]
    },
    {
        "id": "b275a8f3df610fbd",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "FTP Processed",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "{\t    \"result\": \"SOH files in FTP moved to processsed!\"\t}",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 620,
        "wires": []
    },
    {
        "id": "7c31df125ecaf771",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Chunk Payload",
        "func": "var totalMsgs = msg.payload;\n\nvar chunkPayload = [], chunkPayload2 = [];\nvar i,j,k,l,temparray,temparray2,chunk = 1000,chunk2 = 50;\n\nfor (i=0,j=totalMsgs.length; i<j; i+=chunk) {\n    temparray = totalMsgs.slice(i,i+chunk);\n    chunkPayload.push({payload:temparray});\n}\n\nfor (k=0,l=totalMsgs.length; k<l; k+=chunk2) {\n    temparray2 = totalMsgs.slice(k,k+chunk2);\n    chunkPayload2.push({payload:temparray2});\n}\n\nreturn [chunkPayload2,chunkPayload];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 440,
        "wires": [
            [],
            [
                "5ece08c736d7fb82",
                "91ec5143721f84cb"
            ]
        ]
    },
    {
        "id": "56ca2c97d47d4638",
        "type": "switch",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "property": "FailedToUpdate",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1170,
        "y": 400,
        "wires": [
            [
                "6da5f5d26340a6ee"
            ]
        ]
    },
    {
        "id": "5ece08c736d7fb82",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1590,
        "y": 420,
        "wires": []
    },
    {
        "id": "91ec5143721f84cb",
        "type": "delay",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1400,
        "y": 500,
        "wires": [
            [
                "073724e277197767"
            ]
        ]
    },
    {
        "id": "6da5f5d26340a6ee",
        "type": "change",
        "z": "3ab8323c0235e4e7",
        "name": "Failed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "FailedToUpdate",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 360,
        "wires": [
            [
                "eec17668b9c9b818"
            ]
        ]
    },
    {
        "id": "073724e277197767",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Matching SERIAL with ID",
        "func": "//Parse only skus\nvar items = msg.payload;\nvar header = '';\nconst obj = {};\n\nfor(i=0;i<items.length;i++){\n    header = items[i].serialNumber;\n    obj[header] = items[i];\n}\nnode.warn(\"Items in SOH = \"+items.length); \nmsg.items_toCopy = obj;\nmsg.items_toCopyOriginal = msg.payload;\nmsg.store = items[0].Retail_SOHStoreNumber;\n\nvar store_sNumber = msg.payload.map(item => item.serialNumber);\n//node.warn(store_sNumber);\nvar pNumberStrg = \"\";\nstore_sNumber.forEach((serialNumber, index) => {\n    serialNumber = serialNumber.slice(8);\n    pNumberStrg += `'${serialNumber}',`;\n});\npNumberStrg = pNumberStrg.slice(0,-1);\n//node.warn(pNumberStrg);\n// prepare query to get all Assets for each item.\nmsg.topic = \"SELECT * FROM master WHERE ID in (\"+pNumberStrg+\")\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 560,
        "wires": [
            [
                "4cf3d16f072ea8fc"
            ]
        ]
    },
    {
        "id": "eec17668b9c9b818",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/flows/logs/SOH/'+ shortDate + '/inbound/failed_to_update_' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "f20bdad2ff179717"
            ]
        ]
    },
    {
        "id": "f20bdad2ff179717",
        "type": "file",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 1380,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e544c405669c8ad3",
        "type": "inject",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "commit;",
        "payloadType": "date",
        "x": 1650,
        "y": 960,
        "wires": [
            [
                "136c15cd4ee69b51",
                "f230cbbd800c1bea",
                "4cf3d16f072ea8fc"
            ]
        ]
    },
    {
        "id": "85fcd86ed25e64af",
        "type": "function",
        "z": "3ab8323c0235e4e7",
        "name": "Copy Metadata",
        "func": "var results = msg.payload;\nvar items_toCopy = msg.items_toCopy;\nvar items_toCopyOriginal = msg.items_toCopyOriginal;\nvar sqlvalues = \"\", toLog = [], obj = [], sqlvaluesToLog = \"\";\nvar serialNumber, Retail_SOHDate, Retail_SOHStoreNumber, Retail_SOHSKU = \"\", Retail_SKU = \"\", Retail_SOHQTY;\nvar currentTime = new Date().toLocaleString('en-US', { timeZone: 'Asia/Dubai' });\n\nconst matchingMasterColumns = flow.get(\"SOHMASTERFIELDS\");\nconst sqlCol = flow.get('SOHSQLCol');\nconst sqlColLog = flow.get('SOHLOGSQLCol');\nlet query = '';\nlet queryNewArticle = '';\nlet query2 = '';\nlet queryLog = '';\nlet sqlvalueEach = '';\nlet sqlvalueEachLog = '';\nlet sqlRow = [];\nlet sqlRowLog = [];\n\nmsg.processLog = 0;\nmsg.processMatching = 0;\n\nresults.forEach((row, index) => {\n  matchingMasterColumns.forEach((mMasterCol, i) => {\n    switch (mMasterCol) {\n      case \"SKU_STORE_MATCHING\":\n        //  var Retail_SOHSKU =  SKUS;\n        // var Retail_SKU = SKUS.padStart(14, '0');\n        //sqlRow[sqlCol.indexOf(\"ID\")] = row[mMasterCol];\n        //  sqlRow[sqlCol.indexOf(\"UniqueID\")] = row[mMasterCol];\n\n        const store = msg.store.toString().padStart(7, \"0\");\n        var index1 = store + \"_\" + row[\"ID\"];\n        sqlRow[sqlCol.indexOf(\"serialNumber\")] =\n          store + \"_\" + row[\"ID\"] + \"_\" + row[\"SKU_original\"];\n        sqlRow[sqlCol.indexOf(\"Retail_SOHSKU\")] = row[\"SKU_original\"];\n        sqlRow[sqlCol.indexOf(\"Retail_SKU\")] = row[\"SKU\"];\n        if (items_toCopy[index1]) {\n          sqlRow[sqlCol.indexOf(\"Retail_SOHDate\")] = items_toCopy[index1].Retail_SOHDate;\n          sqlRow[sqlCol.indexOf(\"Retail_SOHStoreNumber\")] = items_toCopy[index1].Retail_SOHStoreNumber;\n          sqlRow[sqlCol.indexOf(\"Retail_SOHQTY\")] = items_toCopy[index1].Retail_SOHQTY;\n          sqlRow[sqlCol.indexOf(\"timestamp\")] = currentTime;\n          sqlRow[sqlCol.indexOf(\"product_number\")] = items_toCopy[index1].product_number;\n          sqlRow[sqlCol.indexOf(\"item_ref\")] = items_toCopy[index1].item_ref;\n          //if (items_toCopyOriginal[index].serialNumber === index1) {\n            items_toCopyOriginal[index].found = 1;\n         // }\n        }\n        break;\n      default:\n      if(row[mMasterCol] !== undefined) {\n          const regex = /\\'/gi;\n          row[mMasterCol] = row[mMasterCol].toString().replace(regex, '\\'\\'');\n      }\n        sqlRow[sqlCol.indexOf(mMasterCol)] = row.hasOwnProperty(mMasterCol)\n          ? row[mMasterCol]\n          : \"\";\n        break;\n    }\n  });\n  \n  query += QueryBuilder(\"SOH\", sqlRow);\n  msg.processMatching = 1;\n    \n});\nitems_toCopyOriginal.forEach((row, index) => {\n  const store = msg.store.toString().padStart(7, \"0\");\n  if (row.found !== 1) {\n    sqlRowLog[sqlCol.indexOf(\"serialNumber\")] = store + \"_\" + row.serialNumber;//.padStart(14, '0')+\"_empty\";\n\n    sqlRowLog[sqlCol.indexOf(\"Retail_SOHDate\")] = row.Retail_SOHDate;\n    sqlRowLog[sqlCol.indexOf(\"Retail_SOHStoreNumber\")] = row.Retail_SOHStoreNumber;\n    sqlRowLog[sqlCol.indexOf(\"Retail_SOHQTY\")] = row.Retail_SOHQTY;\n    sqlRowLog[sqlCol.indexOf(\"timestamp\")] = currentTime;\n    sqlRowLog[sqlCol.indexOf(\"product_number\")] = row.product_number;\n    sqlRowLog[sqlCol.indexOf(\"item_ref\")] = row.item_ref;\n\n    queryLog += QueryBuilder(\"SOHlog\", sqlRowLog);\n    queryNewArticle += QueryBuilder(\"SOH\", sqlRowLog);\n    msg.processLog = 1;\n    //review possible bugs in soh topic ingestion to sqlite\n    msg.processMatching = 1;\n  }\n\n});\n\nmsg.topicToLog = \"BEGIN TRANSACTION;\" + \"\\n\" + queryLog  + \"COMMIT;\";\nmsg.topic = \"BEGIN TRANSACTION;\" + \"\\n\" + query + \"COMMIT;\";\nmsg.topic2 = \"BEGIN TRANSACTION;\" + \"\\n\" + queryNewArticle + \"COMMIT;\";\n\nreturn msg;\n\nfunction QueryBuilder(table, sqlRow) {\n  let sqlValueI = \"\";\n  let sqlHeader = \"\";\n  let query = '';\n  sqlRow.forEach((col, i) => {\n    sqlValueI = sqlValueI + col + \"','\";\n    sqlHeader = sqlHeader + sqlCol[i] + \"','\";\n  });\n  sqlValueI = sqlValueI.slice(0, sqlValueI.length - 2);\n  sqlHeader = sqlHeader.slice(0, sqlHeader.length - 2);\n\n  query =\n    \"INSERT or REPLACE INTO \" + table +\n    \"('\" +\n    sqlHeader +\n    \")\" +\n    \" VALUES \" +\n    \"('\" +\n    sqlValueI +\n    \");\" +\n    \"\\n\";\n\n  return query;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 620,
        "wires": [
            [
                "4d5edbb0da9f72ff",
                "eb3dc0ed12f1ce44",
                "30a7282e79736f40"
            ]
        ]
    },
    {
        "id": "0bd541eafe0adc65",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1510,
        "y": 720,
        "wires": []
    },
    {
        "id": "4d5edbb0da9f72ff",
        "type": "switch",
        "z": "3ab8323c0235e4e7",
        "name": "query",
        "property": "processLog",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 560,
        "wires": [
            [
                "6c376acc2ca9fa7f"
            ]
        ]
    },
    {
        "id": "eb3dc0ed12f1ce44",
        "type": "switch",
        "z": "3ab8323c0235e4e7",
        "name": "query",
        "property": "processMatching",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 680,
        "wires": [
            [
                "f230cbbd800c1bea"
            ]
        ]
    },
    {
        "id": "30a7282e79736f40",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1830,
        "y": 620,
        "wires": []
    },
    {
        "id": "71572ce782ac86c0",
        "type": "change",
        "z": "3ab8323c0235e4e7",
        "name": "New Articles",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topic2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1810,
        "y": 820,
        "wires": [
            [
                "136c15cd4ee69b51"
            ]
        ]
    },
    {
        "id": "297477fbce2cabbe",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 820,
        "wires": []
    },
    {
        "id": "6c376acc2ca9fa7f",
        "type": "change",
        "z": "3ab8323c0235e4e7",
        "name": "to Log",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topicToLog",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 520,
        "wires": [
            [
                "24b4a8ca86acf2d2"
            ]
        ]
    },
    {
        "id": "e130adf4569dcab4",
        "type": "debug",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1970,
        "y": 460,
        "wires": []
    },
    {
        "id": "4cf3d16f072ea8fc",
        "type": "sqlite",
        "z": "3ab8323c0235e4e7",
        "mydb": "7b8f6438.90b4fc",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get master",
        "x": 1410,
        "y": 620,
        "wires": [
            [
                "85fcd86ed25e64af",
                "0bd541eafe0adc65"
            ]
        ]
    },
    {
        "id": "136c15cd4ee69b51",
        "type": "sqlite",
        "z": "3ab8323c0235e4e7",
        "mydb": "7b8f6438.90b4fc",
        "sqlquery": "batch",
        "sql": "",
        "name": "Insert or Replace SOH",
        "x": 2000,
        "y": 820,
        "wires": [
            [
                "297477fbce2cabbe"
            ]
        ]
    },
    {
        "id": "f230cbbd800c1bea",
        "type": "sqlite",
        "z": "3ab8323c0235e4e7",
        "mydb": "7b8f6438.90b4fc",
        "sqlquery": "batch",
        "sql": "",
        "name": "Insert or Replace SOH",
        "x": 1800,
        "y": 740,
        "wires": [
            [
                "71572ce782ac86c0"
            ]
        ]
    },
    {
        "id": "24b4a8ca86acf2d2",
        "type": "sqlite",
        "z": "3ab8323c0235e4e7",
        "mydb": "70042ab88621c9ba",
        "sqlquery": "batch",
        "sql": "",
        "name": "Insert or Replace SOHlog",
        "x": 1790,
        "y": 460,
        "wires": [
            [
                "e130adf4569dcab4"
            ]
        ]
    },
    {
        "id": "478a7a6b502987da",
        "type": "SFTP-main",
        "z": "3ab8323c0235e4e7",
        "path": "/",
        "method": "list",
        "remoteFilePath": "",
        "localFilePath": "/",
        "remoteDestPath": "/",
        "useCompression": "",
        "encoding": "utf8",
        "mode": "",
        "recursive": "false",
        "server": "8a9f27dbb0500d4e",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "331ae31847299fdb",
                "1fe47e68d270424a"
            ]
        ]
    },
    {
        "id": "3d0b2f3f4577bd64",
        "type": "SFTP-main",
        "z": "3ab8323c0235e4e7",
        "path": "/",
        "method": "rename",
        "remoteFilePath": "",
        "localFilePath": "/",
        "remoteDestPath": "",
        "useCompression": "",
        "encoding": "utf8",
        "mode": "",
        "recursive": "false",
        "server": "38d826fb79202031",
        "x": 1130,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ddf49411b5cec374",
        "type": "splitter",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "property": "payload",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "99c02b449020ca4f"
            ]
        ]
    },
    {
        "id": "a40689bea18590eb",
        "type": "sftp in",
        "z": "3ab8323c0235e4e7",
        "name": "virginSFTP",
        "sftp": "59e5ceb19a22b592",
        "operation": "get",
        "filename": "",
        "localFilename": "",
        "workdir": "",
        "x": 490,
        "y": 300,
        "wires": [
            [
                "4a2b6341f3232f7a"
            ]
        ]
    },
    {
        "id": "fe191f01633c9cbc",
        "type": "fs-ops-move",
        "z": "3ab8323c0235e4e7",
        "name": "MoveToProccess",
        "sourcePath": "source",
        "sourcePathType": "msg",
        "sourceFilename": "filenameSOH",
        "sourceFilenameType": "msg",
        "destPath": "sohToProcess",
        "destPathType": "msg",
        "destFilename": "soh.csv",
        "destFilenameType": "str",
        "link": false,
        "x": 730,
        "y": 600,
        "wires": [
            [
                "300f48cfaba79791"
            ]
        ]
    },
    {
        "id": "c1dd585584a0560c",
        "type": "fs-ops-move",
        "z": "3ab8323c0235e4e7",
        "name": "MoveToProcessed",
        "sourcePath": "sohToProcess",
        "sourcePathType": "msg",
        "sourceFilename": "soh.csv",
        "sourceFilenameType": "str",
        "destPath": "sohProcessed",
        "destPathType": "msg",
        "destFilename": "filenameSOH",
        "destFilenameType": "msg",
        "link": false,
        "x": 1150,
        "y": 560,
        "wires": [
            [
                "b275a8f3df610fbd"
            ]
        ]
    },
    {
        "id": "8bf0e3c5d3c05c72",
        "type": "fs-ops-dir",
        "z": "3ab8323c0235e4e7",
        "name": "",
        "path": "source",
        "pathType": "msg",
        "filter": "*.csv",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 500,
        "y": 420,
        "wires": [
            [
                "c7c323b8e1f09715"
            ]
        ]
    },
    {
        "id": "4a2b6341f3232f7a",
        "type": "iconvfile-out",
        "z": "3ab8323c0235e4e7",
        "name": "soh",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "charset": "utf8",
        "x": 470,
        "y": 360,
        "wires": [
            [
                "8bf0e3c5d3c05c72"
            ]
        ]
    },
    {
        "id": "ca0eff38f6c2a5f4",
        "type": "http in",
        "z": "b4bee3fd0d180490",
        "name": "PRINTING",
        "url": "/TAGIT",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 320,
        "wires": [
            [
                "070ec3f0ac460cf9",
                "dd82a833dd51b032",
                "99652867d50e4cd8"
            ]
        ]
    },
    {
        "id": "dd82a833dd51b032",
        "type": "debug",
        "z": "b4bee3fd0d180490",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 310,
        "y": 420,
        "wires": []
    },
    {
        "id": "99652867d50e4cd8",
        "type": "function",
        "z": "b4bee3fd0d180490",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/flows/logs/PRINTING-SAVE/'+ shortDate + '/inbound/' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "39c32a8f897b3755",
                "7791e3f05ef2bbbc"
            ]
        ]
    },
    {
        "id": "d7dd154f5bb71cfe",
        "type": "inject",
        "z": "b4bee3fd0d180490",
        "name": "Test",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"group\":\">RUBAIYAT\",\"thingTypeCode\":\"ITEM\",\"serialNumber\":\"3034000044149A0000014BEA\",\"udfs\":{\"deviceId\":{\"value\":\"C2A0622C-CB02-41E9-9465-9946B282B38F\"},\"Retail_Bizlocation\":{\"value\":\"0002115\"},\"sourceModule\":{\"value\":\"Printing\"},\"Retail_Printer\":{\"value\":\"PrinterID\"},\"Retail_Product_Color\":{\"value\":\"N0000\"},\"Retail_Product_Gender\":{\"value\":\"1\"},\"Retail_Product_Level1Name\":{\"value\":\"286 - BOXER\"},\"Retail_Product_Level2Name\":{\"value\":\"139 - DG MEN UNDERWEAR\"},\"Retail_Product_Name\":{\"value\":\"REGULAR BOXER\"},\"Retail_Product_Name_Text\":{\"value\":\"دولسي اند جابانا بوكسر\"},\"Retail_Product_Price\":{\"value\":\"150\"},\"Retail_Product_Season\":{\"value\":\"1812\"},\"Retail_Product_Size\":{\"value\":\"7\"},\"Retail_Product_SKU\":{\"value\":\"000017210966\"},\"Retail_Product_SKUOriginal\":{\"value\":\"17210966\"},\"Retail_Product_SP_VAT_AR\":{\"value\":\"ر.س.‏١٧٢.٥\"},\"Retail_Product_SP_VAT_EN\":{\"value\":\"172.5\"},\"Retail_Product_Style\":{\"value\":\"6162 - UNDERWEAR/SWIMWEAR\"},\"Retail_Product_SupplierName\":{\"value\":\"144 - DOLCE&GABBANA UNDERWEAR\"},\"Retail_Product_UniqueID\":{\"value\":\"8056305653504\"},\"Retail_Product_UPC\":{\"value\":\"00000017210966\"},\"Retail_Product_VAT\":{\"value\":\"22.5\"},\"Retail_ZPL\":{\"value\":\"RUBAzpl_EN\"},\"source\":{\"value\":\"PRINTING_APP\"},\"user\":{\"value\":\"store2115\"},\"zone\":{\"value\":\"0002115.00101.1\"}}}]",
        "payloadType": "json",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "070ec3f0ac460cf9",
                "99652867d50e4cd8"
            ]
        ]
    },
    {
        "id": "7791e3f05ef2bbbc",
        "type": "debug",
        "z": "b4bee3fd0d180490",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 529,
        "y": 139,
        "wires": []
    },
    {
        "id": "f4f36142c389720e",
        "type": "function",
        "z": "b4bee3fd0d180490",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar originalPayload = msg.payload || [];\nvar payloadToProcess = null;\n\nvar validateProps =  function(payload){\n    var expectedFields = [\n        /*\"serialNumber\",*/\n        \"deviceId\",\n        \"Retail_Bizlocation\",\n        \"sourceModule\",\n        \"Retail_Printer\",\n        //\"Retail_Product_SKU\",\n        //\"Retail_Product_SKUOriginal\",\n        //\"Retail_Product_UniqueID\",\n        \"Retail_Product_UPC\",\n        \"Retail_ZPL\",\n        \"source\",\n        \"user\",\n        \"zone\"\n    ];\n    var udfs = payload.udfs || {};\n    var missingfields = expectedFields.filter(function(element){\n        return !udfs.hasOwnProperty(element);\n    });\n    return missingfields;\n}\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'MB5GITAP89CYROUS'){\n    node.warn(\"Unauthorized PRINTING transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized PRINTING transaction, proceeding... \");\n    results = msg.payload;\n    var validPayload = Array.isArray(results);\n    var validatedFields = '';\n    if(validPayload){\n        //Validating Missing Fields\n        for(var item=0; item < originalPayload.length; item++ ){\n            validatedFields = validateProps(originalPayload[item]);\n            if(validatedFields.length > 0){\n                msg.payload = {\"response\":\"bad request missing field value \" + validatedFields.toLocaleString()};\n                msg.statusCode = 400;\n                return [msg, payloadToProcess ];\n            }\n        }\n        \n        msg.payload = {\"response\":\"Authorized. Processing PRINTING for \"+results.length+ \" items\"};\n        msg.statusCode = 200;\n        payloadToProcess = {payload: originalPayload}\n    } else{\n        msg.payload = {\"response\":\"Invalid Format.\" };\n        msg.statusCode = 400;\n    }\n    return [msg, payloadToProcess ];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 590,
        "y": 220,
        "wires": [
            [
                "1e308288b28591f3"
            ],
            [
                "304662c5febdd001"
            ]
        ]
    },
    {
        "id": "66d1906fc50a1633",
        "type": "function",
        "z": "b4bee3fd0d180490",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar originalPayload = msg.payload || [];\nvar payloadToProcess = null;\n\nvar validateProps =  function(payload){\n    var expectedFields = [\n        /*\"serialNumber\",*/\n        \"deviceId\",\n        \"Retail_Bizlocation\",\n        \"sourceModule\",\n        \"Retail_Printer\",\n        //\"Retail_Product_SKU\",\n        //\"Retail_Product_SKUOriginal\",\n        //\"Retail_Product_UniqueID\",\n        \"Retail_Product_UPC\",\n        \"Retail_ZPL\",\n        \"source\",\n        \"user\",\n        \"zone\"\n    ];\n    var udfs = payload.udfs || {};\n    var missingfields = expectedFields.filter(function(element){\n        return !udfs.hasOwnProperty(element);\n    });\n    return missingfields;\n}\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'MB5GITAP89CYROUS'){\n    node.warn(\"Unauthorized PRINTING transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized PRINTING transaction, proceeding... \");\n    results = msg.payload;\n    var validPayload = Array.isArray(results);\n    var validatedFields = '';\n    if(validPayload){\n        //Validating Missing Fields\n        for(var item=0; item < originalPayload.length; item++ ){\n            validatedFields = validateProps(originalPayload[item]);\n            if(validatedFields.length > 0){\n                msg.payload = {\"response\":\"bad request missing field value \" + validatedFields.toLocaleString()};\n                msg.statusCode = 400;\n                return [msg, payloadToProcess ];\n            }\n        }\n        \n        msg.payload = {\"response\":\"Authorized. Processing PRINTING for \"+results.length+ \" items\"};\n        msg.statusCode = 200;\n        payloadToProcess = {payload: originalPayload}\n    } else{\n        msg.payload = {\"response\":\"Invalid Format.\" };\n        msg.statusCode = 400;\n    }\n    return [msg, payloadToProcess ];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 590,
        "y": 400,
        "wires": [
            [
                "c513f8a346b06c41"
            ],
            [
                "60f981933026633f"
            ]
        ]
    },
    {
        "id": "524fd661050f1d18",
        "type": "function",
        "z": "b4bee3fd0d180490",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar originalPayload = msg.payload || [];\nvar payloadToProcess = null;\n\nvar validateProps =  function(payload){\n    var expectedFields = [\n        /*\"serialNumber\",*/\n        \"deviceId\",\n        \"Retail_Bizlocation\",\n        \"sourceModule\",\n        \"Retail_Printer\",\n        //\"Retail_Product_SKU\",\n        //\"Retail_Product_SKUOriginal\",\n        //\"Retail_Product_UniqueID\",\n        \"Retail_Product_UPC\",\n        \"Retail_ZPL\",\n        \"source\",\n        \"user\",\n        \"zone\"\n    ];\n    var udfs = payload.udfs || {};\n    var missingfields = expectedFields.filter(function(element){\n        return !udfs.hasOwnProperty(element);\n    });\n    return missingfields;\n}\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'MB5GITAP89CYROUS'){\n    node.warn(\"Unauthorized PRINTING transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized PRINTING transaction, proceeding... \");\n    results = msg.payload;\n    var validPayload = Array.isArray(results);\n    var validatedFields = '';\n    if(validPayload){\n        //Validating Missing Fields\n        for(var item=0; item < originalPayload.length; item++ ){\n            validatedFields = validateProps(originalPayload[item]);\n            if(validatedFields.length > 0){\n                msg.payload = {\"response\":\"bad request missing field value \" + validatedFields.toLocaleString()};\n                msg.statusCode = 400;\n                return [msg, payloadToProcess ];\n            }\n        }\n        \n        msg.payload = {\"response\":\"Authorized. Processing PRINTING for \"+results.length+ \" items\"};\n        msg.statusCode = 200;\n        payloadToProcess = {payload: originalPayload}\n    } else{\n        msg.payload = {\"response\":\"Invalid Format.\" };\n        msg.statusCode = 400;\n    }\n    return [msg, payloadToProcess ];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 590,
        "y": 580,
        "wires": [
            [
                "3332edd0859c18cd"
            ],
            [
                "49c2fe7d788d5b79"
            ]
        ]
    },
    {
        "id": "39c32a8f897b3755",
        "type": "file",
        "z": "b4bee3fd0d180490",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 530,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1e308288b28591f3",
        "type": "http response",
        "z": "b4bee3fd0d180490",
        "name": "",
        "x": 770,
        "y": 200,
        "wires": []
    },
    {
        "id": "304662c5febdd001",
        "type": "function",
        "z": "b4bee3fd0d180490",
        "name": "Prepare Item Messages",
        "func": "results = msg.payload;\n\nvar currentTime = new Date().getTime();\nvar newSKU;\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    //node.warn(\"Changed ZONE: \"+zon);\n\n    if(results[j].udfs.Retail_Product_SKU.value){\n        newSKU = results[j].udfs.Retail_Product_SKU.value;\n        originalSkusItems.push({SKU_original: newSKU, serialNumber: results[j].serialNumber}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    \n}\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\n//node.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS ****** \");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 240,
        "wires": [
            [
                "40a415830dc69ca9"
            ]
        ]
    },
    {
        "id": "c513f8a346b06c41",
        "type": "http response",
        "z": "b4bee3fd0d180490",
        "name": "",
        "x": 770,
        "y": 382,
        "wires": []
    },
    {
        "id": "60f981933026633f",
        "type": "function",
        "z": "b4bee3fd0d180490",
        "name": "Prepare Item Messages",
        "func": "results = msg.payload;\n\nvar currentTime = new Date().getTime();\nvar newSKU;\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    //node.warn(\"Changed ZONE: \"+zon);\n\n    if(results[j].udfs.Retail_Product_SKU.value){\n        newSKU = results[j].udfs.Retail_Product_SKU.value;\n        originalSkusItems.push({SKU_original: newSKU, serialNumber: results[j].serialNumber}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    \n}\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\n//node.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS ****** \");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 420,
        "wires": [
            [
                "113c1f7daa4c2051"
            ]
        ]
    },
    {
        "id": "3332edd0859c18cd",
        "type": "http response",
        "z": "b4bee3fd0d180490",
        "name": "",
        "x": 770,
        "y": 562,
        "wires": []
    },
    {
        "id": "49c2fe7d788d5b79",
        "type": "function",
        "z": "b4bee3fd0d180490",
        "name": "Prepare Item Messages",
        "func": "results = msg.payload;\n\nvar currentTime = new Date().getTime();\nvar newSKU;\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    //node.warn(\"Changed ZONE: \"+zon);\n\n    if(results[j].udfs.Retail_Product_SKU.value){\n        newSKU = results[j].udfs.Retail_Product_SKU.value;\n        originalSkusItems.push({SKU_original: newSKU, serialNumber: results[j].serialNumber}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    \n}\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\n//node.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS ****** \");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 600,
        "wires": [
            [
                "231467cb67be98d8"
            ]
        ]
    },
    {
        "id": "40a415830dc69ca9",
        "type": "subflow:b3edb4d5e13763dc",
        "z": "b4bee3fd0d180490",
        "name": "",
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "ba640cb4bac6a3c3"
            ]
        ]
    },
    {
        "id": "113c1f7daa4c2051",
        "type": "subflow:b3edb4d5e13763dc",
        "z": "b4bee3fd0d180490",
        "name": "",
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "bc83af2f5a2ca507"
            ]
        ]
    },
    {
        "id": "231467cb67be98d8",
        "type": "subflow:b3edb4d5e13763dc",
        "z": "b4bee3fd0d180490",
        "name": "",
        "x": 1070,
        "y": 600,
        "wires": [
            [
                "1a1913a56fa3909c"
            ]
        ]
    },
    {
        "id": "ba640cb4bac6a3c3",
        "type": "debug",
        "z": "b4bee3fd0d180490",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1250,
        "y": 240,
        "wires": []
    },
    {
        "id": "bc83af2f5a2ca507",
        "type": "debug",
        "z": "b4bee3fd0d180490",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1250,
        "y": 420,
        "wires": []
    },
    {
        "id": "1a1913a56fa3909c",
        "type": "debug",
        "z": "b4bee3fd0d180490",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1250,
        "y": 600,
        "wires": []
    },
    {
        "id": "070ec3f0ac460cf9",
        "type": "Load Balance",
        "z": "b4bee3fd0d180490",
        "defaultcapacity": 100,
        "dynamic": "6409711c.8bf87",
        "hashType": "pearson",
        "mps": "",
        "name": "",
        "noavailability": "admin",
        "nocapacity": "admin",
        "outputs": 4,
        "routes": "3",
        "selection": "next",
        "sourceProperty": "msg.topic",
        "sticky": "",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "7791e3f05ef2bbbc"
            ],
            [
                "f4f36142c389720e"
            ],
            [
                "66d1906fc50a1633"
            ],
            [
                "524fd661050f1d18"
            ]
        ]
    },
    {
        "id": "973b017f736d86b1",
        "type": "http in",
        "z": "3934868f5ace485b",
        "name": "",
        "url": "/GET/CCM/DATA",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "b6097cae685eafab"
            ]
        ]
    },
    {
        "id": "4ad0e4e1f04fa317",
        "type": "http response",
        "z": "3934868f5ace485b",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 200,
        "wires": []
    },
    {
        "id": "52a9ec85fce34edf",
        "type": "comment",
        "z": "3934868f5ace485b",
        "name": "GET CCM/ Warehouse items movement data",
        "info": "",
        "x": 250,
        "y": 100,
        "wires": []
    },
    {
        "id": "b6097cae685eafab",
        "type": "http request",
        "z": "3934868f5ace485b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/Recomended-Location",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 200,
        "wires": [
            [
                "4ad0e4e1f04fa317",
                "9376a29bfdf174bf"
            ]
        ]
    },
    {
        "id": "9376a29bfdf174bf",
        "type": "function",
        "z": "3934868f5ace485b",
        "name": "",
        "func": "// var data= msg.payload;\nmsg.topic= \"insert into ASN_4232344(recommendedLocation)Values(\"+msg.payload+\")\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 300,
        "wires": [
            [
                "4d57be7ef8560fa6"
            ]
        ]
    },
    {
        "id": "36a349492a6ecdeb",
        "type": "debug",
        "z": "3934868f5ace485b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 300,
        "wires": []
    },
    {
        "id": "b7d92e4f8b715b84",
        "type": "sqlite",
        "z": "3934868f5ace485b",
        "mydb": "7b8f6438.90b4fc",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get master",
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0ab4801961471cfd",
        "type": "sqlite",
        "z": "3934868f5ace485b",
        "mydb": "7b8f6438.90b4fc",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Master",
        "x": 710,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4d57be7ef8560fa6",
        "type": "sqlite",
        "z": "3934868f5ace485b",
        "mydb": "82664b308449f318",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Master",
        "x": 430,
        "y": 300,
        "wires": [
            [
                "36a349492a6ecdeb"
            ]
        ]
    },
    {
        "id": "762872b50a6afc08",
        "type": "http in",
        "z": "302faf26d346ae52",
        "name": "SOHPERSTORE",
        "url": "/SOHPERSTORE",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "a6f970804cafc880"
            ]
        ]
    },
    {
        "id": "3f06e75310df349c",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized SOHPERSTORE request, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized SOHPERSTORE request, proceeding... \");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "f4b1792f2bc2921e"
            ]
        ]
    },
    {
        "id": "a6f970804cafc880",
        "type": "Load Balance",
        "z": "302faf26d346ae52",
        "defaultcapacity": 100,
        "dynamic": "6409711c.8bf87",
        "hashType": "pearson",
        "mps": "",
        "name": "",
        "noavailability": "admin",
        "nocapacity": "admin",
        "outputs": 4,
        "routes": "3",
        "selection": "next",
        "sourceProperty": "msg.topic",
        "sticky": "",
        "x": 380,
        "y": 200,
        "wires": [
            [
                "a34f6b6ee3573daf"
            ],
            [
                "3f06e75310df349c"
            ],
            [
                "2e2d7e9acbe9b58f"
            ],
            [
                "40ee278d8bf00a44"
            ]
        ]
    },
    {
        "id": "9c223c76092ff233",
        "type": "file",
        "z": "302faf26d346ae52",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 640,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9e4e91a207d02721",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/flows/logs/SOHPERSTORE/'+ shortDate + '/inbound/' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "a34f6b6ee3573daf",
                "9c223c76092ff233"
            ]
        ]
    },
    {
        "id": "a34f6b6ee3573daf",
        "type": "debug",
        "z": "302faf26d346ae52",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "f4b1792f2bc2921e",
        "type": "switch",
        "z": "302faf26d346ae52",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 853,
        "y": 180,
        "wires": [
            [
                "be4e54e895b88db0"
            ],
            [
                "b646296abea7d141"
            ]
        ]
    },
    {
        "id": "b646296abea7d141",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Store query",
        "func": "var results = msg.payload;\nvar StoreID,Zone,sqlquery; // Initilize the variables\nif(results.StoreID){       // if user select store id \n    StoreID = results.StoreID; // set selected store value to initilize store_id variables\n    StoreID = StoreID.substr(StoreID.length - 4);  // set the store id length \n    sqlquery = \" WHERE Retail_SOHStoreNumber=\\'\"+StoreID+\"\\'\"; // query to get the store id from DB\n    if (results.Zone) {  // if user select zone\n        Zone = results.Zone; // set selected zone value to initilize zone variables\n        sqlquery += \" AND zone=\\'\" + Zone + \"\\';\"; // query to get the zone value from DB\n    }\n    else{\n        sqlquery += \";\";    // if user not select zone then query is empty\n    }\n}else{\n    sqlquery = \";\";  // if user not select store_id then query is empty\n}\nmsg.topic = \"SELECT * FROM SOH\"+sqlquery; // get SOH from DB according to the selected store id and zone value.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 186,
        "wires": [
            [
                "ac81a3b67c08ba05"
            ]
        ]
    },
    {
        "id": "be4e54e895b88db0",
        "type": "http response",
        "z": "302faf26d346ae52",
        "name": "",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "ac81a3b67c08ba05",
        "type": "sqlite",
        "z": "302faf26d346ae52",
        "mydb": "70042ab88621c9ba",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get SOH",
        "x": 1180,
        "y": 180,
        "wires": [
            [
                "3ce9182e94649803"
            ]
        ]
    },
    {
        "id": "3ce9182e94649803",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Store query",
        "func": "var data = msg.payload; // store the payload value into data variable \n//node.warn(data.length); //check the length of payload\nvar agg;  \nvar results = []; // declear result array \nvar currentTime = new Date().toLocaleString('en-US', { timeZone: 'Asia/Dubai' });\n\n//node.warn(\"data length: \"+data.length);\n\nnode.warn(\"Processing SOH PER STORE execution at \"+currentTime+ \" Dubai\");\n\nconst groupedData = Object.entries( // Grouped Data(used for divided multiple items in groups) because \n                                    // we need multiple items\n    data.reduce((acc, obj) => {     // The reduce method merge the result on single element.\n        // Group initialization\n        if (!acc[obj.SupplierItemNum]) { \n            acc[obj.SupplierItemNum] = []; // initilize the group of supplierItemNum\n        }\n        // FIX: only pushing the object that contains id and value\n        acc[obj.SupplierItemNum].push(obj);  //push the object into initilize group\n        return acc; // return the final result \n    }, {})\n);\n    \nnode.warn(\"Unique SKU's: \" + groupedData.length); //show the SKU's and groupData length\n//node.warn(groupedData);\n\nfor(var i=0;i<groupedData.length;i++){\n    agg = groupedData[i][1];\n    var Retail_SKU = \"\";\n    \n    for(var j=0;j<agg.length;j++){\n        \n        if(Retail_SKU === \"\"){\n            Retail_SKU = agg[j].Retail_SKU;\n        }\n        else{\n            if((Retail_SKU.slice(-1))!==\",\"){\n                    Retail_SKU+=\",\";\n            }\n            Retail_SKU+=agg[j].Retail_SKU;\n        }\n        if(agg[j].Description !== ''){\n            var arrItems = \"{\"+\n                \"\\\"StoreID\\\":\\\"\"+agg[j].Retail_SOHStoreNumber.padStart(7, '0')+\"\\\", \"+\n                \"\\\"SOHDate\\\":\\\"\"+agg[j].Retail_SOHDate+\"\\\", \"+\n                \"\\\"SOHSKU\\\":\\\"\"+agg[j].Retail_SOHSKU+\"\\\", \"+\n                \"\\\"SKU\\\":\\\"\"+Retail_SKU+\"\\\", \"+\n                \"\\\"SOHQTY\\\":\\\"\"+agg[j].Retail_SOHQTY+\"\\\", \"+\n                \"\\\"UniqueID\\\":\\\"\"+agg[j].UniqueID+\"\\\", \"+\n                \"\\\"SKU_original\\\":\\\"\"+Retail_SKU+\"\\\", \"+\n                \"\\\"Description\\\":\\\"\"+agg[j].Description+\"\\\", \"+\n                \"\\\"DepartmentID\\\":\\\"\"+agg[j].DepartmentID+\"\\\", \"+\n                \"\\\"Brand\\\":\\\"\"+agg[j].Brand+\"\\\", \"+\n                \"\\\"SupplierItemNum\\\":\\\"\"+agg[j].SupplierItemNum+\"\\\", \"+\n                \"\\\"Color\\\":\\\"\"+agg[j].Color+\"\\\", \"+\n                \"\\\"Size\\\":\\\"\"+agg[j].Size+\"\\\", \"+\n                \"\\\"Season\\\":\\\"\"+agg[j].Season+\"\\\", \"+\n                \"\\\"UPC\\\":\\\"\"+agg[j].GTIN+\"\\\", \"+\n                \"\\\"Style\\\":\\\"\"+agg[j].Style+\"\\\"}\";\n        }\n        \n    }\n    //node.warn(arrItems);\n    results.push(JSON.parse(arrItems));// push the all soh table fields data into result array\n}    \n\n    \n//node.warn(results);\nmsg.payload = {total:results.length,results:results}; // send the total result and its length \nmsg.statusCode = 200; //send the response code 200 means all data show successfully\nreturn msg; // return the whole msg like result, and statuscode",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 160,
        "wires": [
            [
                "d29866eb9ed7a6ec",
                "926c170f4c3a8921"
            ]
        ]
    },
    {
        "id": "d29866eb9ed7a6ec",
        "type": "debug",
        "z": "302faf26d346ae52",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1470,
        "y": 160,
        "wires": []
    },
    {
        "id": "926c170f4c3a8921",
        "type": "http response",
        "z": "302faf26d346ae52",
        "name": "",
        "x": 1470,
        "y": 200,
        "wires": []
    },
    {
        "id": "2e2d7e9acbe9b58f",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized SOHPERSTORE request, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized SOHPERSTORE request, proceeding... \");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 320,
        "wires": [
            [
                "17c13e16c073a99b"
            ]
        ]
    },
    {
        "id": "17c13e16c073a99b",
        "type": "switch",
        "z": "302faf26d346ae52",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 893,
        "y": 320,
        "wires": [
            [
                "1e106017541c8b34"
            ],
            [
                "66cb2cba2d0464c8"
            ]
        ]
    },
    {
        "id": "66cb2cba2d0464c8",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Store query",
        "func": "var results = msg.payload;\nvar StoreID,Zone,sqlquery;\nif(results.StoreID){\n    StoreID = results.StoreID;\n    StoreID = StoreID.substr(StoreID.length - 4);\n    sqlquery = \" WHERE Retail_SOHStoreNumber=\\'\"+StoreID+\"\\'\";\n    if(results.Zone){\n        Zone = results.Zone;\n        sqlquery += \" AND zone=\\'\"+Zone+\"\\';\";\n    }\n    else{\n        sqlquery += \";\";    \n    }\n}else{\n    sqlquery = \";\";\n}\nmsg.topic = \"SELECT * FROM SOH\"+sqlquery;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 326,
        "wires": [
            [
                "b374ff0260f91334"
            ]
        ]
    },
    {
        "id": "1e106017541c8b34",
        "type": "http response",
        "z": "302faf26d346ae52",
        "name": "",
        "x": 1050,
        "y": 260,
        "wires": []
    },
    {
        "id": "b374ff0260f91334",
        "type": "sqlite",
        "z": "302faf26d346ae52",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get SOH",
        "x": 1221,
        "y": 326,
        "wires": [
            [
                "b30e0dcb0bcea32d"
            ]
        ]
    },
    {
        "id": "b30e0dcb0bcea32d",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Store query",
        "func": "var data = msg.payload;\n//node.warn(data.length);\nvar agg;\nvar results = [];\nvar currentTime = new Date().toLocaleString('en-US', { timeZone: 'Asia/Dubai' });\n\n//node.warn(\"data length: \"+data.length);\n\nnode.warn(\"Processing SOH PER STORE execution at \"+currentTime+ \" Dubai\");\n\nconst groupedData = Object.entries(\n    data.reduce((acc, obj) => {\n        // Group initialization\n        if (!acc[obj.SupplierItemNum]) {\n            acc[obj.SupplierItemNum] = [];\n        }\n        // FIX: only pushing the object that contains id and value\n        acc[obj.SupplierItemNum].push(obj);\n        return acc;\n    }, {})\n);\n    \nnode.warn(\"Unique SKU's: \" + groupedData.length);\n//node.warn(groupedData);\n\nfor(var i=0;i<groupedData.length;i++){\n    agg = groupedData[i][1];\n    var Retail_SKU = \"\";\n    \n    for(var j=0;j<agg.length;j++){\n        \n        if(Retail_SKU === \"\"){\n            Retail_SKU = agg[j].Retail_SKU;\n        }\n        else{\n            if((Retail_SKU.slice(-1))!==\",\"){\n                    Retail_SKU+=\",\";\n            }\n            Retail_SKU+=agg[j].Retail_SKU;\n        }\n        if(agg[j].Description !== ''){\n            var arrItems = \"{\"+\n                \"\\\"StoreID\\\":\\\"\"+agg[j].Retail_SOHStoreNumber.padStart(7, '0')+\"\\\", \"+\n                \"\\\"SOHDate\\\":\\\"\"+agg[j].Retail_SOHDate+\"\\\", \"+\n                \"\\\"SOHSKU\\\":\\\"\"+agg[j].Retail_SOHSKU+\"\\\", \"+\n                \"\\\"SKU\\\":\\\"\"+Retail_SKU+\"\\\", \"+\n                \"\\\"SOHQTY\\\":\\\"\"+agg[j].Retail_SOHQTY+\"\\\", \"+\n                \"\\\"UniqueID\\\":\\\"\"+agg[j].UniqueID+\"\\\", \"+\n                \"\\\"SKU_original\\\":\\\"\"+Retail_SKU+\"\\\", \"+\n                \"\\\"Description\\\":\\\"\"+agg[j].Description+\"\\\", \"+\n                \"\\\"DepartmentID\\\":\\\"\"+agg[j].DepartmentID+\"\\\", \"+\n                \"\\\"Brand\\\":\\\"\"+agg[j].Brand+\"\\\", \"+\n                \"\\\"SupplierItemNum\\\":\\\"\"+agg[j].SupplierItemNum+\"\\\", \"+\n                \"\\\"Color\\\":\\\"\"+agg[j].Color+\"\\\", \"+\n                \"\\\"Size\\\":\\\"\"+agg[j].Size+\"\\\", \"+\n                \"\\\"Season\\\":\\\"\"+agg[j].Season+\"\\\", \"+\n                \"\\\"UPC\\\":\\\"\"+agg[j].GTIN+\"\\\", \"+\n                \"\\\"Style\\\":\\\"\"+agg[j].Style+\"\\\"}\";\n        }\n        \n    }\n    //node.warn(arrItems);\n    results.push(JSON.parse(arrItems));\n}    \n\n    \n//node.warn(results);\nmsg.payload = {total:results.length,results:results};\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 326,
        "wires": [
            [
                "2359f9bd043ae089",
                "38ccb93306ee1476"
            ]
        ]
    },
    {
        "id": "2359f9bd043ae089",
        "type": "debug",
        "z": "302faf26d346ae52",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1510,
        "y": 300,
        "wires": []
    },
    {
        "id": "38ccb93306ee1476",
        "type": "http response",
        "z": "302faf26d346ae52",
        "name": "",
        "x": 1510,
        "y": 340,
        "wires": []
    },
    {
        "id": "40ee278d8bf00a44",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized SOHPERSTORE request, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized SOHPERSTORE request, proceeding... \");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 460,
        "wires": [
            [
                "e3c4065f77cc58f7"
            ]
        ]
    },
    {
        "id": "e3c4065f77cc58f7",
        "type": "switch",
        "z": "302faf26d346ae52",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 853,
        "y": 460,
        "wires": [
            [
                "c6886bad64657630"
            ],
            [
                "49a6076b74aa057c"
            ]
        ]
    },
    {
        "id": "49a6076b74aa057c",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Store query",
        "func": "var results = msg.payload;\nvar StoreID,Zone,sqlquery;\nif(results.StoreID){\n    StoreID = results.StoreID;\n    StoreID = StoreID.substr(StoreID.length - 4);\n    sqlquery = \" WHERE Retail_SOHStoreNumber=\\'\"+StoreID+\"\\'\";\n    if(results.Zone){\n        Zone = results.Zone;\n        sqlquery += \" AND zone=\\'\"+Zone+\"\\';\";\n    }\n    else{\n        sqlquery += \";\";    \n    }\n}else{\n    sqlquery = \";\";\n}\nmsg.topic = \"SELECT * FROM SOH\"+sqlquery;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 466,
        "wires": [
            [
                "508938397f0e17c4"
            ]
        ]
    },
    {
        "id": "c6886bad64657630",
        "type": "http response",
        "z": "302faf26d346ae52",
        "name": "",
        "x": 1010,
        "y": 400,
        "wires": []
    },
    {
        "id": "508938397f0e17c4",
        "type": "sqlite",
        "z": "302faf26d346ae52",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get SOH",
        "x": 1181,
        "y": 466,
        "wires": [
            [
                "178c62141a50cf58"
            ]
        ]
    },
    {
        "id": "178c62141a50cf58",
        "type": "function",
        "z": "302faf26d346ae52",
        "name": "Store query",
        "func": "var data = msg.payload;\n//node.warn(data.length);\nvar agg;\nvar results = [];\nvar currentTime = new Date().toLocaleString('en-US', { timeZone: 'Asia/Dubai' });\n\n//node.warn(\"data length: \"+data.length);\n\nnode.warn(\"Processing SOH PER STORE execution at \"+currentTime+ \" Dubai\");\n\nconst groupedData = Object.entries(\n    data.reduce((acc, obj) => {\n        // Group initialization\n        if (!acc[obj.SupplierItemNum]) {\n            acc[obj.SupplierItemNum] = [];\n        }\n        // FIX: only pushing the object that contains id and value\n        acc[obj.SupplierItemNum].push(obj);\n        return acc;\n    }, {})\n);\n    \nnode.warn(\"Unique SKU's: \" + groupedData.length);\n//node.warn(groupedData);\n\nfor(i=0;i<groupedData.length;i++){\n    agg = groupedData[i][1];\n    var Retail_SKU = \"\";\n    \n    for(j=0;j<agg.length;j++){\n        \n        if(Retail_SKU === \"\"){\n            Retail_SKU = agg[j].Retail_SKU;\n        }\n        else{\n            if((Retail_SKU.slice(-1))!==\",\"){\n                    Retail_SKU+=\",\";\n            }\n            Retail_SKU+=agg[j].Retail_SKU;\n        }\n        if(agg[j].Description !== ''){\n            var arrItems = \"{\"+\n                \"\\\"StoreID\\\":\\\"\"+agg[j].Retail_SOHStoreNumber.padStart(7, '0')+\"\\\", \"+\n                \"\\\"SOHDate\\\":\\\"\"+agg[j].Retail_SOHDate+\"\\\", \"+\n                \"\\\"SOHSKU\\\":\\\"\"+agg[j].Retail_SOHSKU+\"\\\", \"+\n                \"\\\"SKU\\\":\\\"\"+Retail_SKU+\"\\\", \"+\n                \"\\\"SOHQTY\\\":\\\"\"+agg[j].Retail_SOHQTY+\"\\\", \"+\n                \"\\\"UniqueID\\\":\\\"\"+agg[j].UniqueID+\"\\\", \"+\n                \"\\\"SKU_original\\\":\\\"\"+Retail_SKU+\"\\\", \"+\n                \"\\\"Description\\\":\\\"\"+agg[j].Description+\"\\\", \"+\n                \"\\\"DepartmentID\\\":\\\"\"+agg[j].DepartmentID+\"\\\", \"+\n                \"\\\"Brand\\\":\\\"\"+agg[j].Brand+\"\\\", \"+\n                \"\\\"SupplierItemNum\\\":\\\"\"+agg[j].SupplierItemNum+\"\\\", \"+\n                \"\\\"Color\\\":\\\"\"+agg[j].Color+\"\\\", \"+\n                \"\\\"Size\\\":\\\"\"+agg[j].Size+\"\\\", \"+\n                \"\\\"Season\\\":\\\"\"+agg[j].Season+\"\\\", \"+\n                \"\\\"UPC\\\":\\\"\"+agg[j].GTIN+\"\\\", \"+\n                \"\\\"Style\\\":\\\"\"+agg[j].Style+\"\\\"}\";\n        }\n        \n    }\n    //node.warn(arrItems);\n    results.push(JSON.parse(arrItems));\n}    \n\n    \n//node.warn(results);\nmsg.payload = {total:results.length,results:results};\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1330,
        "y": 466,
        "wires": [
            [
                "54eebb53f9665f63",
                "efcd27559e3e8b8f"
            ]
        ]
    },
    {
        "id": "54eebb53f9665f63",
        "type": "debug",
        "z": "302faf26d346ae52",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1470,
        "y": 440,
        "wires": []
    },
    {
        "id": "efcd27559e3e8b8f",
        "type": "http response",
        "z": "302faf26d346ae52",
        "name": "",
        "x": 1470,
        "y": 480,
        "wires": []
    },
    {
        "id": "81b5a5ac6534e647",
        "type": "http in",
        "z": "fd0452957f4a0322",
        "name": "Goods In",
        "url": "/GOODSIN",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "8678212077e3ccdd",
                "9a721ab586f511a1",
                "0e44364e4a26c281"
            ]
        ]
    },
    {
        "id": "8b8c3ddd9dea1965",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar originalPayload = msg.payload || [];\nvar payloadToProcess = null;\n\nvar validateProps =  function(payload){\n    var expectedFields = [\"Retail_ItemBatchID\",\"deviceId\",\"zone\",\"user\"];\n    var udfs = payload.udfs || {};\n    var missingfields = expectedFields.filter(function(element){\n        return !udfs.hasOwnProperty(element);\n    });\n    return missingfields;\n }\n//checking if the api_key is correct, otherwise response is Unauthorized\nif (!headers.apikey || headers.apikey != 'AIzaSyA_V9KPig2FAH3gtwkjUA_1R4k7vRvHP6M'){\n    node.warn(\"Unauthorized Goods In transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    var results = msg.payload;\n    node.warn(\"Authorized Goods In \"+results[0].udfs.Retail_ItemBatchID.value+\" transaction for \"+results.length+\" items, proceeding... \");\n    var validPayload = Array.isArray(results);\n    var validatedFields = '';\n    if(validPayload){\n        for(var item=0; item < originalPayload.length; item++ ){\n            validatedFields = validateProps(originalPayload[item]);\n            if(validatedFields.length > 0){\n                msg.payload = {\"response\":\"bad request missing field value \" + validatedFields.toLocaleString()};\n                msg.statusCode = 400;\n                return [msg, payloadToProcess ];\n            }\n        }\n        \n        msg.payload = {\"response\":\"Authorized. Processing Goods In for \"+results.length+ \" items\"};\n        msg.statusCode = 200;\n        payloadToProcess = {payload: originalPayload}\n    } else{\n        msg.payload = {\"response\":\"Invalid Format.\" };\n        msg.statusCode = 400;\n    }\n    return [msg, payloadToProcess ];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 193,
        "wires": [
            [
                "bbe8f15475cedaae"
            ],
            [
                "f71fa5a2e59667c1",
                "6bbb42c4cd76dde9"
            ]
        ]
    },
    {
        "id": "bbe8f15475cedaae",
        "type": "http response",
        "z": "fd0452957f4a0322",
        "name": "",
        "x": 1050,
        "y": 140,
        "wires": []
    },
    {
        "id": "8678212077e3ccdd",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 270,
        "y": 240,
        "wires": []
    },
    {
        "id": "9a721ab586f511a1",
        "type": "Load Balance",
        "z": "fd0452957f4a0322",
        "defaultcapacity": 100,
        "dynamic": "cd3134e807828893",
        "hashType": "pearson",
        "mps": "",
        "name": "",
        "noavailability": "admin",
        "nocapacity": "admin",
        "outputs": 4,
        "routes": "3",
        "selection": "next",
        "sourceProperty": "msg.topic",
        "sticky": "",
        "x": 540,
        "y": 200,
        "wires": [
            [
                "649044e9ee26edd5"
            ],
            [
                "8b8c3ddd9dea1965",
                "649044e9ee26edd5"
            ],
            [
                "8b8c3ddd9dea1965",
                "649044e9ee26edd5"
            ],
            [
                "8b8c3ddd9dea1965",
                "649044e9ee26edd5"
            ]
        ]
    },
    {
        "id": "649044e9ee26edd5",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 140,
        "wires": []
    },
    {
        "id": "ba58e6065c73cc9b",
        "type": "file",
        "z": "fd0452957f4a0322",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 830,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0e44364e4a26c281",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/data/logs/GOODS-IN/'+ shortDate + '/inbound/test_' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 120,
        "wires": [
            [
                "ba58e6065c73cc9b",
                "649044e9ee26edd5"
            ]
        ]
    },
    {
        "id": "f71fa5a2e59667c1",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "PROCESS-02",
        "func": "var results = msg.payload;\n\nvar disposition, zone, store; // initilize the variable \nvar originalItems = []; // for copy metadata\nmsg.toProcess = 0; // starting time show scan item is zero\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.zone.value; // Get the value of zone \n    store = (str.slice(0,7)); // store length between 0 to 7\n    zone = (str.slice(10, 13)); // store length between 10 to 13\n    if(zone === \"101\"){\n        zone=\"SalesFloor\";\n    }\n    if(zone === \"102\"){\n        zone=\"StockRoom\";\n    }\n    disposition = \"sellable\";\n    //node.warn(\"Changed ZONE: \"+zon);\n\n    originalItems.push({serialNumber: results[j].serialNumber, Retail_ItemBatchID: results[j].udfs.Retail_ItemBatchID.value, deviceId: results[j].udfs.deviceId.value, Retail_Disposition: disposition, zone: zone, store: store, user: results[j].udfs.user.value, remarks: results[j].udfs.remarks.value }); //for copy metadata;    \n    msg.toProcess = 1; // if one item is show scan item is one \n\n    \n    \n}\nif(msg.toProcess===1){ // if process is one they can set the item data into item copy means copy the the data\n    msg.items_toCopy = originalItems; // for copy metadata\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "8c911a29c21ae97b"
            ]
        ]
    },
    {
        "id": "6499830184ad90fd",
        "type": "sqlite",
        "z": "fd0452957f4a0322",
        "mydb": "70042ab88621c9ba",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "get master",
        "x": 490,
        "y": 520,
        "wires": [
            [
                "e085b22bb9769234",
                "e969477918e3b383"
            ]
        ]
    },
    {
        "id": "8c911a29c21ae97b",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Matching EPCs",
        "func": "//Parse only skus\nvar original_epcs = msg.items_toCopy.map(item => item.serialNumber); // In this line epc map with serialNumber  \nvar epcsStrg = \"\",padded; // Initilize the new ecp string for new eps value \n// The below forEach loop to set all new serialNumber to new epc \noriginal_epcs.forEach((serialNumber, index) => {\n    epcsStrg += `'${serialNumber}',`;\n});\nepcsStrg = epcsStrg.slice(0,-1); // This line slice method -1 character in the epc string\n\n// prepare query to get all Assets for each item.\nmsg.topic = \"SELECT * FROM Inventory WHERE TagID IN (\"+epcsStrg+\");\"; \n//node.warn(msg.topic);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 520,
        "wires": [
            [
                "6499830184ad90fd"
            ]
        ]
    },
    {
        "id": "e085b22bb9769234",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Copy Metadata",
        "func": "var currentTime = new Date().getTime();\nvar ProcessedTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Riyadh\"});\n\nconst defaultMapping = [\n    {item:\"SKU\", asset:\"SKU\", copyFlag: true},\n    {item:\"SKU_original\", asset:\"SKU_original\", copyFlag: true},\n    {item:\"Supplier_Number\", asset:\"Supplier_Number\", copyFlag: true},\n    {item:\"Shipment_Number\", asset:\"Shipment_Number\", copyFlag: true},\n    {item:\"Purchase_Order\", asset:\"Purchase_Order\", copyFlag: true},\n    {item:\"Comments\", asset:\"Comments\", copyFlag: true},\n   // {item:\"refno\", asset:\"refno\", copyFlag: true}\n    ];\n\nvar assetResponse = msg.payload;\nvar allAssets = assetResponse.reduce((acc, current) => {\n    acc[current.TagID] = current;\n    return acc;\n},{});\n\nvar copiedData = copyAllMetadata(msg.items_toCopy, allAssets);\nnode.warn(copiedData);\n\nvar sqlvalues = \"\";\ncopiedData.forEach( item => {\n    if(item.validated === 1){\n        sqlvalues += `('${item.serialNumber}','${item.Retail_ItemBatchID}','${ProcessedTime}','${currentTime}','${item.SKU_original}','${item.SKU}','${item.Supplier_Number}','${item.Shipment_Number}','${item.store}','${item.SKU_original}','${item.Purchase_Order}','${item.Comments}','${item.zone}','${item.deviceId}','${item.user}','${item.remarks}','${item.check_flag}','${item.validated}'),`;\n    } else{\n        sqlvalues += `('${item.serialNumber}','${item.Retail_ItemBatchID}','${ProcessedTime}','${currentTime}','','','','','${item.store}','','','','${item.zone}','${item.deviceId}','${item.user}','${item.remarks}','${item.check_flag}','${item.validated}'),`;\n    }\n});\nsqlvalues = sqlvalues.slice(0,-1);\nmsg.topic = \"INSERT OR REPLACE INTO GoodsIn (TagID,Retail_ItemBatchID,date,dateEPOCH,SKU_original,SKU,Supplier_Number,Shipment_Number,store,refno,Purchase_Order,Comments,zone,deviceId,user,remarks,check_flag,validated) VALUES \"+sqlvalues+\";\";\n//node.warn(msg.topic);\nreturn msg;\n\n//Functions and constants\nfunction copyAllMetadata(items, assets){\n    var newItems = [];\n    items.forEach(item => {\n        item.check_flag = 1;\n        //node.warn(assets[item.TagID]);\n        if(assets[item.serialNumber]){\n            item.validated = 1;\n            newItems.push(copyMetadata(item, assets[item.serialNumber]));\n            \n        }\n        else{\n            item.validated = 0;\n            newItems.push(item);\n        }\n    });\n    \n    return newItems;\n}\n\nfunction copyMetadata(item, asset, dataMap){\n    dataMap = dataMap || defaultMapping;\n    var newItem = item;\n    var value = \"\";\n    dataMap.forEach(data => {\n        if(data.copyFlag)\n            if(asset[data.asset] !== \"\" || typeof asset[data.asset] !== \"undefined\"){\n                value = asset[data.asset];\n            }else{\n                value=\"\";\n            }\n            //newItem[data.item] = asset[data.asset] || newItem[data.item];\n            newItem[data.item] = value;\n    });\n    return newItem;\n} ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 520,
        "wires": [
            [
                "4398d392be56bac5"
            ]
        ]
    },
    {
        "id": "4398d392be56bac5",
        "type": "sqlite",
        "z": "fd0452957f4a0322",
        "mydb": "70042ab88621c9ba",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Insert or Replace Inventory",
        "x": 880,
        "y": 520,
        "wires": [
            [
                "643f0020e54fe5f8",
                "aa37e842035cd824"
            ]
        ]
    },
    {
        "id": "6779daa0f12d7e81",
        "type": "comment",
        "z": "fd0452957f4a0322",
        "name": "PUBLISHING OVER TO THE BACK OFFICE WORKFLOW",
        "info": "",
        "x": 290,
        "y": 840,
        "wires": []
    },
    {
        "id": "23a5e85c9262de8b",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Prepare message to BO",
        "func": "\nflow.set('retry',0);\nvar BOserver = global.get('BOserver');\nvar toBO = msg.toBO; // set msg of toBo data into toBo variable\n\n\nmsg.payload = toBO; // set toBo variable data into paylaod \nmsg.processed = toBO; \nmsg.url = BOserver+\"api/1.0.0/api/add_goods\"; \n\n//node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 960,
        "wires": [
            [
                "39927be6b0f9d2f9"
            ]
        ],
        "icon": "node-red/white-globe.png"
    },
    {
        "id": "39927be6b0f9d2f9",
        "type": "change",
        "z": "fd0452957f4a0322",
        "name": "Set headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\"apikey\":\"innovent@123\",\"Content-Type\":\"application/json\"}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 684,
        "y": 960,
        "wires": [
            [
                "9103dfde69c2c079"
            ]
        ]
    },
    {
        "id": "9103dfde69c2c079",
        "type": "delay",
        "z": "fd0452957f4a0322",
        "name": "1s rate",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 844,
        "y": 960,
        "wires": [
            [
                "cfa89d10be138f99",
                "82ec148ef10858be"
            ]
        ]
    },
    {
        "id": "d6be1ac164b340fa",
        "type": "switch",
        "z": "fd0452957f4a0322",
        "name": "3 retries",
        "property": "retry",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 934,
        "y": 1020,
        "wires": [
            [
                "0c053b12db80e151"
            ],
            [
                "2ff7cebf0014cd96",
                "70f734a7b8097c81"
            ]
        ]
    },
    {
        "id": "2ff7cebf0014cd96",
        "type": "delay",
        "z": "fd0452957f4a0322",
        "name": "10s rate",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 934,
        "y": 1080,
        "wires": [
            [
                "39927be6b0f9d2f9"
            ]
        ]
    },
    {
        "id": "cfa89d10be138f99",
        "type": "http request",
        "z": "fd0452957f4a0322",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1004,
        "y": 960,
        "wires": [
            [
                "19d6edaa3eedb90b",
                "ae949fdebb810847"
            ]
        ]
    },
    {
        "id": "19d6edaa3eedb90b",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Response",
        "func": "var results = msg.processed;\nmsg.retry = flow.get('retry');\nvar retryt=msg.retry;\nvar currentTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Dubai\"});\n\nif(msg.statusCode !== 200){\n    // for(i=0;i<results.length;i++){\n    //     count = results[i].epc;\n        msg.error = \" ----- ERROR - Backoffice SupplyChain Response for GI of \" +results.length+ \" items and GI \"+results[0].Retail_ItemBatchID+\" ---- \";\n        msg.response = \" Response received at: \" + currentTime + \" Dubai time. \" + msg.error + \" \\n \" + msg.statusCode + \" \\n \" + msg.payload;\n        node.warn(msg.error);\n        node.warn(msg.payload);\n        node.warn(msg.headers);\n        node.warn(msg.statusCode);\n        node.warn(msg.responseUrl);\n   // }\n    //node.warn(\"retry before: \"+msg.retry);\n    //node.warn(\"retry variable: \"+retryt);\n    retryt = retryt+1;\n    msg.retry=retryt;\n    flow.set('retry',retryt);\n    //node.warn(\"retry after adding 1: \"+msg.retry);\n    if(msg.retry === 3){\n        msg.retry=0;\n        \n    }\n    //node.warn(\"retry after evaluating: \"+msg.retry);\n    msg.payload=msg.processed;\n    return msg;\n}\nelse{\n    //for(j=0;j<results.length;j++){\n        //count = results[j].epc;\n        msg.response = \" ----- SUCCESSFUL - Backoffice Response for GI of \" + results.length + \" items and GI \"+results[0].Retail_ItemBatchID+\" ---- \";\n        msg.response = \" Response received at: \" + currentTime + \" Dubai time. \"+ msg.response + \" \\n \" + msg.statusCode + \" \\n \" + msg.payload;\n        node.warn(msg.response);\n    //}\n    msg.retry=0;\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1174,
        "y": 960,
        "wires": [
            [
                "d6be1ac164b340fa",
                "e3cc4c545c3955a6"
            ]
        ]
    },
    {
        "id": "70f734a7b8097c81",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "fd0452957f4a0322",
        "name": "To Guillermo",
        "account": "c017b9497bab797f",
        "text": "error",
        "inputtypemessage": "msg",
        "rejectssl": false,
        "x": 1170,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "0c053b12db80e151",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Backoffice Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/flows/logs/GOODS-IN/'+ shortDate + '/backoffice/GI_backoffice_pushed_' + initialTime + '.txt';\nmsg.filename = filename;\nvar results = msg.payload[0].length;\nnode.warn(\"GOODS-IN - Publishing \"+ results +\" records at backoffice\")\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1080,
        "wires": [
            [
                "8f69295dcd2895ec"
            ]
        ]
    },
    {
        "id": "8f69295dcd2895ec",
        "type": "file",
        "z": "fd0452957f4a0322",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 1350,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "f012f619397b343e",
        "type": "link in",
        "z": "fd0452957f4a0322",
        "name": "[IN] GI TO BO",
        "links": [
            "9d99451560cc8fc8"
        ],
        "x": 100,
        "y": 960,
        "wires": [
            [
                "23a5e85c9262de8b"
            ]
        ]
    },
    {
        "id": "643f0020e54fe5f8",
        "type": "function",
        "z": "fd0452957f4a0322",
        "name": "Response ToBO",
        "func": "var ProcessedTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Riyadh\"});\nvar results = msg.items_toCopy; // set all item_toCopy data into result\nvar toUpdate = []; // Initilize a new array \n// In the below loop  get all the required fields data from result\nfor(var i=0;i<results.length;i++){\n    \n    var toBO = {  \n            \"epc\": results[i].serialNumber ? results[i].serialNumber : ``,\n            \"Retail_ItemBatchID\": results[i].Retail_ItemBatchID ? results[i].Retail_ItemBatchID : ``,\n\t\t\t\"date\": ProcessedTime,\n\t\t\t\"Supplier_Number\": results[i].Supplier_Number ? results[i].Supplier_Number : ``,\n\t\t\t\"Shipment_Number\": results[i].Shipment_Number ? results[i].Shipment_Number : ``,\n\t\t\t\"Store\": results[i].store ? results[i].store : ``,\n\t\t\t\"refno\": results[i].SKU_original ? results[i].SKU_original : ``,\n\t\t\t\"Purchase_Order\": results[i].Purchase_Order ? results[i].Purchase_Order : ``,\n\t\t\t\"Comments\": results[i].Comments ? results[i].Comments : ``,\n\t\t\t\"id\": results[i].user ? results[i].user : ``,\n\t\t\t\"remarks\": results[i].remarks ? results[i].remarks : ``,\n    };\n    toUpdate.push(toBO); // now push all toBo data into new toUpdate array\n}\n\nmsg.toBO = toUpdate; // again set toBo data equals to toUpdte \nreturn msg; // return the toBo data \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 520,
        "wires": [
            [
                "80280576db2e605e",
                "9d99451560cc8fc8"
            ]
        ]
    },
    {
        "id": "9d99451560cc8fc8",
        "type": "link out",
        "z": "fd0452957f4a0322",
        "name": "[OUT] GI TO BO",
        "mode": "link",
        "links": [
            "f012f619397b343e"
        ],
        "x": 1295,
        "y": 520,
        "wires": []
    },
    {
        "id": "ae949fdebb810847",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1170,
        "y": 900,
        "wires": []
    },
    {
        "id": "80280576db2e605e",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 440,
        "wires": []
    },
    {
        "id": "aa37e842035cd824",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "e3cc4c545c3955a6",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1350,
        "y": 920,
        "wires": []
    },
    {
        "id": "82ec148ef10858be",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 970,
        "y": 880,
        "wires": []
    },
    {
        "id": "e969477918e3b383",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 630,
        "y": 560,
        "wires": []
    },
    {
        "id": "6bbb42c4cd76dde9",
        "type": "debug",
        "z": "fd0452957f4a0322",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 220,
        "wires": []
    },
    {
        "id": "c72fadad549d926c",
        "type": "http in",
        "z": "9cf062cd8fdccf3c",
        "name": "SAVE COUNTED ITEMS - OLD",
        "url": "/COUNTEDITEMS",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "8f253e77cba8fe1d",
                "307ffd175c292d6d"
            ]
        ]
    },
    {
        "id": "5e88870f6cec9934",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized CycleCount transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized CycleCount transaction, proceeding... \");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "9ca69fe29bfec99f"
            ]
        ]
    },
    {
        "id": "a1ee7fba5e1993a0",
        "type": "http response",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "x": 1150,
        "y": 120,
        "wires": []
    },
    {
        "id": "9ca69fe29bfec99f",
        "type": "switch",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "403",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 853,
        "y": 180,
        "wires": [
            [
                "a1ee7fba5e1993a0"
            ],
            [
                "d172d3a32e79897b",
                "4afabe5f47526776",
                "71b314a3fe3f3ab7"
            ]
        ]
    },
    {
        "id": "d172d3a32e79897b",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Prepare Item Messages",
        "func": "var results = msg.payload; //set all msg data equal to result variable\nvar counterg = Math.ceil((results.length) / 50); //Math.ceil used for  returns the double value that is greater than or equal to the argument and is equal to the nearest mathematical integer\nglobal.set(\"counter\",counterg); // initilize the global variables to access anywhere in flow\nglobal.set(\"toprocess\",results.length);\nglobal.set(\"tmp\",0);\n\n//node.warn(\"counter divided by 50: \" + counterg);\nvar currentTime = new Date().getTime();\nvar toUpdate = [], // initilize the arrays \n    toUpdatecc = [];\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n//In below loop user can get all zone value from result \nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.Zone.value; \n    var stor = (str.slice(0,7)); // using slice method user set the length of stor string between 0 to 7 character\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    //node.warn(\"Changed ZONE: \"+zon);\n    var CountID = results[j].udfs.Retail_CycleCountID.value; // there user get Retail_cycleCountID from result \n    \n    var itemToUpdate = {  // initilize the fields which is update \n                \"thingTypeCode\" : \"ITEM\",\n                \"serialNumber\": results[j].serialNumber,\n                \"timestamp\":currentTime,\n\t\t\t\t\"Retail_CycleCountDate\": currentTime,\n\t\t\t\t\"Retail_CycleCountID\": results[j].udfs.Retail_CycleCountID.value,\n\t\t\t\t\"Retail_CycleCountStore\": stor,\n\t\t\t\t\"UUIDMobile\": results[j].udfs.deviceId.value,\n\t\t\t\t\"sourceModule\": \"cycleCount\",\n\t\t\t\t\"zone\": results[j].udfs.Zone.value,\n\t\t\t\t\"source\": \"MOBILE\",\n\t\t\t\t\"user\": results[j].udfs.user.value,\n\t\t\t\t\"PartialCountAsQty\": \"1\"\n            };\n    toUpdate.push(itemToUpdate); // push all update items fields array into toUpdate array \n    var itemccToUpdate = {  // These are the items which is update after cycle_Count\n                \"thingTypeCode\" : \"ITEMCC\",\n                \"serialNumber\": stor+\"_\"+results[j].serialNumber,\n                \"epc\": results[j].serialNumber,\n                \"timestamp\":currentTime,\n\t\t\t\t\"Retail_CycleCountDate\": currentTime,\n\t\t\t\t\"Retail_CycleCountID\": results[j].udfs.Retail_CycleCountID.value,\n\t\t\t\t\"Retail_CycleCountStore\": stor,\n\t\t\t\t\"UUIDMobile\": results[j].udfs.deviceId.value,\n\t\t\t\t\"sourceModule\": \"cycleCount\",\n\t\t\t\t\"zonename\": zon,\n\t\t\t\t\"source\": \"MOBILE\",\n\t\t\t\t\"user\": results[j].udfs.user.value,\n\t\t\t\t\"PartialCountAsQty\": \"1\"\n            };\n    toUpdatecc.push(itemccToUpdate); // now there push again itemccToUdate into toUpdate array \n    if(results[j].SKU){ // check the SKU from result and push all it's detail\n        originalSkusItems.push({SKU_original: results[j].SKU, serialNumber: results[j].serialNumber, Retail_CycleCountDate: currentTime, Retail_CycleCountID: results[j].udfs.Retail_CycleCountID.value}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    //if(sqlvalues !== \"\"){\n    //    if((sqlvalues.slice(-1))===\")\"){\n    //                sqlvalues+=\",\";\n    //    }\n    //    sqlvalues+= \"('\"+results[j].serialNumber+\"',\"+currentTime+\",'\"+results[j].udfs.Retail_CycleCountID.value+\"','\"+results[j].SKU+\"','sellable','\"+zon+\"','\"+stor+\"')\";\n    //   \n    //}else{\n    //    sqlvalues = \"('\"+results[j].serialNumber+\"',\"+currentTime+\",'\"+results[j].udfs.Retail_CycleCountID.value+\"','\"+results[j].SKU+\"','sellable','\"+zon+\"','\"+stor+\"')\";\n    //}\n}\n//msg.topic = \"INSERT OR REPLACE INTO CountedItems\"+stor+\" (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,Retail_Disposition,zone,store) VALUES \"+sqlvalues+\";\";\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\nnode.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS for Retail_CycleCountID: \"+CountID+\" and STORE: \"+msg.store+\" ****** \");\nmsg.payloadcc=toUpdatecc; // show the payload of item fields which is update on at the time of cycleCount\nmsg.payload=toUpdate; // On this line show the payload of overall update fields\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 220,
        "wires": [
            [
                "ac5803d71d96e899"
            ]
        ]
    },
    {
        "id": "4afabe5f47526776",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Processing",
        "func": "var results = msg.payload; //set all msg data equal to result variable\nvar tagsd = \"\",  // declear tagsD and detail arrays \n    detail = [];\n    \nif(results[0].udfs.appVersion){ // check the ap version field from udfs if \n// app version is 0 he push the epc into detail array \n    for(var i=0;i<results.length;i++){\n        tagsd = {\n            \"epc\":results[i].serialNumber\n        };\n        detail.push(tagsd);\n    }\n    msg.payload = {\"response\":\"Authorized. Processing Stock Count.\",\"total\": results.length,\"tags\":detail};\n}\nelse{\n    msg.payload = {\"response\":\"Authorized. Processing Stock Count for \"+results.length+\" items\"};\n}\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 180,
        "wires": [
            [
                "a1ee7fba5e1993a0"
            ]
        ]
    },
    {
        "id": "71b314a3fe3f3ab7",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 220,
        "wires": []
    },
    {
        "id": "307ffd175c292d6d",
        "type": "Load Balance",
        "z": "9cf062cd8fdccf3c",
        "defaultcapacity": 100,
        "dynamic": "6409711c.8bf87",
        "hashType": "pearson",
        "mps": "",
        "name": "",
        "noavailability": "admin",
        "nocapacity": "admin",
        "outputs": 4,
        "routes": "3",
        "selection": "next",
        "sourceProperty": "msg.topic",
        "sticky": "",
        "x": 400,
        "y": 200,
        "wires": [
            [
                "b751871397917872"
            ],
            [
                "5e88870f6cec9934"
            ],
            [
                "cbfa199babc2f13e"
            ],
            [
                "50a9c4aee8c82108"
            ]
        ]
    },
    {
        "id": "074a99725c0d6c2d",
        "type": "file",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 630,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8f253e77cba8fe1d",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/data/logs/CYCLECOUNT/'+ shortDate + '/inbound/' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "b751871397917872",
                "074a99725c0d6c2d"
            ]
        ]
    },
    {
        "id": "b751871397917872",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 630,
        "y": 120,
        "wires": []
    },
    {
        "id": "cbfa199babc2f13e",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized CycleCount transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized CycleCount transaction, proceeding... \");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "6be9562db8f0c237"
            ]
        ]
    },
    {
        "id": "7852c2f5c8e84e25",
        "type": "http response",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "x": 1150,
        "y": 300,
        "wires": []
    },
    {
        "id": "6be9562db8f0c237",
        "type": "switch",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "403",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 853,
        "y": 360,
        "wires": [
            [
                "7852c2f5c8e84e25"
            ],
            [
                "2699a8c2e7a4b86a",
                "d47501b9fcd3e890",
                "36f19476576aa11a"
            ]
        ]
    },
    {
        "id": "2699a8c2e7a4b86a",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Prepare Item Messages",
        "func": "results = msg.payload;\nvar counterg = Math.ceil((results.length)/50);\nglobal.set(\"counter\",counterg);\nglobal.set(\"toprocess\",results.length);\nglobal.set(\"tmp\",0);\n\n//node.warn(\"counter divided by 50: \" + counterg);\nvar currentTime = new Date().getTime();\nvar toUpdate = [],\n    toUpdatecc = [];\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.Zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    //node.warn(\"Changed ZONE: \"+zon);\n    var CountID = results[j].udfs.Retail_CycleCountID.value;\n    \n    var itemToUpdate = {  \n                \"thingTypeCode\" : \"ITEM\",\n                \"serialNumber\": results[j].serialNumber,\n                \"timestamp\":currentTime,\n\t\t\t\t\"Retail_CycleCountDate\": currentTime,\n\t\t\t\t\"Retail_CycleCountID\": results[j].udfs.Retail_CycleCountID.value,\n\t\t\t\t\"Retail_CycleCountStore\": stor,\n\t\t\t\t\"UUIDMobile\": results[j].udfs.deviceId.value,\n\t\t\t\t\"sourceModule\": \"cycleCount\",\n\t\t\t\t\"zone\": results[j].udfs.Zone.value,\n\t\t\t\t\"source\": \"MOBILE\",\n\t\t\t\t\"user\": results[j].udfs.user.value,\n\t\t\t\t\"PartialCountAsQty\": \"1\"\n            };\n    toUpdate.push(itemToUpdate);\n    var itemccToUpdate = {  \n                \"thingTypeCode\" : \"ITEMCC\",\n                \"serialNumber\": stor+\"_\"+results[j].serialNumber,\n                \"epc\": results[j].serialNumber,\n                \"timestamp\":currentTime,\n\t\t\t\t\"Retail_CycleCountDate\": currentTime,\n\t\t\t\t\"Retail_CycleCountID\": results[j].udfs.Retail_CycleCountID.value,\n\t\t\t\t\"Retail_CycleCountStore\": stor,\n\t\t\t\t\"UUIDMobile\": results[j].udfs.deviceId.value,\n\t\t\t\t\"sourceModule\": \"cycleCount\",\n\t\t\t\t\"zonename\": zon,\n\t\t\t\t\"source\": \"MOBILE\",\n\t\t\t\t\"user\": results[j].udfs.user.value,\n\t\t\t\t\"PartialCountAsQty\": \"1\"\n            };\n    toUpdatecc.push(itemccToUpdate);\n    if(results[j].SKU){\n        originalSkusItems.push({SKU_original: results[j].SKU, serialNumber: results[j].serialNumber, Retail_CycleCountDate: currentTime, Retail_CycleCountID: results[j].udfs.Retail_CycleCountID.value}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    //if(sqlvalues !== \"\"){\n    //    if((sqlvalues.slice(-1))===\")\"){\n    //                sqlvalues+=\",\";\n    //    }\n    //    sqlvalues+= \"('\"+results[j].serialNumber+\"',\"+currentTime+\",'\"+results[j].udfs.Retail_CycleCountID.value+\"','\"+results[j].SKU+\"','sellable','\"+zon+\"','\"+stor+\"')\";\n    //   \n    //}else{\n    //    sqlvalues = \"('\"+results[j].serialNumber+\"',\"+currentTime+\",'\"+results[j].udfs.Retail_CycleCountID.value+\"','\"+results[j].SKU+\"','sellable','\"+zon+\"','\"+stor+\"')\";\n    //}\n}\n//msg.topic = \"INSERT OR REPLACE INTO CountedItems\"+stor+\" (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,Retail_Disposition,zone,store) VALUES \"+sqlvalues+\";\";\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\nnode.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS for Retail_CycleCountID: \"+CountID+\" and STORE: \"+msg.store+\" ****** \");\nmsg.payloadcc=toUpdatecc;\nmsg.payload=toUpdate;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 400,
        "wires": [
            [
                "f83154f9e9c143a3"
            ]
        ]
    },
    {
        "id": "d47501b9fcd3e890",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Processing",
        "func": "results = msg.payload;\nvar tagsd = \"\",\n    detail = [];\n    \nif(results[0].udfs.appVersion){\n    for(i=0;i<results.length;i++){\n        tagsd = {\n            \"epc\":results[i].serialNumber\n        };\n        detail.push(tagsd);\n    }\n    msg.payload = {\"response\":\"Authorized. Processing Stock Count.\",\"total\": results.length,\"tags\":detail};\n}\nelse{\n    msg.payload = {\"response\":\"Authorized. Processing Stock Count for \"+results.length+\" items\"};\n}\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 360,
        "wires": [
            [
                "7852c2f5c8e84e25"
            ]
        ]
    },
    {
        "id": "36f19476576aa11a",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 400,
        "wires": []
    },
    {
        "id": "50a9c4aee8c82108",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized CycleCount transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized CycleCount transaction, proceeding... \");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 540,
        "wires": [
            [
                "1402c3e7d39f3781"
            ]
        ]
    },
    {
        "id": "ae3ecb956448281c",
        "type": "http response",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "x": 1150,
        "y": 480,
        "wires": []
    },
    {
        "id": "1402c3e7d39f3781",
        "type": "switch",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "403",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 853,
        "y": 540,
        "wires": [
            [
                "ae3ecb956448281c"
            ],
            [
                "7e83b4d004543f04",
                "ff0081bd53bb364f",
                "3f11701ef01cd6b8"
            ]
        ]
    },
    {
        "id": "7e83b4d004543f04",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Prepare Item Messages",
        "func": "results = msg.payload;\nvar counterg = Math.ceil((results.length)/50);\nglobal.set(\"counter\",counterg);\nglobal.set(\"toprocess\",results.length);\nglobal.set(\"tmp\",0);\n\n//node.warn(\"counter divided by 50: \" + counterg);\nvar currentTime = new Date().getTime();\nvar toUpdate = [],\n    toUpdatecc = [];\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.Zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    //node.warn(\"Changed ZONE: \"+zon);\n    var CountID = results[j].udfs.Retail_CycleCountID.value;\n    \n    var itemToUpdate = {  \n                \"thingTypeCode\" : \"ITEM\",\n                \"serialNumber\": results[j].serialNumber,\n                \"timestamp\":currentTime,\n\t\t\t\t\"Retail_CycleCountDate\": currentTime,\n\t\t\t\t\"Retail_CycleCountID\": results[j].udfs.Retail_CycleCountID.value,\n\t\t\t\t\"Retail_CycleCountStore\": stor,\n\t\t\t\t\"UUIDMobile\": results[j].udfs.deviceId.value,\n\t\t\t\t\"sourceModule\": \"cycleCount\",\n\t\t\t\t\"zone\": results[j].udfs.Zone.value,\n\t\t\t\t\"source\": \"MOBILE\",\n\t\t\t\t\"user\": results[j].udfs.user.value,\n\t\t\t\t\"PartialCountAsQty\": \"1\"\n            };\n    toUpdate.push(itemToUpdate);\n    var itemccToUpdate = {  \n                \"thingTypeCode\" : \"ITEMCC\",\n                \"serialNumber\": stor+\"_\"+results[j].serialNumber,\n                \"epc\": results[j].serialNumber,\n                \"timestamp\":currentTime,\n\t\t\t\t\"Retail_CycleCountDate\": currentTime,\n\t\t\t\t\"Retail_CycleCountID\": results[j].udfs.Retail_CycleCountID.value,\n\t\t\t\t\"Retail_CycleCountStore\": stor,\n\t\t\t\t\"UUIDMobile\": results[j].udfs.deviceId.value,\n\t\t\t\t\"sourceModule\": \"cycleCount\",\n\t\t\t\t\"zonename\": zon,\n\t\t\t\t\"source\": \"MOBILE\",\n\t\t\t\t\"user\": results[j].udfs.user.value,\n\t\t\t\t\"PartialCountAsQty\": \"1\"\n            };\n    toUpdatecc.push(itemccToUpdate);\n    if(results[j].SKU){\n        originalSkusItems.push({SKU_original: results[j].SKU, serialNumber: results[j].serialNumber, Retail_CycleCountDate: currentTime, Retail_CycleCountID: results[j].udfs.Retail_CycleCountID.value}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    //if(sqlvalues !== \"\"){\n    //    if((sqlvalues.slice(-1))===\")\"){\n    //                sqlvalues+=\",\";\n    //    }\n    //    sqlvalues+= \"('\"+results[j].serialNumber+\"',\"+currentTime+\",'\"+results[j].udfs.Retail_CycleCountID.value+\"','\"+results[j].SKU+\"','sellable','\"+zon+\"','\"+stor+\"')\";\n    //   \n    //}else{\n    //    sqlvalues = \"('\"+results[j].serialNumber+\"',\"+currentTime+\",'\"+results[j].udfs.Retail_CycleCountID.value+\"','\"+results[j].SKU+\"','sellable','\"+zon+\"','\"+stor+\"')\";\n    //}\n}\n//msg.topic = \"INSERT OR REPLACE INTO CountedItems\"+stor+\" (TagID,Retail_CycleCountDate,Retail_CycleCountID,SKU_original,Retail_Disposition,zone,store) VALUES \"+sqlvalues+\";\";\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\nnode.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS for Retail_CycleCountID: \"+CountID+\" and STORE: \"+msg.store+\" ****** \");\nmsg.payloadcc=toUpdatecc;\nmsg.payload=toUpdate;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "c08e6bf09c1e51f2"
            ]
        ]
    },
    {
        "id": "ff0081bd53bb364f",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Processing",
        "func": "results = msg.payload;\nvar tagsd = \"\",\n    detail = [];\n    \nif(results[0].udfs.appVersion){\n    for(i=0;i<results.length;i++){\n        tagsd = {\n            \"epc\":results[i].serialNumber\n        };\n        detail.push(tagsd);\n    }\n    msg.payload = {\"response\":\"Authorized. Processing Stock Count.\",\"total\": results.length,\"tags\":detail};\n}\nelse{\n    msg.payload = {\"response\":\"Authorized. Processing Stock Count for \"+results.length+\" items\"};\n}\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 540,
        "wires": [
            [
                "ae3ecb956448281c"
            ]
        ]
    },
    {
        "id": "3f11701ef01cd6b8",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 580,
        "wires": []
    },
    {
        "id": "ca47f2b0054160ce",
        "type": "http in",
        "z": "9cf062cd8fdccf3c",
        "name": "SAVE COUNTED ITEMS",
        "url": "/RUBAIYATCOUNTEDITEMS",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "8f253e77cba8fe1d",
                "307ffd175c292d6d"
            ]
        ]
    },
    {
        "id": "266483327e703ce3",
        "type": "comment",
        "z": "9cf062cd8fdccf3c",
        "name": "Get Counted Items that were posted when doing a Cycle Count",
        "info": "",
        "x": 270,
        "y": 840,
        "wires": []
    },
    {
        "id": "dd579681939049de",
        "type": "comment",
        "z": "9cf062cd8fdccf3c",
        "name": "Clears Counted Items and SOH on a daily basis",
        "info": "",
        "x": 220,
        "y": 1160,
        "wires": []
    },
    {
        "id": "7f9385b79aa3277e",
        "type": "subflow:c184857f94f92d67",
        "z": "9cf062cd8fdccf3c",
        "name": "Copy Metadata",
        "x": 1500,
        "y": 220,
        "wires": [
            [
                "e432333ecd9b87a9"
            ]
        ]
    },
    {
        "id": "e432333ecd9b87a9",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1650,
        "y": 220,
        "wires": []
    },
    {
        "id": "603130d35ae040f1",
        "type": "subflow:c184857f94f92d67",
        "z": "9cf062cd8fdccf3c",
        "name": "Copy Metadata",
        "x": 1500,
        "y": 400,
        "wires": [
            [
                "367bc077bcebda62"
            ]
        ]
    },
    {
        "id": "367bc077bcebda62",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1650,
        "y": 400,
        "wires": []
    },
    {
        "id": "cedf5c52223ebce5",
        "type": "subflow:c184857f94f92d67",
        "z": "9cf062cd8fdccf3c",
        "name": "Copy Metadata",
        "x": 1500,
        "y": 580,
        "wires": [
            [
                "b139627e1f8be804"
            ]
        ]
    },
    {
        "id": "b139627e1f8be804",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1650,
        "y": 580,
        "wires": []
    },
    {
        "id": "fbeaae4ebd0ec2fd",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Validate Request 2.0",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar currentTime = new Date().getTime();\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    msg.send=0;\n    return msg;\n}\nelse{\n    node.warn(\"Authorized COUNTED ITEMS request, proceeding... \");\n    var results = msg.payload; //set all msg data equal to result variable\n    var store = results.StoreID, //initilize all fields which data require to get from db\n        DepartmentID,\n        Brand,\n        Color,\n        Style,\n        Size,\n        zone,\n        queryResults = \"check_flag=1 AND validated=1\";\n    if(results.DepartmentID){ // if user Select DepartmentID \n        DepartmentID=results.DepartmentID;\n        queryResults+=\" AND DepartmentID='\"+DepartmentID+\"'\"; // Generate the query to get data against departmentId field\n    }\n    if(results.Brand){ // if user select brand fields and he check the brand filter \n        Brand=results.Brand;\n        queryResults+=\" AND Brand='\"+Brand+\"'\"; // generate the query to get data against brand field\n    }\n\n    // as same as user can get color, style, size and zone field data from db table\n    if(results.Color){\n        Color=results.Color;\n        queryResults+=\" AND Color='\"+Color+\"'\";\n    }\n    if(results.Style){\n        Style=results.Style;\n        queryResults+=\" AND Style='\"+Style+\"'\";\n    }\n    if(results.Size){\n        Size=results.Size;\n        queryResults+=\" AND Size='\"+Size+\"'\";\n    }\n    if(results.zone){\n        zone=results.zone;\n        queryResults+=\" AND zone='\"+zone+\"'\";\n    }\n    \n    msg.topic = \"SELECT * FROM CountedItems0001002\"+store+\" WHERE \"+queryResults+\";\";// here get all above fields data in singal query \n    msg.send=1;\n    return msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 940,
        "wires": [
            [
                "bf7ebafbe8187626"
            ]
        ]
    },
    {
        "id": "6332fbf41b46eb9b",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Response 2.0",
        "func": "var results = msg.payload;\nvar currentTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Dubai\"});\n\nvar toUpdate = [];\nfor(var j=0;j<results.length;j++){\n    var ItemToUpdate = {  \n            \"SKU_original\" : results[j].SKU_original,\n            \"Retail_CycleCountDate\": results[j].Retail_CycleCountDate,\n            \"Description\": results[j].Description,\n\t\t\t\"Size\": results[j].Size,\n\t\t\t\"Color\": results[j].Color,\n\t\t\t\"store\": results[j].store,\n\t\t\t\"Retail_Disposition\": results[j].Retail_Disposition,\n\t\t\t\"Brand\": results[j].Brand,\n\t\t\t\"Retail_CycleCountID\": results[j].Retail_CycleCountID,\n\t\t\t\"zone\": results[j].zone,\n\t\t\t\"Price\": results[j].Price,\n\t\t\t\"TotalPrice\": results[j].TotalPrice,\n\t\t\t\"TagID\": results[j].TagID,\n\t\t\t\"Style\": results[j].Style,\n\t\t\t\"DepartmentID\": results[j].DepartmentID,\n\t\t\t\"SKU\": results[j].SKU,\n\t\t\t\"Season\": results[j].Season\n        };\n    toUpdate.push(ItemToUpdate);\n}\n\nmsg.response = \" Response received at: \" + currentTime + \" Dubai time. ----- SUCCESSFUL - Get Counted Items successful for \"+ results.length+\" Items ---- \";\nnode.warn(msg.response);\n\nmsg.payload = {total:toUpdate.length,results:toUpdate};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 940,
        "wires": [
            [
                "6eebd34e3c0db632"
            ]
        ]
    },
    {
        "id": "6eebd34e3c0db632",
        "type": "http response",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "x": 950,
        "y": 940,
        "wires": []
    },
    {
        "id": "f0d258fb3b68dfaa",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 750,
        "y": 980,
        "wires": []
    },
    {
        "id": "bf7ebafbe8187626",
        "type": "sqlite",
        "z": "9cf062cd8fdccf3c",
        "mydb": "70042ab88621c9ba",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Get COUNTED",
        "x": 600,
        "y": 940,
        "wires": [
            [
                "6332fbf41b46eb9b",
                "f0d258fb3b68dfaa"
            ]
        ]
    },
    {
        "id": "ac5803d71d96e899",
        "type": "switch",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "property": "toProcess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1330,
        "y": 220,
        "wires": [
            [
                "7f9385b79aa3277e"
            ]
        ]
    },
    {
        "id": "f83154f9e9c143a3",
        "type": "switch",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "property": "toProcess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1330,
        "y": 400,
        "wires": [
            [
                "603130d35ae040f1"
            ]
        ]
    },
    {
        "id": "c08e6bf09c1e51f2",
        "type": "switch",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "property": "toProcess",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1330,
        "y": 580,
        "wires": [
            [
                "cedf5c52223ebce5"
            ]
        ]
    },
    {
        "id": "b3f9116f3edd7526",
        "type": "sqlite",
        "z": "9cf062cd8fdccf3c",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Delete COUNT",
        "x": 820,
        "y": 1260,
        "wires": [
            [
                "d4b7c7772f47a831"
            ]
        ]
    },
    {
        "id": "7c86cc2bf7e4b6c1",
        "type": "inject",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 1240,
        "wires": [
            [
                "4438a078687c08c4"
            ]
        ]
    },
    {
        "id": "4438a078687c08c4",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Deletes",
        "func": "msg.payload = [];\n// clear all the selected counted items SOH on daily bases.It's depend on user which soh he wsnts to clear \n//We need to clear SOH because SOH is posted on daily bases\nmsg.payload[0]=\"delete from CountedItems0001005;\";\nmsg.payload[1]=\"delete from CountedItems0001002;\";\nmsg.payload[2]=\"delete from CountedItems0002154;\";\nmsg.payload[3]=\"delete from CountedItems0001153;\";\nmsg.payload[4]=\"delete from CountedItems0002156;\";\nmsg.payload[5]=\"delete from CountedItems0002162;\";\nmsg.payload[6]=\"delete from CountedItems0002166;\";\nmsg.payload[7]=\"delete from CountedItems0001124;\";\nmsg.payload[8]=\"delete from CountedItems0001126;\";\nmsg.payload[9]=\"delete from CountedItems0001127;\";\nmsg.payload[10]=\"delete from CountedItems0001130;\";\nmsg.payload[11]=\"delete from CountedItems0001134;\";\nmsg.payload[12]=\"delete from CountedItems0001135;\";\nmsg.payload[13]=\"delete from CountedItems0001139;\";\nmsg.payload[14]=\"delete from CountedItems0001142;\";\nmsg.payload[15]=\"delete from CountedItems0001147;\";\nmsg.payload[16]=\"delete from CountedItems0002151;\";\nmsg.payload[17]=\"delete from CountedItems0001150;\";\nmsg.payload[18]=\"delete from CountedItems0001151;\";\nmsg.payload[19]=\"delete from CountedItems0002152;\";\nmsg.payload[20]=\"delete from CountedItems0001006;\";\nmsg.payload[21]=\"delete from CountedItems0001152;\";\nmsg.payload[22]=\"delete from CountedItems0001106;\";\nmsg.payload[23]=\"delete from CountedItems0002155;\";\nmsg.payload[24]=\"delete from CountedItems0001108;\";\nmsg.payload[25]=\"delete from CountedItems0001155;\";\nmsg.payload[26]=\"delete from CountedItems0001109;\";\nmsg.payload[27]=\"delete from CountedItems0001156;\";\nmsg.payload[28]=\"delete from CountedItems0001119;\";\nmsg.payload[29]=\"delete from CountedItems0001158;\";\nmsg.payload[30]=\"delete from CountedItems0001952;\";\nmsg.payload[31]=\"delete from CountedItems0002168;\";\nmsg.payload[32]=\"delete from CountedItems0002146;\";\nmsg.payload[33]=\"delete from CountedItems0009275;\";\nmsg.payload[34]=\"delete from CountedItems0002139;\";\nmsg.payload[35]=\"delete from CountedItems0004005;\";\nmsg.payload[36]=\"delete from CountedItems0002124;\";\nmsg.payload[37]=\"delete from CountedItems0002172;\";\nmsg.payload[38]=\"delete from CountedItems0002171;\";\nmsg.payload[39]=\"delete from CountedItems0002103;\";\nmsg.payload[40]=\"delete from CountedItems0002115;\";\nmsg.payload[41]=\"delete from CountedItems0002954;\";\nmsg.payload[42]=\"delete from CountedItems0004001;\";\nmsg.payload[43]=\"delete from CountedItems0002133;\";\nmsg.payload[44]=\"delete from CountedItems0002142;\";\nmsg.payload[45]=\"delete from CountedItems0009297;\";\nmsg.payload[46]=\"delete from CountedItems0009901;\";\nmsg.payload[47]=\"delete from CountedItems0002148;\";\nmsg.payload[48]=\"delete from CountedItems0001148;\";\nmsg.payload[49]=\"delete from CountedItems0001149;\";\nmsg.payload[50]=\"delete from CountedItems0002149;\";\nmsg.payload[51]=\"delete from CountedItems0002150;\";\nmsg.payload[52]=\"delete from CountedItemsUnknown0001005;\";\nmsg.payload[53]=\"delete from CountedItemsUnknown0001002;\";\nmsg.payload[54]=\"delete from CountedItemsUnknown0002154;\";\nmsg.payload[55]=\"delete from CountedItemsUnknown0001153;\";\nmsg.payload[56]=\"delete from CountedItemsUnknown0002156;\";\nmsg.payload[57]=\"delete from CountedItemsUnknown0002162;\";\nmsg.payload[58]=\"delete from CountedItemsUnknown0002166;\";\nmsg.payload[59]=\"delete from CountedItemsUnknown0001124;\";\nmsg.payload[60]=\"delete from CountedItemsUnknown0001126;\";\nmsg.payload[61]=\"delete from CountedItemsUnknown0001127;\";\nmsg.payload[62]=\"delete from CountedItemsUnknown0001130;\";\nmsg.payload[63]=\"delete from CountedItemsUnknown0001134;\";\nmsg.payload[64]=\"delete from CountedItemsUnknown0001135;\";\nmsg.payload[65]=\"delete from CountedItemsUnknown0001139;\";\nmsg.payload[66]=\"delete from CountedItemsUnknown0001142;\";\nmsg.payload[67]=\"delete from CountedItemsUnknown0001147;\";\nmsg.payload[68]=\"delete from CountedItemsUnknown0002151;\";\nmsg.payload[69]=\"delete from CountedItemsUnknown0001150;\";\nmsg.payload[70]=\"delete from CountedItemsUnknown0001151;\";\nmsg.payload[71]=\"delete from CountedItemsUnknown0002152;\";\nmsg.payload[72]=\"delete from CountedItemsUnknown0001006;\";\nmsg.payload[73]=\"delete from CountedItemsUnknown0001152;\";\nmsg.payload[74]=\"delete from CountedItemsUnknown0001106;\";\nmsg.payload[75]=\"delete from CountedItemsUnknown0002155;\";\nmsg.payload[76]=\"delete from CountedItemsUnknown0001108;\";\nmsg.payload[77]=\"delete from CountedItemsUnknown0001155;\";\nmsg.payload[78]=\"delete from CountedItemsUnknown0001109;\";\nmsg.payload[79]=\"delete from CountedItemsUnknown0001156;\";\nmsg.payload[80]=\"delete from CountedItemsUnknown0001119;\";\nmsg.payload[81]=\"delete from CountedItemsUnknown0001158;\";\nmsg.payload[82]=\"delete from CountedItemsUnknown0001952;\";\nmsg.payload[83]=\"delete from CountedItemsUnknown0002168;\";\nmsg.payload[84]=\"delete from CountedItemsUnknown0002146;\";\nmsg.payload[85]=\"delete from CountedItemsUnknown0009275;\";\nmsg.payload[86]=\"delete from CountedItemsUnknown0002139;\";\nmsg.payload[87]=\"delete from CountedItemsUnknown0004005;\";\nmsg.payload[88]=\"delete from CountedItemsUnknown0002124;\";\nmsg.payload[89]=\"delete from CountedItemsUnknown0002172;\";\nmsg.payload[90]=\"delete from CountedItemsUnknown0002171;\";\nmsg.payload[91]=\"delete from CountedItemsUnknown0002103;\";\nmsg.payload[92]=\"delete from CountedItemsUnknown0002115;\";\nmsg.payload[93]=\"delete from CountedItemsUnknown0002954;\";\nmsg.payload[94]=\"delete from CountedItemsUnknown0004001;\";\nmsg.payload[95]=\"delete from CountedItemsUnknown0002133;\";\nmsg.payload[96]=\"delete from CountedItemsUnknown0002142;\";\nmsg.payload[97]=\"delete from CountedItemsUnknown0009297;\";\nmsg.payload[98]=\"delete from CountedItemsUnknown0009901;\";\nmsg.payload[99]=\"delete from CountedItemsUnknown0002148;\";\nmsg.payload[100]=\"delete from CountedItemsUnknown0001148;\";\nmsg.payload[101]=\"delete from CountedItemsUnknown0001149;\";\nmsg.payload[102]=\"delete from CountedItemsUnknown0002149;\";\nmsg.payload[103]=\"delete from CountedItemsUnknown0002150;\";\n//msg.payload[104]=\"delete from SOH;\";\n//msg.payload[105]=\"delete from SOHlog;\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1260,
        "wires": [
            [
                "1c95c25c4a15198d"
            ]
        ]
    },
    {
        "id": "d4b7c7772f47a831",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 970,
        "y": 1260,
        "wires": []
    },
    {
        "id": "aaedb344e4e7176a",
        "type": "delay",
        "z": "9cf062cd8fdccf3c",
        "name": "1s",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 670,
        "y": 1260,
        "wires": [
            [
                "b3f9116f3edd7526"
            ]
        ]
    },
    {
        "id": "1c95c25c4a15198d",
        "type": "splitter",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "property": "payload",
        "x": 430,
        "y": 1260,
        "wires": [
            [
                "51361a442ec48ac7"
            ]
        ]
    },
    {
        "id": "51361a442ec48ac7",
        "type": "change",
        "z": "9cf062cd8fdccf3c",
        "name": "topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1260,
        "wires": [
            [
                "aaedb344e4e7176a"
            ]
        ]
    },
    {
        "id": "1338130107b3e373",
        "type": "http in",
        "z": "9cf062cd8fdccf3c",
        "name": "GET COUNTED ITEMS",
        "url": "/GETCOUNTEDITEMS",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 940,
        "wires": [
            [
                "fbeaae4ebd0ec2fd"
            ]
        ]
    },
    {
        "id": "55d725224845ec3b",
        "type": "comment",
        "z": "9cf062cd8fdccf3c",
        "name": "GET Filters Per Store for SOH based on Inventory",
        "info": "",
        "x": 230,
        "y": 1440,
        "wires": []
    },
    {
        "id": "f3abeb52fbd9104f",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Validate Request 2.0",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar currentTime = new Date().getTime();\nvar queryResults=\"\";\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    msg.send=0;\n    return msg;\n}\nelse{\n    node.warn(\"Authorized FILTERS PER STORE request, proceeding... \");\n    var results = msg.payload;\n    var store = results.StoreID,\n        Brand;\n    queryResults = \" store='\"+store+\"'\"; \n    if(results.Brand){\n        Brand=results.Brand;\n        queryResults+=\" AND Brand='\"+Brand+\"'\";\n    }\n    msg.topic = \"SELECT * FROM Inventory WHERE\"+queryResults+\";\";\n    msg.send=1;\n    return msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1540,
        "wires": [
            [
                "7742f60e46d97850"
            ]
        ]
    },
    {
        "id": "b9c446a4dbdcb6bb",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Response 2.0",
        "func": "results = msg.payload;\nvar currentTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Dubai\"});\n\nvar toUpdate = [];\nfor(j=0;j<results.length;j++){\n    var ItemToUpdate = [  \n            results[j].DepartmentID,\n            results[j].Brand,\n            results[j].Color,\n\t\t\tresults[j].Size,\n\t\t\tresults[j].Style\n        ];\n    toUpdate.push({value:ItemToUpdate});\n}\n\nmsg.response = \" Response received at: \" + currentTime + \" Dubai time. ----- SUCCESSFUL - Get Filter Per Store successful for \"+ results.length+\" Items ---- \";\nnode.warn(msg.response);\n\nmsg.payload = {total:toUpdate.length,headersY:toUpdate};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 1540,
        "wires": [
            [
                "2cfb48dee7217c18"
            ]
        ]
    },
    {
        "id": "2cfb48dee7217c18",
        "type": "http response",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "x": 950,
        "y": 1540,
        "wires": []
    },
    {
        "id": "7a671fe8c7cf1420",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 750,
        "y": 1580,
        "wires": []
    },
    {
        "id": "7742f60e46d97850",
        "type": "sqlite",
        "z": "9cf062cd8fdccf3c",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Get FILTERS",
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "b9c446a4dbdcb6bb",
                "7a671fe8c7cf1420"
            ]
        ]
    },
    {
        "id": "2b391d20092e92cd",
        "type": "http in",
        "z": "9cf062cd8fdccf3c",
        "name": "FILTERS PER STORE",
        "url": "/FILTERSPERSTORE",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1540,
        "wires": [
            [
                "f3abeb52fbd9104f"
            ]
        ]
    },
    {
        "id": "4e50838d2896aa94",
        "type": "comment",
        "z": "9cf062cd8fdccf3c",
        "name": "LOOKUP workflow based on SKU or EPC, from inventory",
        "info": "",
        "x": 250,
        "y": 1760,
        "wires": []
    },
    {
        "id": "8e27765344f6b97b",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Validate Request 2.0",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar currentTime = new Date().getTime();\nqueryResults=\"\";\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized Lookup transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    msg.send=0;\n    return msg;\n}\nelse{\n    node.warn(\"Authorized Lookup request, proceeding... \");\n    var results = msg.payload;\n    var SKU_original, // initilize the fields which user want to check but user can check lookUp using storeID or TagID\n        TagID, \n        len=0,\n        queryResults=\"\";\n    if(results.StoreID){  // if user want to check through StoreID\n        var store = results.StoreID;\n        queryResults = \" store='\"+store+\"'\"; // query\n        len=1;\n    }\n    if(results.TagID){ \n        TagID=results.TagID;\n        if(len===1){\n            queryResults+=\" AND TagID='\"+TagID+\"'\";\n        }\n        else{\n            queryResults+=\" TagID='\"+TagID+\"'\";\n        }\n    }\n    if(results.SKU_original){ // User can also check through SKU number of item \n        SKU_original=results.SKU_original;\n        if(len===1){\n            queryResults+=\" AND SKU_original='\"+SKU_original+\"'\";\n        }\n        else{\n            queryResults+=\" SKU_original='\"+SKU_original+\"'\";\n        }\n    }\n    msg.topic = \"SELECT * FROM Inventory WHERE\"+queryResults+\";\"; // query for check the record according to above fields to check the record from db \n    msg.send=1;\n    return msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1860,
        "wires": [
            [
                "95f1812e3b2d8d77"
            ]
        ]
    },
    {
        "id": "8da40797c17f5e24",
        "type": "function",
        "z": "9cf062cd8fdccf3c",
        "name": "Response 2.0",
        "func": "results = msg.payload;\nvar currentTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Dubai\"});\n\nvar toUpdate = [];\nfor(j=0;j<results.length;j++){\n    var ItemToUpdate = {  \n            \"Retail_CycleCountDate\": results[j].Retail_CycleCountDate,\n            \"SKU_original\": results[j].SKU_original,\n            \"Description\": results[j].Description,\n\t\t\t\"Size\": results[j].Size,\n\t\t\t\"Style\": results[j].Style,\n\t\t\t\"Color\": results[j].Color,\n\t\t\t\"Store\": results[j].store,\n\t\t\t\"Retail_Disposition\": results[j].Retail_Disposition,\n\t\t\t\"Brand\": results[j].Brand,\n\t\t\t\"Retail_CycleCountID\": results[j].Retail_CycleCountID,\n\t\t\t\"SupplierName\": results[j].SupplierName,\n\t\t\t\"zone\": results[j].zone,\n\t\t\t\"Price\": results[j].Price,\n\t\t\t\"TotalPrice\": results[j].TotalPrice,\n\t\t\t\"TagID\": results[j].TagID,\n\t\t\t\"DepartmentID\": results[j].DepartmentID,\n\t\t\t\"SKU\": results[j].SKU,\n\t\t\t\"Season\": results[j].Season\n        };\n    toUpdate.push(ItemToUpdate);\n}\n\nmsg.response = \" Response received at: \" + currentTime + \" Dubai time. ----- SUCCESSFUL Lookup request ---- \";\nnode.warn(msg.response);\n\nmsg.payload = {total:toUpdate.length,results:toUpdate};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1860,
        "wires": [
            [
                "e773e7b06b52c6c8"
            ]
        ]
    },
    {
        "id": "e773e7b06b52c6c8",
        "type": "http response",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "x": 890,
        "y": 1860,
        "wires": []
    },
    {
        "id": "6feac745ecb73a60",
        "type": "debug",
        "z": "9cf062cd8fdccf3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 690,
        "y": 1900,
        "wires": []
    },
    {
        "id": "95f1812e3b2d8d77",
        "type": "sqlite",
        "z": "9cf062cd8fdccf3c",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Get Items",
        "x": 540,
        "y": 1860,
        "wires": [
            [
                "8da40797c17f5e24",
                "6feac745ecb73a60"
            ]
        ]
    },
    {
        "id": "bf521675e8d5169a",
        "type": "http in",
        "z": "9cf062cd8fdccf3c",
        "name": "LOOKUP",
        "url": "/STOREINVENTORY",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1860,
        "wires": [
            [
                "8e27765344f6b97b"
            ]
        ]
    },
    {
        "id": "ccc1f1ef35455b52",
        "type": "inject",
        "z": "9cf062cd8fdccf3c",
        "name": "Manual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "1d0f4a05d3a2ac6b",
        "type": "http in",
        "z": "f56f2cf481d749b9",
        "name": "PRINTING",
        "url": "/TAGIT",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "d4d08a05dae25149",
                "7cd14d770b48b9b6",
                "a9f9487dcf7acfa1"
            ]
        ]
    },
    {
        "id": "7cd14d770b48b9b6",
        "type": "debug",
        "z": "f56f2cf481d749b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 430,
        "y": 480,
        "wires": []
    },
    {
        "id": "d4d08a05dae25149",
        "type": "Load Balance",
        "z": "f56f2cf481d749b9",
        "defaultcapacity": 100,
        "dynamic": "6409711c.8bf87",
        "hashType": "pearson",
        "mps": "",
        "name": "",
        "noavailability": "admin",
        "nocapacity": "admin",
        "outputs": 4,
        "routes": "3",
        "selection": "next",
        "sourceProperty": "msg.topic",
        "sticky": "",
        "x": 440,
        "y": 380,
        "wires": [
            [
                "f3097497d551f8ce"
            ],
            [
                "47abf73d18b5b823"
            ],
            [
                "1fab7f12fcdbf392"
            ],
            [
                "571b1031fc24ef3b"
            ]
        ]
    },
    {
        "id": "946eccdbffe65991",
        "type": "file",
        "z": "f56f2cf481d749b9",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 630,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a9f9487dcf7acfa1",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/flows/logs/PRINTING-SAVE/'+ shortDate + '/inbound/' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "f3097497d551f8ce",
                "946eccdbffe65991"
            ]
        ]
    },
    {
        "id": "f3097497d551f8ce",
        "type": "debug",
        "z": "f56f2cf481d749b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "2083348cd0c9ed7d",
        "type": "inject",
        "z": "f56f2cf481d749b9",
        "name": "Test",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"group\":\">RUBAIYAT\",\"thingTypeCode\":\"ITEM\",\"serialNumber\":\"3034000044149A0000014BEA\",\"udfs\":{\"deviceId\":{\"value\":\"C2A0622C-CB02-41E9-9465-9946B282B38F\"},\"Retail_Bizlocation\":{\"value\":\"0002115\"},\"sourceModule\":{\"value\":\"Printing\"},\"Retail_Printer\":{\"value\":\"PrinterID\"},\"Retail_Product_Color\":{\"value\":\"N0000\"},\"Retail_Product_Gender\":{\"value\":\"1\"},\"Retail_Product_Level1Name\":{\"value\":\"286 - BOXER\"},\"Retail_Product_Level2Name\":{\"value\":\"139 - DG MEN UNDERWEAR\"},\"Retail_Product_Name\":{\"value\":\"REGULAR BOXER\"},\"Retail_Product_Name_Text\":{\"value\":\"دولسي اند جابانا بوكسر\"},\"Retail_Product_Price\":{\"value\":\"150\"},\"Retail_Product_Season\":{\"value\":\"1812\"},\"Retail_Product_Size\":{\"value\":\"7\"},\"Retail_Product_SKU\":{\"value\":\"000017210966\"},\"Retail_Product_SKUOriginal\":{\"value\":\"17210966\"},\"Retail_Product_SP_VAT_AR\":{\"value\":\"ر.س.‏١٧٢.٥\"},\"Retail_Product_SP_VAT_EN\":{\"value\":\"172.5\"},\"Retail_Product_Style\":{\"value\":\"6162 - UNDERWEAR/SWIMWEAR\"},\"Retail_Product_SupplierName\":{\"value\":\"144 - DOLCE&GABBANA UNDERWEAR\"},\"Retail_Product_UniqueID\":{\"value\":\"8056305653504\"},\"Retail_Product_UPC\":{\"value\":\"00000017210966\"},\"Retail_Product_VAT\":{\"value\":\"22.5\"},\"Retail_ZPL\":{\"value\":\"RUBAzpl_EN\"},\"source\":{\"value\":\"PRINTING_APP\"},\"user\":{\"value\":\"store2115\"},\"zone\":{\"value\":\"0002115.00101.1\"}}}]",
        "payloadType": "json",
        "x": 250,
        "y": 320,
        "wires": [
            [
                "d4d08a05dae25149",
                "a9f9487dcf7acfa1"
            ]
        ]
    },
    {
        "id": "47abf73d18b5b823",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar originalPayload = msg.payload || [];\nvar payloadToProcess = null;\n\nvar validateProps =  function(payload){ // expected fields for printing\n    var expectedFields = [\n        /*\"serialNumber\",*/\n        \"deviceId\",\n        \"Retail_Bizlocation\",\n        \"sourceModule\",\n        \"Retail_Printer\",\n        \"Retail_Product_SKU\",\n        \"Retail_Product_SKUOriginal\",\n        \"Retail_Product_UniqueID\",\n        \"Retail_Product_UPC\",\n        \"Retail_ZPL\",\n        \"source\",\n        \"user\",\n        \"zone\"\n    ];\n    var udfs = payload.udfs || {};\n    var missingfields = expectedFields.filter(function(element){\n        return !udfs.hasOwnProperty(element);\n    });\n    return missingfields;\n}\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized PRINTING transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized PRINTING transaction, proceeding... \");\n    var results = msg.payload; //set the payload values to result \n    var validPayload = Array.isArray(results); // Array.isArray is a method to check that the giving object is array or not if the object is array then he return true otherwise false.\n    var validatedFields = '';\n    if(validPayload){\n        //Validating Missing Fields\n        for(var item=0; item < originalPayload.length; item++ ){\n            validatedFields = validateProps(originalPayload[item]);\n            if(validatedFields.length > 0){\n                msg.payload = {\"response\":\"bad request missing field value \" + validatedFields.toLocaleString()};\n                msg.statusCode = 400;\n                return [msg, payloadToProcess ];\n            }\n        }\n        \n        msg.payload = {\"response\":\"Authorized. Processing PRINTING for \"+results.length+ \" items\"};\n        msg.statusCode = 200;\n        payloadToProcess = {payload: originalPayload}\n    } else{\n        msg.payload = {\"response\":\"Invalid Format.\" };\n        msg.statusCode = 400;\n    }\n    return [msg, payloadToProcess ];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 260,
        "wires": [
            [
                "5324b0c4ce32be6c"
            ],
            [
                "0d8e60f83b2f1b15"
            ]
        ]
    },
    {
        "id": "5324b0c4ce32be6c",
        "type": "http response",
        "z": "f56f2cf481d749b9",
        "name": "",
        "x": 930,
        "y": 240,
        "wires": []
    },
    {
        "id": "1fab7f12fcdbf392",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar originalPayload = msg.payload || [];\nvar payloadToProcess = null;\n\nvar validateProps =  function(payload){\n    var expectedFields = [\n        /*\"serialNumber\",*/\n        \"deviceId\",\n        \"Retail_Bizlocation\",\n        \"sourceModule\",\n        \"Retail_Printer\",\n        \"Retail_Product_SKU\",\n        \"Retail_Product_SKUOriginal\",\n        \"Retail_Product_UniqueID\",\n        \"Retail_Product_UPC\",\n        \"Retail_ZPL\",\n        \"source\",\n        \"user\",\n        \"zone\"\n    ];\n    var udfs = payload.udfs || {};\n    var missingfields = expectedFields.filter(function(element){\n        return !udfs.hasOwnProperty(element);\n    });\n    return missingfields;\n}\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized PRINTING transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized PRINTING transaction, proceeding... \");\n    results = msg.payload;\n    var validPayload = Array.isArray(results);\n    var validatedFields = '';\n    if(validPayload){\n        //Validating Missing Fields\n        for(var item=0; item < originalPayload.length; item++ ){\n            validatedFields = validateProps(originalPayload[item]);\n            if(validatedFields.length > 0){\n                msg.payload = {\"response\":\"bad request missing field value \" + validatedFields.toLocaleString()};\n                msg.statusCode = 400;\n                return [msg, payloadToProcess ];\n            }\n        }\n        \n        msg.payload = {\"response\":\"Authorized. Processing PRINTING for \"+results.length+ \" items\"};\n        msg.statusCode = 200;\n        payloadToProcess = {payload: originalPayload}\n    } else{\n        msg.payload = {\"response\":\"Invalid Format.\" };\n        msg.statusCode = 400;\n    }\n    return [msg, payloadToProcess ];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 750,
        "y": 460,
        "wires": [
            [
                "07e58bd4c87e6505"
            ],
            [
                "dbb37094103ec6c9"
            ]
        ]
    },
    {
        "id": "07e58bd4c87e6505",
        "type": "http response",
        "z": "f56f2cf481d749b9",
        "name": "",
        "x": 930,
        "y": 433,
        "wires": []
    },
    {
        "id": "571b1031fc24ef3b",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar originalPayload = msg.payload || [];\nvar payloadToProcess = null;\n\nvar validateProps =  function(payload){\n    var expectedFields = [\n        /*\"serialNumber\",*/\n        \"deviceId\",\n        \"Retail_Bizlocation\",\n        \"sourceModule\",\n        \"Retail_Printer\",\n        \"Retail_Product_SKU\",\n        \"Retail_Product_SKUOriginal\",\n        \"Retail_Product_UniqueID\",\n        \"Retail_Product_UPC\",\n        \"Retail_ZPL\",\n        \"source\",\n        \"user\",\n        \"zone\"\n    ];\n    var udfs = payload.udfs || {};\n    var missingfields = expectedFields.filter(function(element){\n        return !udfs.hasOwnProperty(element);\n    });\n    return missingfields;\n}\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized PRINTING transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized PRINTING transaction, proceeding... \");\n    var results = msg.payload;\n    var validPayload = Array.isArray(results);\n    var validatedFields = '';\n    if(validPayload){\n        //Validating Missing Fields\n        for(var item=0; item < originalPayload.length; item++ ){\n            validatedFields = validateProps(originalPayload[item]);\n            if(validatedFields.length > 0){\n                msg.payload = {\"response\":\"bad request missing field value \" + validatedFields.toLocaleString()};\n                msg.statusCode = 400;\n                return [msg, payloadToProcess ];\n            }\n        }\n        \n        msg.payload = {\"response\":\"Authorized. Processing PRINTING for \"+results.length+ \" items\"};\n        msg.statusCode = 200;\n        payloadToProcess = {payload: originalPayload}\n    } else{\n        msg.payload = {\"response\":\"Invalid Format.\" };\n        msg.statusCode = 400;\n    }\n    return [msg, payloadToProcess ];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 660,
        "wires": [
            [
                "e425dcd0620d342a"
            ],
            [
                "ca17d68632274cca"
            ]
        ]
    },
    {
        "id": "e425dcd0620d342a",
        "type": "http response",
        "z": "f56f2cf481d749b9",
        "name": "",
        "x": 930,
        "y": 640,
        "wires": []
    },
    {
        "id": "262bf6c24b35b801",
        "type": "debug",
        "z": "f56f2cf481d749b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1430,
        "y": 280,
        "wires": []
    },
    {
        "id": "6c626c8f323ccab7",
        "type": "delay",
        "z": "f56f2cf481d749b9",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 960,
        "y": 1080,
        "wires": [
            [
                "afbf4990d2812fdd"
            ]
        ]
    },
    {
        "id": "afbf4990d2812fdd",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Prepare HTTP item",
        "func": "msg.method = \"PUT\";\nmsg.url = \"http://hbridge:8080/http-bridge/thingBridge/thing?bridgeCode=/RUBAIYAT/FLOW&thingTypeCode=/RUBAIYAT/ITEM\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "79b24e87ee949d8e",
        "type": "http request",
        "z": "f56f2cf481d749b9",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "951439d633065677",
                "0ea895207a1a0ca7"
            ]
        ]
    },
    {
        "id": "951439d633065677",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Response",
        "func": "\nif(msg.statusCode !== 200){\n    node.warn(\" ----- ERROR Bridge Response ---- \");\n    node.warn(msg.payload);\n    node.warn(msg.headers);\n    node.warn(msg.statusCode);\n    node.warn(msg.responseUrl);\n    msg.tmp = 0;\n    return msg;\n    \n}\nelse{\n    node.warn(\" ----- SUCCESSFUL Bridge Response AFTER PROCESSING PRINTING ---- \");\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1080,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "38cb5db69a53e9e0",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Chunk Payload",
        "func": "var totalMsgs = msg.payload;\n//node.warn(totalMsgs);\nvar chunkPayload = [];\nvar i,j,temparray,chunk = 50;\n\nfor (i=0,j=totalMsgs.length; i<j; i+=chunk) {\n    temparray = totalMsgs.slice(i,i+chunk);\n    chunkPayload.push({payload:temparray});\n}\n\nreturn [chunkPayload];",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "6c626c8f323ccab7"
            ]
        ]
    },
    {
        "id": "0ea895207a1a0ca7",
        "type": "debug",
        "z": "f56f2cf481d749b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1070,
        "y": 1140,
        "wires": []
    },
    {
        "id": "df2d3dc35a2a3fd7",
        "type": "file in",
        "z": "f56f2cf481d749b9",
        "name": "File to reprocess",
        "filename": "/flows/logs/TAGIT/6-2021/inbound/2021-6-10.txt",
        "filenameType": "str",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "e8db6689e944c6fa"
            ]
        ]
    },
    {
        "id": "246f945941e004b8",
        "type": "inject",
        "z": "f56f2cf481d749b9",
        "name": "Reprocess",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1020,
        "wires": [
            [
                "df2d3dc35a2a3fd7"
            ]
        ]
    },
    {
        "id": "e8db6689e944c6fa",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "",
        "func": "var results = JSON.parse(msg.payload);\nmsg.payload = results;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "b46d7833401f8932"
            ]
        ]
    },
    {
        "id": "b46d7833401f8932",
        "type": "join",
        "z": "f56f2cf481d749b9",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "8",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "bb81ac8daf1cdbe3"
            ]
        ]
    },
    {
        "id": "bb81ac8daf1cdbe3",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Processing",
        "func": "var results = msg.payload;\n\nvar currentTime = new Date().getTime();\n\nvar toUpdate = [];\nfor(var j=0;j < results.length;j++){\n\n    //var product_name = results[j].udfs.Retail_Product_Name.value\n    //product_name = product_name.replace(/[\\\\\"]/g, '');\n    \n    var itemToUpdate = {  \n                \"thingTypeCode\" : \"ITEM\",\n                \"serialNumber\": results[j][0].serialNumber,\n                \"timestamp\":currentTime,\n\t\t\t\t\"deviceId\": results[j][0].udfs.deviceId.value,\n\t\t\t\t\"Retail_Bizlocation\": results[j][0].udfs.Retail_Bizlocation.value,\n\t\t\t\t\"Retail_Printer\": results[j][0].udfs.Retail_Printer.value,\n\t\t\t\t\"Retail_Product_SKU\": results[j][0].udfs.Retail_Product_SKU.value,\n\t\t\t\t\"Retail_Product_SKUOriginal\": results[j][0].udfs.Retail_Product_SKUOriginal.value,\n\t\t\t\t\"Retail_Product_UniqueID\": results[j][0].udfs.Retail_Product_UniqueID.value,\n\t\t\t\t\"Retail_Product_UPC\": results[j][0].udfs.Retail_Product_UPC.value,\n\t\t\t\t\"Retail_TagIT_Info_1\": results[j][0].udfs.Retail_TagIT_Info_1.value, //Purchase_Order\n\t\t\t\t\"Retail_TagIT_Info_2\": results[j][0].udfs.Retail_TagIT_Info_2.value, //Supplier_Number\n\t\t\t\t\"Retail_TagIT_Info_3\": results[j][0].udfs.Retail_TagIT_Info_3.value, //Shipment_Number\n\t\t\t\t\"Retail_TagIT_Info_4\": results[j][0].udfs.Retail_TagIT_Info_4.value, //Comments\n\t\t\t\t\"Retail_ZPL\": results[j][0].udfs.Retail_ZPL.value,\n\t\t\t\t\"sourceModule\": \"Printing\",\n\t\t\t\t\"zone\": results[j][0].udfs.zone.value,\n\t\t\t\t\"source\": \"PRINTING_APP\",\n\t\t\t\t\"user\": results[j][0].udfs.user.value\n            };\n    toUpdate.push(itemToUpdate);\n    //node.warn(\"CURRENT TIME FOR PRINTING: \"+currentTime +\" ****** PROCESSING TAG: \"+results[j].serialNumber+\" ****** \");\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\n\nmsg.payload=toUpdate;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "38cb5db69a53e9e0"
            ]
        ]
    },
    {
        "id": "0d8e60f83b2f1b15",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Prepare Item Messages",
        "func": "var results = msg.payload;\n\nvar currentTime = new Date().getTime();\nvar newSKU,Purchase_Order,Supplier_Number,Shipment_Number,Comments;\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    \n    var str = results[j].udfs.zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    Purchase_Order = results[j].udfs.Retail_TagIT_Info_1.value;\n    Supplier_Number = results[j].udfs.Retail_TagIT_Info_2.value;\n    Shipment_Number = results[j].udfs.Retail_TagIT_Info_3.value;\n    Comments = results[j].udfs.Retail_TagIT_Info_4.value;\n    //node.warn(\"Changed ZONE: \"+zon);\n\n    if(results[j].udfs.Retail_Product_SKUOriginal.value){\n        newSKU = results[j].udfs.Retail_Product_SKUOriginal.value;\n        originalSkusItems.push({SKU_original: newSKU, serialNumber: results[j].serialNumber, Purchase_Order: Purchase_Order, Supplier_Number: Supplier_Number, Shipment_Number: Shipment_Number, Comments: Comments}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    \n}\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\n//node.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS ****** \");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 320,
        "wires": [
            [
                "703babd92605a105"
            ]
        ]
    },
    {
        "id": "703babd92605a105",
        "type": "subflow:5320966ce4df3d0f",
        "z": "f56f2cf481d749b9",
        "name": "",
        "x": 1240,
        "y": 320,
        "wires": [
            [
                "262bf6c24b35b801"
            ]
        ]
    },
    {
        "id": "dbb37094103ec6c9",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Prepare Item Messages",
        "func": "results = msg.payload;\n\nvar currentTime = new Date().getTime();\nvar newSKU,Purchase_Order,Supplier_Number,Shipment_Number,Comments;\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    Purchase_Order = results[j].udfs.Retail_TagIT_Info_1.value;\n    Supplier_Number = results[j].udfs.Retail_TagIT_Info_2.value;\n    Shipment_Number = results[j].udfs.Retail_TagIT_Info_3.value;\n    Comments = results[j].udfs.Retail_TagIT_Info_4.value;\n    //node.warn(\"Changed ZONE: \"+zon);\n\n    if(results[j].udfs.Retail_Product_SKUOriginal.value){\n        newSKU = results[j].udfs.Retail_Product_SKUOriginal.value;\n        originalSkusItems.push({SKU_original: newSKU, serialNumber: results[j].serialNumber, Purchase_Order: Purchase_Order, Supplier_Number: Supplier_Number, Shipment_Number: Shipment_Number, Comments: Comments}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    \n}\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\n//node.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS ****** \");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 990,
        "y": 520,
        "wires": [
            [
                "1683aa9f1ad7e7fd"
            ]
        ]
    },
    {
        "id": "1683aa9f1ad7e7fd",
        "type": "subflow:5320966ce4df3d0f",
        "z": "f56f2cf481d749b9",
        "name": "",
        "x": 1230,
        "y": 520,
        "wires": [
            [
                "731097ea2be9630f"
            ]
        ]
    },
    {
        "id": "ca17d68632274cca",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "Prepare Item Messages",
        "func": "results = msg.payload;\n\nvar currentTime = new Date().getTime();\nvar newSKU,Purchase_Order,Supplier_Number,Shipment_Number,Comments;\nvar originalSkusItems = []; // for copy metadata\nmsg.toProcess = 0;\n\nfor(var j=0;j < results.length;j++){\n    var str = results[j].udfs.zone.value;\n    var stor = (str.slice(0,7));\n    msg.store = stor;\n    var zon = (str.slice(10,13));\n    if(zon === \"101\"){\n        zon=\"SalesFloor\";\n    }\n    if(zon === \"102\"){\n        zon=\"StockRoom\";\n    }\n    msg.zone = zon;\n    msg.disposition = \"sellable\";\n    Purchase_Order = results[j].udfs.Retail_TagIT_Info_1.value;\n    Supplier_Number = results[j].udfs.Retail_TagIT_Info_2.value;\n    Shipment_Number = results[j].udfs.Retail_TagIT_Info_3.value;\n    Comments = results[j].udfs.Retail_TagIT_Info_4.value;\n    //node.warn(\"Changed ZONE: \"+zon);\n\n    if(results[j].udfs.Retail_Product_SKUOriginal.value){\n        newSKU = results[j].udfs.Retail_Product_SKUOriginal.value;\n        originalSkusItems.push({SKU_original: newSKU, serialNumber: results[j].serialNumber, Purchase_Order: Purchase_Order, Supplier_Number: Supplier_Number, Shipment_Number: Shipment_Number, Comments: Comments}); //for copy metadata;    \n        msg.toProcess = 1;\n    }\n    \n    \n}\nif(msg.toProcess===1){\n    msg.items_toCopy = originalSkusItems; // for copy metadata\n}\n//node.warn(\"String of messages To Update: \" + toUpdate);\n//node.warn(\"CURRENT TIME FOR CYCLECOUNT: \"+currentTime +\" ****** PROCESSING: \"+results.length+\" ITEMS ****** \");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 990,
        "y": 720,
        "wires": [
            [
                "b73fa69b31920627"
            ]
        ]
    },
    {
        "id": "b73fa69b31920627",
        "type": "subflow:5320966ce4df3d0f",
        "z": "f56f2cf481d749b9",
        "name": "",
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "e33d6c1943ac7c24"
            ]
        ]
    },
    {
        "id": "731097ea2be9630f",
        "type": "debug",
        "z": "f56f2cf481d749b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1430,
        "y": 472,
        "wires": []
    },
    {
        "id": "e33d6c1943ac7c24",
        "type": "debug",
        "z": "f56f2cf481d749b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1430,
        "y": 680,
        "wires": []
    },
    {
        "id": "60560010314c8d28",
        "type": "inject",
        "z": "f56f2cf481d749b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1340,
        "wires": [
            [
                "64324263f7a6f764"
            ]
        ]
    },
    {
        "id": "1c4f866cc5805baf",
        "type": "debug",
        "z": "f56f2cf481d749b9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1360,
        "wires": []
    },
    {
        "id": "a1fe979f3a1be2e2",
        "type": "mongodb-node",
        "z": "f56f2cf481d749b9",
        "mongodb": "92ae78283fc2fda1",
        "name": "MongoDB",
        "collection": "node-redDB",
        "operation": "find",
        "upsert": false,
        "multi": false,
        "x": 360,
        "y": 1300,
        "wires": [
            [
                "1c4f866cc5805baf"
            ]
        ]
    },
    {
        "id": "64324263f7a6f764",
        "type": "function",
        "z": "f56f2cf481d749b9",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1400,
        "wires": [
            [
                "a1fe979f3a1be2e2"
            ]
        ]
    },
    {
        "id": "693f4276ed5ce042",
        "type": "http in",
        "z": "d64197e1a7365a2a",
        "name": "STORES",
        "url": "/STORES",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 2240,
        "wires": [
            [
                "1696740e1ebff4c5"
            ]
        ]
    },
    {
        "id": "1696740e1ebff4c5",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar server = global.get(\"server\");\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized Store request, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n}\nelse{\n    var storesSOH = [];\n    storesSOH = global.get(\"storesSOH\");\n    node.warn(\"Authorized Store request, proceeding... \")\n    //show the storeSOH length in payload according to enter store\n    msg.payload={\"total\":storesSOH.length,\"results\":storesSOH};\n    msg.statusCode = 200;\n    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2240,
        "wires": [
            [
                "3117b776b61efd75"
            ]
        ]
    },
    {
        "id": "3117b776b61efd75",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "x": 550,
        "y": 2240,
        "wires": []
    },
    {
        "id": "ce695c3d11fe38c5",
        "type": "comment",
        "z": "d64197e1a7365a2a",
        "name": "GET Stores based on Configuration, for MOBILE",
        "info": "",
        "x": 280,
        "y": 2140,
        "wires": []
    },
    {
        "id": "a2a0641f3d945bb7",
        "type": "link out",
        "z": "d64197e1a7365a2a",
        "name": "toBO1",
        "mode": "link",
        "links": [
            "bc1d2ec464df855f"
        ],
        "x": 1795,
        "y": 780,
        "wires": []
    },
    {
        "id": "03691cae7fa075f6",
        "type": "link out",
        "z": "d64197e1a7365a2a",
        "name": "toBO2",
        "mode": "link",
        "links": [
            "bc1d2ec464df855f"
        ],
        "x": 1195,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e802f44889ec2ee7",
        "type": "comment",
        "z": "d64197e1a7365a2a",
        "name": "PUBLISHING OVER TO THE BACK OFFICE WORKFLOW",
        "info": "",
        "x": 310,
        "y": 1180,
        "wires": []
    },
    {
        "id": "ba897b0c5fa8ba8f",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Prepare message to BO",
        "func": "\nmsg.retry = 0;\nvar BOserver = global.get('BOserver');\nvar toBO = msg.toBO;\n\n\nmsg.payload = [toBO];\nmsg.processed = [toBO];\nmsg.url = BOserver+\"/api/1.0.0/api/add_asn\";\n\n//node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1300,
        "wires": [
            [
                "389b4e6b8dcb4106",
                "f11c32f4e1487362"
            ]
        ],
        "icon": "node-red/white-globe.png"
    },
    {
        "id": "f11c32f4e1487362",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Backoffice Logs",
        "func": "var logsFolder = global.get('logsFolder');\nvar currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = logsFolder+'SUPPLYCHAIN/'+ shortDate + '/backoffice/' + initialTime + '.txt';\nmsg.filename = filename;\nvar results = msg.payload.length;\nnode.warn(\"SUPPLYCHAIN - Publishing \"+ results +\" records at backoffice\")\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1440,
        "wires": [
            [
                "79b9a91cc3740fa0"
            ]
        ]
    },
    {
        "id": "79b9a91cc3740fa0",
        "type": "file",
        "z": "d64197e1a7365a2a",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 650,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "389b4e6b8dcb4106",
        "type": "change",
        "z": "d64197e1a7365a2a",
        "name": "Set headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\"apikey\":\"innovent@123\",\"Content-Type\":\"application/json\"}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "POST",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 704,
        "y": 1300,
        "wires": [
            [
                "50a8cf51366f6eec",
                "2c6617587157b967"
            ]
        ]
    },
    {
        "id": "50a8cf51366f6eec",
        "type": "delay",
        "z": "d64197e1a7365a2a",
        "name": "1s rate",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 864,
        "y": 1300,
        "wires": [
            [
                "ede36a251a927981"
            ]
        ]
    },
    {
        "id": "386458e3dd5c5098",
        "type": "switch",
        "z": "d64197e1a7365a2a",
        "name": "3 retries",
        "property": "retry",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 954,
        "y": 1360,
        "wires": [
            [
                "c3911a0b3adaa742"
            ],
            [
                "fb79caed404bd4d6",
                "c3911a0b3adaa742"
            ]
        ]
    },
    {
        "id": "bd0cce700082267a",
        "type": "delay",
        "z": "d64197e1a7365a2a",
        "name": "10s rate",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 954,
        "y": 1420,
        "wires": [
            [
                "389b4e6b8dcb4106"
            ]
        ]
    },
    {
        "id": "ede36a251a927981",
        "type": "http request",
        "z": "d64197e1a7365a2a",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 1024,
        "y": 1300,
        "wires": [
            [
                "5cb4b43e31cdf46a"
            ]
        ]
    },
    {
        "id": "5cb4b43e31cdf46a",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Response",
        "func": "var results = msg.processed, count, retry;\nvar currentTime = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Dubai\"});\n\nif(msg.statusCode !== 200){\n    for(var i=0;i<results.length;i++){\n        count = results[i].items;\n        msg.error = \" ----- ERROR - Backoffice SupplyChain Response for process \"+results[i].status+\" of \" +count.length+ \" items and ASN \"+results[i].asn+\" ---- \";\n        msg.response = \" Response received at: \" + currentTime + \" Dubai time. \" + msg.error + \" \\n \" + msg.statusCode + \" \\n \" + msg.payload;\n        node.warn(msg.error);\n        node.warn(msg.payload);\n        node.warn(msg.headers);\n        node.warn(msg.statusCode);\n        node.warn(msg.responseUrl);\n    }\n    node.warn(\"retry before: \"+msg.retry);\n    retry = msg.retry;\n    retry++;\n    msg.retry=retry;\n    node.warn(\"retry after adding 1: \"+msg.retry);\n    if(msg.retry === 3){\n        msg.retry=0;\n    }\n    node.warn(\"retry after evaluating: \"+msg.retry);\n    msg.payload=msg.processed;\n    return msg;\n}\nelse{\n    for(var j=0;j<results.length;j++){\n        count = results[j].items;\n        msg.response = \" ----- SUCCESSFUL - Backoffice Response for process \"+results[j].status+\" of \" + count.length + \" items and ASN \"+results[j].asn+\" ---- \";\n        msg.response = \" Response received at: \" + currentTime + \" Dubai time. \"+ msg.response + \" \\n \" + msg.statusCode + \" \\n \" + msg.payload;\n        node.warn(msg.response);\n    }\n    msg.retry=0;\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1194,
        "y": 1300,
        "wires": [
            [
                "386458e3dd5c5098"
            ]
        ]
    },
    {
        "id": "fb79caed404bd4d6",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "d64197e1a7365a2a",
        "name": "To Guillermo",
        "account": "8de9fdd5dc3a437e",
        "text": "error",
        "inputtypemessage": "msg",
        "rejectssl": false,
        "x": 1204,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "c3911a0b3adaa742",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Backoffice Logs",
        "func": "var logsFolder = global.get('logsFolder');\nvar currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = logsFolder+'SUPPLYCHAIN/'+ shortDate + '/backoffice/' + initialTime + '_failedToPost-BO.txt';\nmsg.filename = filename;\nvar results = msg.payload.length;\nnode.warn(\"SUPPLYCHAIN - Publishing \"+ results +\" records at backoffice\")\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 1440,
        "wires": [
            [
                "d3fc4d81f385a45a"
            ]
        ]
    },
    {
        "id": "d3fc4d81f385a45a",
        "type": "file",
        "z": "d64197e1a7365a2a",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 1370,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "bc1d2ec464df855f",
        "type": "link in",
        "z": "d64197e1a7365a2a",
        "name": "[IN-toBO]",
        "links": [
            "03691cae7fa075f6",
            "a2a0641f3d945bb7"
        ],
        "x": 120,
        "y": 1300,
        "wires": [
            [
                "ba897b0c5fa8ba8f"
            ]
        ]
    },
    {
        "id": "2c6617587157b967",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1240,
        "wires": []
    },
    {
        "id": "65c3489b73245fe3",
        "type": "http in",
        "z": "d64197e1a7365a2a",
        "name": "SUPPLYCHAINVERIFY",
        "url": "/SUPPLYCHAINVERIFYRECEIVED",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 2480,
        "wires": [
            [
                "2ef661d152a6d310",
                "8b089a29499bc8f0"
            ]
        ]
    },
    {
        "id": "2ef661d152a6d310",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar server = global.get(\"server\");\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized Supply Chain Verification transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized Supply Chain Verification transaction, proceeding... \");\n    var results = msg.payload;\n     if(results.ASN){\n        msg.ASN = results.ASN;\n        var bodyM=\"ASN='\"+msg.ASN+\"';\";\n        \n        if(results.OriginStoreID){\n            if((bodyM.slice(-1))===\";\"){\n                bodyM=bodyM.slice(0, -1);\n                bodyM+=\" AND \";\n            }\n            bodyM+=\"OriginStoreID='\"+results.OriginStoreID+\"';\";\n        }\n        if(results.Process){\n            if((bodyM.slice(-1))===\";\"){\n                bodyM=bodyM.slice(0, -1);\n                bodyM+=\" AND \";\n           }\n            bodyM+=\"Process='\"+results.Process+\"';\";\n        }\n        if(results.ProcessStatus){\n            if((bodyM.slice(-1))===\";\"){\n                bodyM=bodyM.slice(0, -1);\n                bodyM+=\" AND \";\n           }\n            bodyM+=\"ProcessStatus='\"+results.ProcessStatus+\"';\";\n        }\n        \n        msg.topic=\"SELECT * FROM SupplyChainReceived WHERE \"+bodyM;\n     }\n     else{\n        msg.payload = {\"response\":\"Wrong request. ASN value is required.\"};\n        msg.statusCode = 400;\n        return [msg,null]; \n     }\n    return [null,msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2480,
        "wires": [
            [
                "25534dd0a7b0815c"
            ],
            [
                "279d2557353d3ee0"
            ]
        ]
    },
    {
        "id": "25534dd0a7b0815c",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "x": 670,
        "y": 2460,
        "wires": []
    },
    {
        "id": "610976bc6f584f6a",
        "type": "comment",
        "z": "d64197e1a7365a2a",
        "name": "Integration with Back office for Manual Receiving - SUPPLY CHAIN VERIFY",
        "info": "",
        "x": 370,
        "y": 2400,
        "wires": []
    },
    {
        "id": "279d2557353d3ee0",
        "type": "sqlite",
        "z": "d64197e1a7365a2a",
        "mydb": "0048e11c6fc80daa",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SupplyChainReceived",
        "x": 720,
        "y": 2500,
        "wires": [
            [
                "6d3bf6d885c24b37"
            ]
        ]
    },
    {
        "id": "6d3bf6d885c24b37",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Response",
        "func": "var results = msg.payload;\nvar currentTime = new Date().toLocaleString(\"en-US\", { timeZone: \"Asia/Dubai\" });\n\nif(results.length > 0){\n    msg.response = \" ----- SUCCESSFUL - Get Transfer Order successful for \" + msg.payload.length + \" Items ---- \";\n    msg.response = \" Response received at: \" + currentTime + \" Dubai time. \" + msg.response + \" \\n \";\n    node.warn(msg.response);\n    var toUpdate = [];\n    msg.payload.forEach((transfer, i) => {\n        var ItemToUpdate = {\n            \"ASN\": transfer.ASN,\n            \"TagID\": transfer.serialNumber,\n            \"OriginStoreID\": transfer.OriginStoreID,\n            \"DestinationStoreID\": transfer.DestinationStoreID,\n            \"SKU\": transfer.SKU,\n            \"SKU_original\": transfer.SKU_original,\n            \"Description\": transfer.Description,\n            \"Process\": transfer.Process,\n            \"ProcessStatus\": transfer.ProcessStatus,\n            \"Brand\": transfer.Brand,\n            \"DepartmentID\": transfer.DepartmentID,\n            \"remarks\": transfer.remarks\n        };\n        toUpdate.push(ItemToUpdate);\n    });\n    msg.payload = { total: toUpdate.length, results: toUpdate };\n    msg.statusCode = 200;\n}\nelse{\n    msg.payload = {\"response\": \"No information found for ASN \"+msg.ASN,\"total\":0,\"results\":[]};\n    msg.statusCode = 200;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2500,
        "wires": [
            [
                "6b60dac52769f4a5",
                "bf2415769fb5c46d"
            ]
        ]
    },
    {
        "id": "6b60dac52769f4a5",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "x": 1070,
        "y": 2500,
        "wires": []
    },
    {
        "id": "bf2415769fb5c46d",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1070,
        "y": 2540,
        "wires": []
    },
    {
        "id": "8b089a29499bc8f0",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 410,
        "y": 2560,
        "wires": []
    },
    {
        "id": "c1b05cc0e7e29a23",
        "type": "http in",
        "z": "d64197e1a7365a2a",
        "name": "SUPPLYCHAINVERIFY",
        "url": "/SUPPLYCHAINVERIFY",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1840,
        "wires": [
            [
                "136ab477cdf54c9f",
                "97875d676234957f"
            ]
        ]
    },
    {
        "id": "136ab477cdf54c9f",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar server = global.get(\"server\");\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized Supply Chain Verification transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized Supply Chain Verification transaction, proceeding... \");\n   var results = msg.payload;\n    if(results.ASN){ //first user enter ASN number , if the ASN is correct then \n        msg.ASN = results.ASN;\n        var bodyM=\"ASN='\"+msg.ASN+\"';\"; \n     //bodyM is user entered ASN and msg.ASN is existing ASN from DB \n        //if(results.OriginStoreID){\n        //    if((bodyM.slice(-1))===\";\"){\n        //        bodyM=bodyM.slice(0, -1);\n        //        bodyM+=\" AND \";\n        //    }\n        //    bodyM+=\"OriginStoreID='\"+results.OriginStoreID+\"';\";\n        //}\n        //if(results.Process){\n        //    if((bodyM.slice(-1))===\";\"){\n        //        bodyM=bodyM.slice(0, -1);\n        //        bodyM+=\" AND \";\n        //   }\n        //    bodyM+=\"Process='\"+results.Process+\"';\";\n        //}\n        //if(results.ProcessStatus){\n        //    if((bodyM.slice(-1))===\";\"){\n        //        bodyM=bodyM.slice(0, -1);\n        //        bodyM+=\" AND \";\n        //   }\n        //    bodyM+=\"ProcessStatus='\"+results.ProcessStatus+\"';\";\n        //}\n        if(results.Process){\n            msg.process = results.Process;\n        }\n        //if the both ASN are same then generate the query\n        if(results.process){\n            msg.process = results.process;\n        }\n        msg.topic = \"SELECT * FROM SupplyChain WHERE \" + bodyM; //query for bodyM\n        msg.topicReceiving = \"SELECT * FROM SupplyChainReceived WHERE ASN='\"+msg.ASN+\"';\";// query for msg.ASN\n     }\n     else{\n         //if user didn't enter ASN number then system show below error\n        msg.payload = {\"response\":\"Wrong request. ASN value is required.\"};\n        msg.statusCode = 400;\n        return [msg,null]; \n     }\n    return [null,msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1840,
        "wires": [
            [
                "1e7ff11d66db19c4"
            ],
            [
                "df0c6acbfc289646"
            ]
        ]
    },
    {
        "id": "1e7ff11d66db19c4",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "x": 650,
        "y": 1820,
        "wires": []
    },
    {
        "id": "605a57966c91a503",
        "type": "comment",
        "z": "d64197e1a7365a2a",
        "name": "Integration with Mobile - SUPPLY CHAIN VERIFY",
        "info": "",
        "x": 260,
        "y": 1760,
        "wires": []
    },
    {
        "id": "df0c6acbfc289646",
        "type": "sqlite",
        "z": "d64197e1a7365a2a",
        "mydb": "405fc20b69c8591e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SupplyChain",
        "x": 670,
        "y": 1860,
        "wires": [
            [
                "d3d676fa29a49740",
                "b8c85b0a01ab4e7e"
            ]
        ]
    },
    {
        "id": "d3d676fa29a49740",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Parse Pack & Ship",
        "func": "var results = msg.payload;\nvar currentTime = new Date().toLocaleString(\"en-US\", { timeZone: \"Asia/Dubai\" });\nvar process = [];\nif(results.length > 0){\n    msg.response = \" ----- SUCCESSFUL - Get Transfer Order successful for \" + msg.payload.length + \" Items ---- \";\n    msg.response = \" Response received at: \" + currentTime + \" Dubai time. \" + msg.response + \" \\n \";\n    node.warn(msg.response);\n    var toUpdate = [];\n    //below forEach loop update the record in DB after getting trnsfor order\n    msg.payload.forEach((transfer, i) => {\n        var ItemToUpdate = {\n            \"ASN\": transfer.ASN,\n            \"TagID\": transfer.serialNumber,\n            \"OriginStoreID\": transfer.OriginStoreID,\n            \"DestinationStoreID\": transfer.DestinationStoreID,\n            \"SKU\": transfer.SKU,\n            \"SKU_original\": transfer.SKU_original,\n            \"Description\": transfer.Description,\n            \"Process\": transfer.Process,\n            \"ProcessStatus\": transfer.ProcessStatus,\n            \"Brand\": transfer.Brand,\n            \"DepartmentID\": transfer.DepartmentID,\n            \"remarks\": transfer.remarks\n        };\n        \n        toUpdate.push(ItemToUpdate);\n    });\n    \n    process = [... new Set(results.map(data => data.Process))];\n    //node.warn(process)\n    process = process.sort();\n    //node.warn(process)\n    //node.warn(msg.process)\n    //below for loop map the data , if user enter the ASN number which is already packed,shipped in pack and transfor module.\n    for(var i=0;i<process.length;i++){\n        if(msg.process == \"packing\"){\n            if(process[i] == \"packing\"){\n                msg.payload = {\"response\": \"ASN \" + msg.ASN + \". Already packed.\"};\n            }\n            if(process[i] == \"shipping\"){\n                    msg.payload = {\"response\": \"ASN \" + msg.ASN + \". Already shipped.\"};\n            }\n        }\n        else{\n            if(process[i] == \"shipping\" && msg.process == \"shipping\"){\n                msg.payload = {\"response\": \"ASN \" + msg.ASN + \". Already shipped.\"};\n            }\n            else{\n                msg.payload = { total: toUpdate.length, results: toUpdate };\n            }\n        }\n        \n        \n    }\n    msg.statusCode = 200;\n}\nelse{\n    msg.topic = msg.topicReceiving;\n    msg.statusCode = 0;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1860,
        "wires": [
            [
                "6fd90ac089723359",
                "68adb07f3972ff6e"
            ]
        ]
    },
    {
        "id": "d887e3a09955c156",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "x": 1350,
        "y": 1840,
        "wires": []
    },
    {
        "id": "f5937356b01b7848",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1370,
        "y": 1940,
        "wires": []
    },
    {
        "id": "97875d676234957f",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 390,
        "y": 1920,
        "wires": []
    },
    {
        "id": "46adf6671137da5d",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Parse Receiving",
        "func": "var results = msg.payload;\nvar currentTime = new Date().toLocaleString(\"en-US\", { timeZone: \"Asia/Dubai\" });\nvar process = {};\n\nif(results.length > 0){\n    msg.response = \" ----- SUCCESSFUL - Shipped ASN \"+msg.ASN+\" attempt to re-use ---- \";\n    msg.response = \" Response received at: \" + currentTime + \" Dubai time. \" + msg.response + \" \\n \";\n    node.warn(msg.response);\n    var toUpdate = [];\n\n    const process = [... new Set(results.map(data => data.Process))];\n    //node.warn(process);\n    //check the enter ASN is received or not \n    if(process[0] == \"receiving\"){\n        msg.payload = {\"response\": \"ASN \" + msg.ASN + \". Already received.\"};\n        msg.statusCode = msg.statusCode = 200;\n    }\n}\nelse{\n    //if system found no information about enter ASN number the show below response\n    msg.payload = {\"response\": \"No information found for ASN \"+msg.ASN,\"total\":0,\"results\":[]};\n    msg.statusCode = 200;\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1940,
        "wires": [
            [
                "d887e3a09955c156",
                "f5937356b01b7848"
            ]
        ]
    },
    {
        "id": "6fd90ac089723359",
        "type": "switch",
        "z": "d64197e1a7365a2a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1860,
        "wires": [
            [
                "d887e3a09955c156"
            ],
            [
                "cd676073f1e017b2"
            ]
        ]
    },
    {
        "id": "68adb07f3972ff6e",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 990,
        "y": 1800,
        "wires": []
    },
    {
        "id": "cd676073f1e017b2",
        "type": "sqlite",
        "z": "d64197e1a7365a2a",
        "mydb": "405fc20b69c8591e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SupplyChain",
        "x": 1030,
        "y": 1940,
        "wires": [
            [
                "46adf6671137da5d"
            ]
        ]
    },
    {
        "id": "b8c85b0a01ab4e7e",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 790,
        "y": 1940,
        "wires": []
    },
    {
        "id": "f029164daef4665e",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Packing || Shipping",
        "func": "var ProcessedTime = new Date().getTime();\nvar availlableData = msg.payload;\nvar APIresponse = [],\n  toUpdate = [];\nvar epcsStrg = '';\nvar message = '',\n  item = '';\nmsg.aux = 0;\nmsg.response = 0;\n\nfor (var j = 0; j < msg.count; j++) {\n  item = msg.serialNumber[j];\n  if (availlableData) {\n    if (availlableData.length > 0) {\n      node.warn(availlableData[j]);\n      if (availlableData[j] && (availlableData[j].ASN !== msg.ASN)) {\n        message = {\n          ERROR:msg.process + ' not processed for ' + item + ' already exists in ASN ' + availlableData[j].ASN,\n        };\n          msg.aux = 1;\n        APIresponse.push(message);\n      } else {\n        msg.response++;\n        epcsStrg += `'${item}',`;\n        toUpdate.push({item: item});\n      }\n    } else {\n      msg.response++;\n      epcsStrg += `'${item}',`;\n      toUpdate.push({item: item});\n    }\n  }\n}\n\nif (epcsStrg) {\n  epcsStrg = epcsStrg.slice(0, -1);\n  msg.topic = 'SELECT * FROM Inventory WHERE TagID in (' + epcsStrg + ')';\n  msg.serialNumber = toUpdate;\n}\nmsg.payload = '';\nmsg.APIresponse = APIresponse;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 680,
        "wires": [
            [
                "dea8ccb308eec170",
                "18b4a68255bb7bc3"
            ]
        ]
    },
    {
        "id": "dea8ccb308eec170",
        "type": "switch",
        "z": "d64197e1a7365a2a",
        "name": "Evaluator",
        "property": "aux",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1100,
        "y": 700,
        "wires": [
            [
                "12c98192b1ac112d"
            ],
            [
                "c3c117580012551d"
            ]
        ]
    },
    {
        "id": "12c98192b1ac112d",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "",
        "func": "node.warn(msg.count);\nnode.warn(msg.response);\nvar message = [];\nmessage = msg.serialNumber;\nif(msg.count === msg.response){\n    msg.whatsapp=\"Confirming processed \"+ msg.process + \" of \"+message.length  +\" items in API for ASN \" +msg.ASN;\n    msg.payload={\"response\":\"Supply Chain - Posted successfully\"};\n    node.warn(\"Confirming processed in API for ASN \"+ msg.ASN);\n    msg.statusCode = 200;\n    return [msg, null];\n}else{\n    msg.whatsapp=\"ERROR ocurred when processing \"+ msg.process + \" of \"+message.length  +\" items in API for ASN \" +msg.ASN +\". Message received from Mobile process: \" + JSON.stringify(msg.APIresponse);\n    node.warn(\"ERROR ocurred when processing ASN \"+ msg.ASN+\". Message received from Mobile process: \" + JSON.stringify(msg.APIresponse));\n    msg.statusCode = 404;\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 620,
        "wires": [
            [
                "34fd2851031f1724"
            ],
            [
                "b698439e9c065598"
            ]
        ]
    },
    {
        "id": "5cd67af56e7973b4",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Receiving",
        "func": "var ProcessedTime = new Date().getTime();\n//var ProcessedTimeDxb = new Date().toLocaleString('en-US', {\n//  timeZone: 'Asia/Dubai',\n//});\nvar ProcessedTimeDxb = Date.now();\nvar scData = msg.payload;\nvar toUpdate = [];\nvar epcsStrg = '';\nvar message = '',\n  item = '',\n  messagej = '',\n  Brand,\n  DepartmentID,\n  items = {},\n  toItems = [],\n  toBO = {};\nmsg.aux = 0;\nmsg.response = 0;\n\nfor (var j = 0; j < msg.count; j++) {\n  if (scData.length > 0) {\n    item = scData[j].serialNumber;\n    if (scData[j].process !== 'packing' && msg.ASN !== '') {\n      msg.response++;\n      serial = msg.ASN + '_' + item;\n      DepartmentID = scData[j].DepartmentID;\n      Brand = scData[j].Brand;\n      Description = scData[j].Description;\n      epcsStrg += `'${item}',`;\n      messagej += `('${serial}','${ProcessedTime}','${item}','${msg.ASN}','${msg.OriginLocation}','${msg.ReceivingLocation}','${msg.zone}','${Description}','${Brand}','${DepartmentID}','${msg.process}','${msg.processStatus}','${msg.user}','${scData[j].SKU_original}','${scData[j].SKU}','${msg.deviceId}','${msg.remarks}'),`;\n      items = {\n        tag_id: item,\n        original_location: scData[j].OriginStoreID,\n        store_id: scData[j].DestinationStoreID,\n        departmentid: DepartmentID,\n        sku: scData[j].SKU,\n        brand: Brand,\n        process_status: scData[j].ProcessStatus,\n      };\n      toItems.push(items);\n    } else {\n      message = {ERROR: 'Receiving of ASN ' + msg.ASN + ' not possible'};\n      node.warn(message);\n      msg.payload = message;\n      msg.APIresponse = message;\n      msg.aux = 1;\n      msg.statusCode = 400;\n      return msg;\n    }\n  } else {\n    message = {ERROR: 'Receiving of ASN ' + msg.ASN + ' not possible'};\n    node.warn(message);\n    msg.payload = message;\n    msg.APIresponse = message;\n    msg.aux = 1;\n    msg.statusCode = 400;\n    return msg;\n  }\n}\n\nif (epcsStrg) {\n  epcsStrg = epcsStrg.slice(0, -1);\n  messagej = messagej.slice(0, -1);\n  toBO = {\n    asn: msg.ASN,\n    source: msg.OriginLocation,\n    destination: msg.ReceivingLocation,\n    status: msg.process,\n    event_date: ProcessedTimeDxb,\n    event_remarks: msg.remarks,\n    event_ref_id: msg.reflist,\n    items: toItems,\n  };\n  msg.toBO = toBO;\n  msg.topicReceiving =\n    'INSERT OR REPLACE INTO SupplyChainReceived (ID,ProcessedTime,serialNumber,ASN,OriginStoreID,DestinationStoreID,zone,Description,Brand,DepartmentID,Process,ProcessStatus,user,SKU_original,SKU,deviceId,remarks) VALUES ' +\n    messagej +\n    ';';\n  msg.topicSupplyChain =\n    'DELETE FROM SupplyChain WHERE serialNumber in (' + epcsStrg + ')';\n  msg.topicTransferOrder =\n    \"UPDATE TransferOrders SET Process = 'Received' WHERE ASN ='\" +\n    msg.ASN +\n    \"';\";\n}\nmsg.payload = {response: 'Supply Chain - Posted successfully'};\nnode.warn(\n  'Confirming processed in API for ASN ' +\n    msg.ASN +\n    ' and ' +\n    scData.length +\n    ' items.',\n);\nmsg.statusCode = 200;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 840,
        "wires": [
            [
                "24f4eea04fe029a0"
            ]
        ]
    },
    {
        "id": "24f4eea04fe029a0",
        "type": "switch",
        "z": "d64197e1a7365a2a",
        "name": "Evaluator",
        "property": "aux",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1100,
        "y": 960,
        "wires": [
            [
                "e35bdc329ef63bd7"
            ],
            [
                "8a80858357dbf222",
                "b32c0ab958145da2",
                "67070338d85efb5b",
                "03691cae7fa075f6"
            ]
        ]
    },
    {
        "id": "e35bdc329ef63bd7",
        "type": "link out",
        "z": "d64197e1a7365a2a",
        "name": "SCfail_APIreceiving",
        "links": [
            "4dba0ac464ae11c8"
        ],
        "x": 1195,
        "y": 900,
        "wires": []
    },
    {
        "id": "4dba0ac464ae11c8",
        "type": "link in",
        "z": "d64197e1a7365a2a",
        "name": "SC_APIresponse",
        "links": [
            "e35bdc329ef63bd7",
            "7acabde0.0cbde4"
        ],
        "x": 1175,
        "y": 620,
        "wires": [
            [
                "12c98192b1ac112d"
            ]
        ]
    },
    {
        "id": "67070338d85efb5b",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 940,
        "wires": []
    },
    {
        "id": "ea6f7f08b39613ad",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Cancelled",
        "func": "var ProcessedTime = new Date().getTime();\n//var ProcessedTimeDxb = new Date().toLocaleString('en-US', {\n//  timeZone: 'Asia/Dubai',\n//});\n//Sending ProcessedTimeDxb as epoch instead\nvar ProcessedTimeDxb = Date.now();\n\nvar scData = msg.payload;\nvar toUpdate = [];\nvar epcsStrg = '';\nvar message = '',\n  item = '',\n  messagej = '',\n  items = {},\n  toItems = [],\n  toBO = {};\nmsg.aux = 0;\nmsg.response = 0;\n\nfor (var j = 0; j < msg.count; j++) {\n  if (scData.length > 0) {\n    item = scData[j].serialNumber;\n    if (scData[j].process !== 'packing' && msg.ASN !== '') {\n      msg.response++;\n      serial = msg.ASN + '_' + item;\n      epcsStrg += `'${item}',`;\n      items = {\n        tag_id: item,\n        original_location: scData[j].OriginStoreID,\n        store_id: scData[j].DestinationStoreID,\n        departmentid: scData[j].DepartmentID,\n        sku: scData[j].SKU,\n        brand: scData[j].Brand,\n        process_status: scData[j].ProcessStatus,\n      };\n      toItems.push(items);\n    } else {\n      var message = {ERROR: 'Cancellation of ASN ' + msg.ASN + ' not possible'};\n      node.warn(message);\n      msg.payload = message;\n      msg.APIresponse = message;\n      msg.aux = 1;\n      msg.statusCode = 400;\n      return msg;\n    }\n  } else {\n    var message = {\n      ERROR:\n        'Cancellation of ASN ' +\n        msg.ASN +\n        ' not possible. Shipping does not exist.',\n    };\n    node.warn(message);\n    msg.payload = message;\n    msg.APIresponse = message;\n    msg.aux = 1;\n    msg.statusCode = 400;\n    return msg;\n  }\n}\n\nif (epcsStrg) {\n  epcsStrg = epcsStrg.slice(0, -1);\n  toBO = {\n    asn: msg.ASN,\n    source: msg.OriginLocation,\n    destination: msg.ReceivingLocation,\n    status: msg.process,\n    event_date: ProcessedTimeDxb,\n    event_remarks: msg.remarks,\n    event_ref_id: msg.reflist,\n    items: toItems,\n  };\n  msg.toBO = toBO;\n  msg.topicSupplyChain =\n    'DELETE FROM SupplyChain WHERE serialNumber in (' + epcsStrg + ')';\n  msg.topicTransferOrder =\n    \"UPDATE TransferOrders SET Process = 'Cancelled' WHERE ASN ='\" +\n    msg.ASN +\n    \"';\";\n}\nmsg.payload = {response: 'Supply Chain - Posted successfully'};\nnode.warn(\n  'Confirming processed in API for ASN ' +\n    msg.ASN +\n    ' and ' +\n    scData.length +\n    ' items.',\n);\nmsg.statusCode = 200;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 960,
        "wires": [
            [
                "24f4eea04fe029a0"
            ]
        ]
    },
    {
        "id": "6430050de607ad23",
        "type": "comment",
        "z": "d64197e1a7365a2a",
        "name": "SAVING TO SQLITE WORKFLOW",
        "info": "",
        "x": 280,
        "y": 560,
        "wires": []
    },
    {
        "id": "18b4a68255bb7bc3",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "a4c877a3c41d6fd8",
        "type": "link in",
        "z": "d64197e1a7365a2a",
        "name": "[tmp] IN",
        "links": [
            "6712786d83e4ea76"
        ],
        "x": 195,
        "y": 800,
        "wires": [
            [
                "d84d03a747c6db46"
            ]
        ]
    },
    {
        "id": "b698439e9c065598",
        "type": "change",
        "z": "d64197e1a7365a2a",
        "name": "API response",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "APIresponse",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 660,
        "wires": [
            [
                "34fd2851031f1724"
            ]
        ]
    },
    {
        "id": "c3c117580012551d",
        "type": "sqlite",
        "z": "d64197e1a7365a2a",
        "mydb": "cd743025.293b8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Inventory Data",
        "x": 1340,
        "y": 740,
        "wires": [
            [
                "a2e2c6ca2e645c37",
                "83aa2d5e69f526a3"
            ]
        ]
    },
    {
        "id": "a2e2c6ca2e645c37",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "",
        "func": "var ProcessedTime = new Date().getTime();\n//var ProcessedTimeDxb = new Date().toLocaleString(\"en-US\", {timeZone: \"Asia/Dubai\"});\n//Sending ProcessedTimeDxb as epoch instead\nvar ProcessedTimeDxb = Date.now();\n\nvar availlableData = msg.payload;\nvar serial, messagej = '',SKU,SKU_original,TagID,Brand, DepartmentID,items={},toItems=[],toBO={};\nvar toProcess = msg.serialNumber, store_id;\n\n\nif(availlableData.length>0){\n    for(var i=0;i<toProcess.length;i++){\n        for(var j=0;j<availlableData.length;j++){\n            TagID=availlableData[j].TagID;\n            if(TagID === toProcess[i].item){\n                serial = msg.ASN+\"_\"+toProcess[i].item;\n                SKU = availlableData[j].SKU;\n                SKU_original = availlableData[j].SupplierItemNum;\n                DepartmentID = availlableData[j].DepartmentID;\n                Description = availlableData[j].Description;\n                Brand = availlableData[j].Brand;\n                if(msg.process==='packing'){\n                    store_id = msg.OriginLocation;\n                }\n                if(msg.process==='shipping'){\n                    store_id = msg.ReceivingLocation;\n                }\n                items = {\n                        \"tag_id\": toProcess[i].item,\n                        \"original_location\": msg.OriginLocation,\n                        \"store_id\": store_id,\n                        \"departmentid\": availlableData[j].DepartmentID,\n                        \"sku\": availlableData[j].SKU,\n                        \"brand\": availlableData[j].Brand,\n                        \"process_status\":msg.processStatus\n                    };\n                    toItems.push(items);\n                messagej += `('${serial}','${ProcessedTime}','${toProcess[i].item}','${msg.ASN}','${msg.OriginLocation}','${msg.ReceivingLocation}','${msg.zone}','${Description}','${Brand}','${DepartmentID}','${msg.process}','${msg.processStatus}','${msg.user}','${SKU_original}','${SKU}','${msg.deviceId}','${msg.remarks}'),`;\n            }\n        }\t\n    }\n}\nelse{\n    msg.payload={\"response\":\"Tags not found at Inventory\"};\n    node.warn(\"Tags not found at Inventory for the ASN \"+ msg.ASN + \" and \"+ toProcess.length +\" items.\");\n    msg.statusCode = 400;\n    return msg;\n}\nif(messagej){\n\tmessagej = messagej.slice(0,-1);\n\ttoBO ={\n        \"asn\": msg.ASN,\n        \"source\": msg.OriginLocation,\n        \"destination\": msg.ReceivingLocation,\n        \"status\": msg.process,\n        \"event_date\": ProcessedTimeDxb,\n        \"event_remarks\": msg.remarks,\n        \"event_ref_id\":msg.reflist,\n        \"items\": toItems\n    };\n    msg.toBO = toBO;\n    //node.warn(msg.toBO);\n\tmsg.topic = \"INSERT OR REPLACE INTO SupplyChain (ID,ProcessedTime,serialNumber,ASN,OriginStoreID,DestinationStoreID,zone,Description,Brand,DepartmentID,Process,ProcessStatus,user,SKU_original,SKU,deviceId,remarks) VALUES \"+messagej+\";\";\n\tif(msg.process === \"shipping\"){\n\t    msg.topicTransferOrder = \"UPDATE TransferOrders SET Process = 'Shipped' WHERE ASN ='\"+msg.ASN+\"';\";\n\t}\n}\n\n//msg.whatsapp=\"Confirming processed \"+ msg.process + \" of \"+message.length  +\" items in API for ASN \" +msg.ASN;\nmsg.payload={\"response\":\"Supply Chain - Posted successfully\"};\nnode.warn(\"Confirming processed in API for ASN \"+ msg.ASN + \" and \"+ toProcess.length +\" items.\");\nmsg.statusCode = 200;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 740,
        "wires": [
            [
                "8ddaef3df3ebfe5c",
                "262ada8411d5afcc",
                "34fd2851031f1724"
            ]
        ]
    },
    {
        "id": "a4b748c165c7a8d5",
        "type": "sqlite",
        "z": "d64197e1a7365a2a",
        "mydb": "405fc20b69c8591e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SupplyChain Data",
        "x": 1910,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "34fd2851031f1724",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1630,
        "y": 620,
        "wires": []
    },
    {
        "id": "8a80858357dbf222",
        "type": "change",
        "z": "d64197e1a7365a2a",
        "name": "SupplyChain Receiving",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topicReceiving",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 980,
        "wires": [
            [
                "11e0269a8489f565"
            ]
        ]
    },
    {
        "id": "b32c0ab958145da2",
        "type": "change",
        "z": "d64197e1a7365a2a",
        "name": "Delete from SupplyChain",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topicSupplyChain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 1020,
        "wires": [
            [
                "11e0269a8489f565"
            ]
        ]
    },
    {
        "id": "11e0269a8489f565",
        "type": "sqlite",
        "z": "d64197e1a7365a2a",
        "mydb": "405fc20b69c8591e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SupplyChain Data",
        "x": 1630,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "8ddaef3df3ebfe5c",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 800,
        "wires": []
    },
    {
        "id": "83aa2d5e69f526a3",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 820,
        "wires": []
    },
    {
        "id": "262ada8411d5afcc",
        "type": "switch",
        "z": "d64197e1a7365a2a",
        "name": "Evaluator",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1680,
        "y": 740,
        "wires": [
            [
                "a4b748c165c7a8d5",
                "a2a0641f3d945bb7"
            ]
        ]
    },
    {
        "id": "3c6131e4e1102307",
        "type": "http in",
        "z": "d64197e1a7365a2a",
        "name": "SUPPLYCHAIN",
        "url": "/SUPPLYCHAIN",
        "method": "patch",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "3f9c1e50424588e5",
                "e0267eb52866124c",
                "46d87da950691a5c"
            ]
        ]
    },
    {
        "id": "f7f127cbdcab20f8",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Validate Request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != 'WYMOJXX8QZ4TBAWS'){\n    node.warn(\"Unauthorized Supply Chain transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    return [msg,null];\n}\nelse{\n    node.warn(\"Authorized Supply Chain transaction, proceeding... \");\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 213,
        "wires": [
            [
                "bdf854eefd4fbc26"
            ]
        ]
    },
    {
        "id": "bdf854eefd4fbc26",
        "type": "switch",
        "z": "d64197e1a7365a2a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "403",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 213,
        "wires": [
            [
                "07d8a86357666549"
            ],
            [
                "9d7fccb096e1aa72"
            ]
        ]
    },
    {
        "id": "07d8a86357666549",
        "type": "http response",
        "z": "d64197e1a7365a2a",
        "name": "",
        "x": 1170,
        "y": 173,
        "wires": []
    },
    {
        "id": "3f9c1e50424588e5",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 250,
        "y": 260,
        "wires": []
    },
    {
        "id": "e0267eb52866124c",
        "type": "Load Balance",
        "z": "d64197e1a7365a2a",
        "defaultcapacity": 100,
        "dynamic": "6409711c.8bf87",
        "hashType": "pearson",
        "mps": "",
        "name": "",
        "noavailability": "admin",
        "nocapacity": "admin",
        "outputs": 4,
        "routes": "3",
        "selection": "next",
        "sourceProperty": "msg.topic",
        "sticky": "",
        "x": 520,
        "y": 220,
        "wires": [
            [
                "177b6d3d3f8ff4e0"
            ],
            [
                "f7f127cbdcab20f8"
            ],
            [
                "f7f127cbdcab20f8"
            ],
            [
                "f7f127cbdcab20f8"
            ]
        ]
    },
    {
        "id": "177b6d3d3f8ff4e0",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 810,
        "y": 140,
        "wires": []
    },
    {
        "id": "a1827a9c36ee3f40",
        "type": "file",
        "z": "d64197e1a7365a2a",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 810,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "46d87da950691a5c",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "Inbound Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar initialTime = (currentDate.getFullYear()+'-'+(currentDate.getMonth()+1)+'-'+currentDate.getDate());\nvar filename = '/data/logs/SUPPLYCHAIN/'+ shortDate + '/inbound/' + initialTime + '.txt';\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            [
                "a1827a9c36ee3f40",
                "177b6d3d3f8ff4e0"
            ]
        ]
    },
    {
        "id": "9d7fccb096e1aa72",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "PROCESS-02",
        "func": "msg.count = msg.payload.length;\nvar results = msg.payload;\n\nmsg.aux = 0;\n\nvar toUpdate = [];\n\nfor(var j=0; j < msg.count ; j++){\n    msg.processStatus = results[j].udfs.Retail_BizTransactionProcessStatus.value;\n    if(msg.processStatus === \"cancelled\"){\n        msg.ASN = results[j].udfs.Retail_BizTransactionId.value;\n        msg.user = results[j].udfs.user.value;\n        msg.process = \"cancelled\";\n        if(results[j].udfs.remarks){\n            msg.remarks = results[j].udfs.remarks.value;\n        }else{\n            msg.remarks = \"\";\n        }\n    }\n    else{\n        msg.process = results[j].udfs.Retail_BizTransactionProcess.value;\n        msg.OriginLocation = results[j].udfs.Retail_Bizlocation_Original.value;\n        msg.process = results[j].udfs.Retail_BizTransactionProcess.value;\n        msg.deviceId =  results[j].udfs.deviceId.value;\n        msg.ASN = results[j].udfs.Retail_BizTransactionId.value;\n        msg.user = results[j].udfs.user.value;\n        msg.remarks = results[j].udfs.remarks.value;\n        msg.processStatus = results[j].udfs.Retail_BizTransactionProcessStatus.value;\n        if(msg.process !== \"packing\"){\n            msg.ReceivingLocation = results[j].udfs.Retail_Bizlocation.value;\n            if(msg.process === \"shipping\"){\n                msg.zone = msg.OriginLocation+\"_SHIPPING\";    \n            }\n            if(msg.process === \"receiving\"){\n                msg.zone = results[j].udfs.zone.value;    \n            }\n        }else{\n            msg.ReceivingLocation = \"\";\n        }\n    }\n    toUpdate.push(results[j].serialNumber);\n}\n\nmsg.serialNumber=toUpdate;\nnode.warn(\"Authorized SupplyChain transaction, proceeding. Processing ASN \"+msg.ASN);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 233,
        "wires": [
            [
                "6712786d83e4ea76"
            ]
        ]
    },
    {
        "id": "6712786d83e4ea76",
        "type": "link out",
        "z": "d64197e1a7365a2a",
        "name": "[tmp] OUT",
        "mode": "link",
        "links": [
            "a4c877a3c41d6fd8"
        ],
        "x": 1295,
        "y": 280,
        "wires": []
    },
    {
        "id": "d84d03a747c6db46",
        "type": "function",
        "z": "d64197e1a7365a2a",
        "name": "",
        "func": "var originalPayload = msg.payload || {};\nmsg.originalPayload = originalPayload;\n\n//Parse only skus\nvar original_epcs = originalPayload.map(item => item.serialNumber);\nvar epcsStrg = \"\";\noriginal_epcs.forEach((epc, index) => {\n    epcsStrg += `'${epc}',`;\n});\nepcsStrg = epcsStrg.slice(0,-1);\n\n//In below swicth statement user can select one status \nswitch (msg.process) {\n    case 'packing':\n        msg.reflist=msg.ASN+\"I0001\";\n      break;\n    case 'shipping':\n        msg.reflist=msg.ASN+\"I0002\";\n      break;\n    case 'receiving':\n        msg.reflist=msg.ASN+\"I0003\";\n      break;\n    case 'cancelled':\n        msg.reflist=msg.ASN+\"I0007\";\n      break;\n    default:\n\n      break;\n}\n  \n// prepare query to get all Assets for each item.\nmsg.topic = \"SELECT * FROM SupplyChain WHERE serialNumber in (\"+epcsStrg+\")\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 800,
        "wires": [
            [
                "3404aabd9d113155"
            ]
        ]
    },
    {
        "id": "3404aabd9d113155",
        "type": "sqlite",
        "z": "d64197e1a7365a2a",
        "mydb": "405fc20b69c8591e",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "SupplyChain Validator",
        "x": 480,
        "y": 800,
        "wires": [
            [
                "7b24b18dd770a98c"
            ]
        ]
    },
    {
        "id": "7b24b18dd770a98c",
        "type": "switch",
        "z": "d64197e1a7365a2a",
        "name": "",
        "property": "process",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "packing",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shipping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "receiving",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cancelled",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 800,
        "wires": [
            [
                "f029164daef4665e",
                "2be231f146745f0e"
            ],
            [
                "f029164daef4665e",
                "93127ba07aa12e99"
            ],
            [
                "5cd67af56e7973b4",
                "93f5d984c0f0152a"
            ],
            [
                "ea6f7f08b39613ad"
            ]
        ]
    },
    {
        "id": "2be231f146745f0e",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 690,
        "y": 660,
        "wires": []
    },
    {
        "id": "93f5d984c0f0152a",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 900,
        "wires": []
    },
    {
        "id": "93127ba07aa12e99",
        "type": "debug",
        "z": "d64197e1a7365a2a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 780,
        "wires": []
    },
    {
        "id": "afdd7a25e7eca004",
        "type": "comment",
        "z": "155c727e74cb3361",
        "name": "API to get data from item-Master for singal item on the base of barcode",
        "info": "",
        "x": 310,
        "y": 280,
        "wires": []
    },
    {
        "id": "09994a9e552c1d57",
        "type": "http in",
        "z": "155c727e74cb3361",
        "name": "Get Item Data From Item-Master",
        "url": "BARCODE/DATA",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "86d1086dd94daace"
            ]
        ]
    },
    {
        "id": "4537971269f6b0bc",
        "type": "sqlite",
        "z": "155c727e74cb3361",
        "mydb": "07f899ec0eb16241",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Item-Master",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "7d1e5c59e9c63f2a",
                "c196736994bc501c",
                "6e9f2ddbb8e6319b"
            ]
        ]
    },
    {
        "id": "86d1086dd94daace",
        "type": "function",
        "z": "155c727e74cb3361",
        "name": "function 2",
        "func": "msg.topic = \"SELECT * FROM master where ID = '100193_0000018409321'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "4537971269f6b0bc"
            ]
        ]
    },
    {
        "id": "7d1e5c59e9c63f2a",
        "type": "http response",
        "z": "155c727e74cb3361",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 440,
        "wires": []
    },
    {
        "id": "c196736994bc501c",
        "type": "debug",
        "z": "155c727e74cb3361",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 360,
        "wires": []
    },
    {
        "id": "7651610c2705676d",
        "type": "file",
        "z": "155c727e74cb3361",
        "name": "logs",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "c196736994bc501c"
            ]
        ]
    },
    {
        "id": "6e9f2ddbb8e6319b",
        "type": "function",
        "z": "155c727e74cb3361",
        "name": "function 3",
        "func": "var filename = \"C:/Users/Nadeem/OneDrive/Desktop/logs\";\nmsg.filename=filename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            [
                "7651610c2705676d"
            ]
        ]
    },
    {
        "id": "4db13e55b3c3c752",
        "type": "http in",
        "z": "155c727e74cb3361",
        "name": "Get Item Data From Item-Master",
        "url": "/test",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "356e5ad52a6632d8"
            ]
        ]
    },
    {
        "id": "356e5ad52a6632d8",
        "type": "function",
        "z": "155c727e74cb3361",
        "name": "function 4",
        "func": "var msg= msg.payload;\nnode.warn(msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 680,
        "wires": [
            [
                "72efc46ec39aa2dd",
                "97d34b682bdecb7a"
            ]
        ]
    },
    {
        "id": "97d34b682bdecb7a",
        "type": "sqlite",
        "z": "155c727e74cb3361",
        "mydb": "07f899ec0eb16241",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Item-Master",
        "x": 590,
        "y": 680,
        "wires": [
            [
                "94c43c78cb0e3fcf"
            ]
        ]
    },
    {
        "id": "94c43c78cb0e3fcf",
        "type": "http response",
        "z": "155c727e74cb3361",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 760,
        "wires": []
    },
    {
        "id": "72efc46ec39aa2dd",
        "type": "debug",
        "z": "155c727e74cb3361",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 640,
        "wires": []
    },
    {
        "id": "120bb76b1a1a915b",
        "type": "http in",
        "z": "9dda84db99f66cba",
        "name": "Get Item Data From Item-Master",
        "url": "GET/DATA",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "1a435f3c56a45f7d"
            ]
        ]
    },
    {
        "id": "1a435f3c56a45f7d",
        "type": "function",
        "z": "9dda84db99f66cba",
        "name": "function 5",
        "func": "msg.topic = \"SELECT * FROM soh_new\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "777a366e20e5bf73"
            ]
        ]
    },
    {
        "id": "af3fb6b786710a4c",
        "type": "http response",
        "z": "9dda84db99f66cba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 220,
        "wires": []
    },
    {
        "id": "777a366e20e5bf73",
        "type": "mysql",
        "z": "9dda84db99f66cba",
        "mydb": "8afa890fa624105a",
        "name": "mysql",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "ac88613cff0b2de1",
                "af3fb6b786710a4c"
            ]
        ]
    },
    {
        "id": "ac88613cff0b2de1",
        "type": "debug",
        "z": "9dda84db99f66cba",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 140,
        "wires": []
    },
    {
        "id": "779a438a75eee0e0",
        "type": "http in",
        "z": "9dda84db99f66cba",
        "name": "Insert EPC in whiteList",
        "url": "INSERT/DATA",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "be1ad217a40bf7c3"
            ]
        ]
    },
    {
        "id": "be1ad217a40bf7c3",
        "type": "function",
        "z": "9dda84db99f66cba",
        "name": "prepare query",
        "func": "var epcs = msg.payload;\nvar epcList = epcs.rfid;\nvar query_str = '';\nfor (var i = 0; i < epcList.length; i++) { // format your code, you are not useing the standard format(done)\n    if (epcList[i]) {\n        query_str += ' insert into innoventgate.invalidrfid set rfid=\"' + epcList[i] + '\", isenable=\"1\"; ';\n\n    }\n}\nnode.warn(query_str);\nmsg.topic = query_str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 340,
        "wires": [
            [
                "56bd98a059be8112",
                "7bdd217bdd28ddfd"
            ]
        ]
    },
    {
        "id": "56bd98a059be8112",
        "type": "mysql",
        "z": "9dda84db99f66cba",
        "mydb": "8afa890fa624105a",
        "name": "mysql",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "b4c65343ed748859",
                "edf48b5aac06abba"
            ]
        ]
    },
    {
        "id": "7bdd217bdd28ddfd",
        "type": "debug",
        "z": "9dda84db99f66cba",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 340,
        "wires": []
    },
    {
        "id": "b4c65343ed748859",
        "type": "http response",
        "z": "9dda84db99f66cba",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "edf48b5aac06abba",
        "type": "debug",
        "z": "9dda84db99f66cba",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 480,
        "wires": []
    },
    {
        "id": "11d2197b037a62ad",
        "type": "inject",
        "z": "9dda84db99f66cba",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "58 13 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 640,
        "wires": [
            [
                "0a5e85018a8f0966"
            ]
        ]
    },
    {
        "id": "0a5e85018a8f0966",
        "type": "function",
        "z": "9dda84db99f66cba",
        "name": "function 6",
        "func": "var msg = { payload: \"Hello, this is a message sent using Node-RED.\" };\n // Enter the phone number of the recipient\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 640,
        "wires": [
            [
                "1f61d2e6450ce559"
            ]
        ]
    },
    {
        "id": "1f61d2e6450ce559",
        "type": "debug",
        "z": "9dda84db99f66cba",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 740,
        "wires": []
    },
    {
        "id": "1503b6469d44b971",
        "type": "http in",
        "z": "fa9ca0946da23687",
        "name": "Get PO DATA",
        "url": "items/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "4dbad31fe2c8d3b7"
            ]
        ]
    },
    {
        "id": "4dbad31fe2c8d3b7",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Validate request",
        "func": "var headers = msg.req.headers;\nvar server = global.get(\"server\");\nconst Mobile_apikey = global.get('Mobile_apikey');\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != Mobile_apikey){\n    node.warn(\"Unauthorized to GET ITEMS from Item-master, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n}\nelse{\n        node.warn(\"Authorized GET ITEMS from Item-master request, proceeding... \");\n       // msg.payload = {\"response\":\"GET ITEMS from Item-master \"+stor+\" processed.\"};\n        msg.statusCode = 200;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 420,
        "wires": [
            [
                "b3730b7af22e4bfd"
            ]
        ]
    },
    {
        "id": "b3730b7af22e4bfd",
        "type": "switch",
        "z": "fa9ca0946da23687",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 420,
        "wires": [
            [],
            [
                "7d9e2ee003b3a433"
            ]
        ]
    },
    {
        "id": "7d9e2ee003b3a433",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Prepare query",
        "func": "results = msg.payload;\nvar poList = results.po_number; // change the name for this varaible, use propertly names (done)\nvar poNumber_str = '';\nfor (var i = 0; i < poList.length; i++) { // format your code, you are not useing the standard format(done)\n    if (poList[i]) {\n        poNumber_str += \"'\" + poList[i] + \"',\";\n    }\n}\npoNumber_str = poNumber_str.slice(0, -1);\nnode.warn(poNumber_str);\nmsg.topic = \"SELECT CONCAT('0',SUBSTR(barcode , 15, 13) ) as barcode_a FROM Purchase_Order where po_number in (\" + poNumber_str + \");\";\nmsg.poNumberList = poNumber_str;\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 420,
        "wires": [
            [
                "73441b4d36168a88"
            ]
        ]
    },
    {
        "id": "73441b4d36168a88",
        "type": "mysql",
        "z": "fa9ca0946da23687",
        "mydb": "89bb548239426793",
        "name": "purchase-order",
        "x": 840,
        "y": 420,
        "wires": [
            [
                "9683e229da1fc329"
            ]
        ]
    },
    {
        "id": "9683e229da1fc329",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Get item-length",
        "func": "var poTableData = msg.payload;\nvar data = poTableData;\nif(data !== null){\n    node.warn(data)\n}\nelse{\n    node.warn(\"Data not found\")\n}\n\n// const invoiceSumm = Data.products[item.product_number].invoice_number.split(\";\");\n// node.warn(invoiceSumm);\nmsg.poTableData = poTableData; // please use camelCase instead of snake_case in Variables. (done)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 500,
        "wires": [
            [
                "29bf479e8e0efeb5"
            ]
        ]
    },
    {
        "id": "29bf479e8e0efeb5",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Prepare query",
        "func": "var poNumberList = msg.poNumberList;// change the name for this varaible, use propertly names (done)\n// node.warn(\"A \"+po)\n// var poNumber = \"\";\n// for (var i = 0; i < po.length; i++) { // format your code, you are not useing the standard format(done)\n//     if (po[i]) {\n//         poNumber += \"'\" + po[i] + \"',\";\n//     }\n// }\n// poNumber = poNumber.slice(0, -1);\n// node.warn(poNumber);\n\nmsg.topic = \"SELECT DISTINCT GTIN from master where GTIN in (SELECT CONCAT('0',  SUBSTR(barcode , 15, 13)) as a from Purchase_Order where po_number in (\"+poNumberList+\"))\";\nnode.warn(msg.topic);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "915756b76c3c780d"
            ]
        ]
    },
    {
        "id": "915756b76c3c780d",
        "type": "mysql",
        "z": "fa9ca0946da23687",
        "mydb": "89bb548239426793",
        "name": "item-master",
        "x": 670,
        "y": 500,
        "wires": [
            [
                "74ae5c3fe8f1f0cd"
            ]
        ]
    },
    {
        "id": "74ae5c3fe8f1f0cd",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Compare length",
        "func": "var masterData = msg.payload;\nvar poTableData = msg.poTableData;\nvar msg_out = {};\nvar masterArray = [];\nvar poListArray = [];\nnode.warn(masterData);\nnode.warn( poTableData);\nnode.warn(masterData.length +\"<=======>\"+ poTableData.length);\nif (masterData.length == poTableData.length) {\n\n    msg.statusCode = 200; \n    msg_out.statusCode = 200;\n    msg_out.message = \"PO items are availble in flow\";\n    msg_out.items = [];\n\n} else {\n    var missingList = [];\n    for (i = 0; i < masterData.length; i++) //you can improve the preformance if you only use one repetitive structure.\n    {\n        var gtinBarcode = masterData[i].GTIN;\n        masterArray.push(gtinBarcode);\n        \n    }\n    node.warn(\"master================\");\n    node.warn(masterArray);\n    \n    for (j = 0; j < poTableData.length; j++) {\n        \n        var itemBarcode = poTableData[j].barcode_a;\n\n        if ( !(masterArray.indexOf(itemBarcode)!==-1) ) {\n           missingList.push(itemBarcode)\n            \n        }\n    }\n   \n    msg.statusCode = 400; // use msg.statusCode and standard HTTP messages,codes(Done)\n    msg_out.message = \"Few Item Missed\";\n    msg_out.items = missingList;\n}\n\nmsg.payload =msg_out;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 520,
        "wires": [
            [
                "7b1f73a42d69e9aa",
                "194d9a71b75be5b7"
            ]
        ]
    },
    {
        "id": "7b1f73a42d69e9aa",
        "type": "http response",
        "z": "fa9ca0946da23687",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1040,
        "y": 600,
        "wires": []
    },
    {
        "id": "194d9a71b75be5b7",
        "type": "debug",
        "z": "fa9ca0946da23687",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1116,
        "y": 502.33331298828125,
        "wires": []
    },
    {
        "id": "044ad1d561af168f",
        "type": "inject",
        "z": "fa9ca0946da23687",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select * from Purchase_Order limit 10;",
        "payloadType": "date",
        "x": 200,
        "y": 700,
        "wires": [
            [
                "8621088817f2db6a"
            ]
        ]
    },
    {
        "id": "8621088817f2db6a",
        "type": "mysql",
        "z": "fa9ca0946da23687",
        "mydb": "89bb548239426793",
        "name": "purchase-order",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "f6719293f37fa3a4"
            ]
        ]
    },
    {
        "id": "f6719293f37fa3a4",
        "type": "debug",
        "z": "fa9ca0946da23687",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "2f88a686a28f53b7",
        "type": "http in",
        "z": "fa9ca0946da23687",
        "name": "",
        "url": "/api/purchaseorder",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "8b4c44f4a7476e30",
                "89f760e8cfaa6b5d"
            ]
        ]
    },
    {
        "id": "8b4c44f4a7476e30",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Validate message",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar address = msg.req.originalUrl;\nvar body = msg.req.body;\nconst d365Apikey = global.get('D365_apikey');\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif (!headers.apikey || headers.apikey !== d365Apikey) {\n  node.warn(\"Unauthorized transaction, wrong credentials. \");\n  msg.payload = { response: \"Unauthorized\" };\n  msg.statusCode = 401;\n} else {\n  msg.statusCode = 200;\n  node.warn(\"Authorized transaction, proceeding... \");\n  msg.payload = { response: \"Success\" };\n  \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "d7c3c70f18168199"
            ]
        ]
    },
    {
        "id": "89f760e8cfaa6b5d",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "PurchaseOrder Logs",
        "func": "var currentDate = new Date();\nvar shortDate = (currentDate.getMonth()+1) + '-'+ currentDate.getFullYear();\nvar completeDate = ((currentDate.getMonth()+1)+'-'+currentDate.getDate());\n\nvar filename = '/data/logs/NEW-VIRGIN/inbound-D365/PurchaseOrder/' + shortDate + '/' + completeDate + '_PurchaseOrder.txt';\nmsg.filename = filename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 220,
        "wires": [
            [
                "996e3c27e190d3ac"
            ]
        ]
    },
    {
        "id": "066ad98891da1274",
        "type": "http in",
        "z": "fa9ca0946da23687",
        "name": "Receive from test TO",
        "url": "/forward/po",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "8b4c44f4a7476e30",
                "89f760e8cfaa6b5d"
            ]
        ]
    },
    {
        "id": "d7c3c70f18168199",
        "type": "switch",
        "z": "fa9ca0946da23687",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "b017d6e8a069854b"
            ],
            [
                "7d361a21ab2d35e5"
            ]
        ]
    },
    {
        "id": "996e3c27e190d3ac",
        "type": "file",
        "z": "fa9ca0946da23687",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "x": 620,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b017d6e8a069854b",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Handling 4XX Errors",
        "func": "body = msg.req.body;\nlet payload = [];\nconst properties = flow.get(\"purchaseOrder\");\nconst itemListProperties = flow.get(\"itemListProperties\");\narray = false;\nlet malformedProp = \"\";\nlet badItem = [];\nlet hasProperty;\nArray.isArray(body) ? ((payload = body), (array = true)) : payload.push(body);\npayload.forEach((obj, i) => {\n  hasProperty = properties.every((property) => {\n    malformedProp = property;\n    return obj.hasOwnProperty(property);\n  });\n  if(hasProperty) {\n  hasProperty = obj.itemlist.every((propItemList, i) => {\n      hasProperty = itemListProperties.every((property) => {\n      malformedProp = property;\n      return propItemList.hasOwnProperty(property);\n    });\n    return hasProperty;\n  });   \n  }\n  if (!hasProperty) {\n    badItem.push(obj);\n    node.warn(badItem);\n    msg.payload = badItem;\n    msg.statusCode = 400;\n    msg.payload = { response: \"Missing Parameter\", property: malformedProp };\n  }\n  else {\n      msg.payload = { response: \"Success\", po_number: payload[0].po_number  };\n\n  }\n});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 160,
        "wires": [
            [
                "7d361a21ab2d35e5",
                "609e754b3b1d9179"
            ]
        ]
    },
    {
        "id": "7d361a21ab2d35e5",
        "type": "http response",
        "z": "fa9ca0946da23687",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 810,
        "y": 200,
        "wires": []
    },
    {
        "id": "609e754b3b1d9179",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Save PurchaseOrder",
        "func": "var currentTime = new Date().toLocaleString(\"en-US\", {\n  timeZone: \"Asia/Dubai\",\n});\nconst invoiceCode =  Math.floor(Date.now() / 1000);\nconst body = msg.req.body;\nlet itemList = body.itemlist;\ndelete body.itemlist;\n\nconst regex = /[']/ig;\nconst purchaseOrderProps = flow.get(\"purchaseOrder\");\nconst purchaseOrderListProps = flow.get(\"itemListProperties\");\nconst sqlCol = flow.get(\"purchaseOrderSQLCol\");\nlet query = \"\";\nlet sqlRow = [];\nnode.warn(itemList);\nitemList.forEach((item, index) => {\n    let completeItem = {\n        ...body,\n        ...item\n};\n  sqlCol.forEach((POProp, i) => {\n    switch (POProp) {\n      case \"po_product_pk\":\n        sqlRow[sqlCol.indexOf(\"po_product_pk\")] =\n          completeItem[\"po_number\"] + \"_\" + completeItem[\"product_number\"];\n        break;\n      case \"po_status\":\n        sqlRow[sqlCol.indexOf(\"po_status\")] = 'open';\n        break;\n    //   case \"invoice_number\":\n    //     sqlRow[sqlCol.indexOf(\"invoice_number\")] =  'INV-'+ invoiceCode;\n    //     break;\n      case \"line_status\": \n       sqlRow[sqlCol.indexOf(POProp)] = completeItem[\"line_status\"];\n       msg.receiptImport = (completeItem[\"line_status\"] === \"Cancelled\") ?  false : true;\n       break;\n      case \"actual_qty\":\n       sqlRow[sqlCol.indexOf(POProp)] = 0;\n       break;\n      default:\n          sqlRow[sqlCol.indexOf(POProp)] = completeItem.hasOwnProperty(POProp)\n            ? completeItem[POProp].toString().replace(regex, '\\'\\'')\n            : \"\";\n        break;\n    }\n  });\n\n  query += QueryBuilder(\"Purchase_Order\", sqlRow);\n});\n\nmsg.topic = \"BEGIN TRANSACTION;\" + \"\\n\" + query + \"COMMIT;\";\nreturn msg;\n\nfunction QueryBuilder(table, sqlRow) {\n  let sqlValueI = \"\";\n  let sqlHeader = \"\";\n  let query = \"\";\n  sqlRow.forEach((col, i) => {\n    sqlValueI = sqlValueI + col + \"','\";\n    sqlHeader = sqlHeader + sqlCol[i] + \"','\";\n  });\n  sqlValueI = sqlValueI.slice(0, sqlValueI.length - 2);\n  sqlHeader = sqlHeader.slice(0, sqlHeader.length - 2);\n\n  query =\n    \"INSERT or REPLACE INTO \" +\n    table +\n    \"('\" +\n    sqlHeader +\n    \")\" +\n    \" VALUES \" +\n    \"('\" +\n    sqlValueI +\n    \");\" +\n    \"\\n\";\n\n  return query;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "8c199842ee8c51ff",
                "0a65c8f45c2c09f4"
            ]
        ]
    },
    {
        "id": "8c199842ee8c51ff",
        "type": "debug",
        "z": "fa9ca0946da23687",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 100,
        "wires": []
    },
    {
        "id": "0a65c8f45c2c09f4",
        "type": "mysql",
        "z": "fa9ca0946da23687",
        "mydb": "89bb548239426793",
        "name": "purchase-order",
        "x": 1320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3bc6f4ba2f20f46d",
        "type": "http in",
        "z": "fa9ca0946da23687",
        "name": "",
        "url": "/run_query",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1120,
        "wires": [
            [
                "e1724cfa894d0ee9"
            ]
        ]
    },
    {
        "id": "e1724cfa894d0ee9",
        "type": "function",
        "z": "fa9ca0946da23687",
        "name": "Validate request",
        "func": "//PROCESS TO VALIDATE THE RECEIVED REQUEST\nvar headers = msg.req.headers;\nvar currentTime = new Date().getTime();\nqueryResults=\"\";\n\n//checking if the api_key is correct, otherwise response is Unauthorized\nif(!headers.apikey || headers.apikey != '_run_query'){\n    node.warn(\"Unauthorized Lookup transaction, wrong credentials. \");\n    msg.payload = {\"response\":\"Unauthorized\"};\n    msg.statusCode = 401;\n    msg.send=0;\n    return msg;\n}\nelse{\n    node.warn(\"Authorized Lookup request, proceeding... \");\n    results = msg.payload;\n  \n    msg.topic = results.query;\n    msg.send=1;\n    return msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1040,
        "wires": [
            [
                "86a43d9159babd29"
            ]
        ]
    },
    {
        "id": "86a43d9159babd29",
        "type": "mysql",
        "z": "fa9ca0946da23687",
        "mydb": "89bb548239426793",
        "name": "query ",
        "x": 550,
        "y": 1020,
        "wires": [
            [
                "0233ba229390d950"
            ]
        ]
    },
    {
        "id": "0233ba229390d950",
        "type": "http response",
        "z": "fa9ca0946da23687",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3266cbcae4079e57",
        "type": "mongodb-node",
        "z": "ceb078855481dd99",
        "mongodb": "92ae78283fc2fda1",
        "name": "MongoDB",
        "collection": "lpns",
        "operation": "update",
        "upsert": false,
        "multi": false,
        "x": 360,
        "y": 380,
        "wires": [
            [
                "e4fe98311abe2589"
            ]
        ]
    },
    {
        "id": "3271df138dd62cd0",
        "type": "debug",
        "z": "ceb078855481dd99",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 380,
        "wires": []
    },
    {
        "id": "65e4ae3976e23ee0",
        "type": "http in",
        "z": "ceb078855481dd99",
        "name": "SupplyChain",
        "url": "/inbound/receiving",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "3266cbcae4079e57"
            ]
        ]
    },
    {
        "id": "f13dcd3188c905b8",
        "type": "debug",
        "z": "ceb078855481dd99",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "a962852f5cb43a65",
        "type": "http in",
        "z": "ceb078855481dd99",
        "name": "ASN",
        "url": "/asn_alert",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "38bd0a6a4f9fc0b9"
            ]
        ]
    },
    {
        "id": "013ad07b3746862f",
        "type": "mongodb-node",
        "z": "ceb078855481dd99",
        "mongodb": "92ae78283fc2fda1",
        "name": "MongoDB",
        "collection": "asns",
        "operation": "find",
        "upsert": false,
        "multi": false,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "644066af9a4dfc90",
                "159779b0509c5620"
            ]
        ]
    },
    {
        "id": "644066af9a4dfc90",
        "type": "function",
        "z": "ceb078855481dd99",
        "name": "validate ASN",
        "func": "let msgData1 = msg.receivingRecord;\nlet asnData = JSON.stringify(msg.payload);\n\n// Parse the JSON string back into an object\nasnData = JSON.parse(asnData);\n\n// Assuming 'asn' is the property you want to match\nlet matchingASN = null;\n\n// Loop through asnData array to find a matching ASN\nfor (let i = 0; i < asnData.length; i++) {\n    if (asnData[i].asn === msgData1.asn) {\n        matchingASN = asnData[i].createdAt;\n        node.warn(\"my warning\" + JSON.stringify(matchingASN));\n        break;  // Exit the loop once a match is found\n    }\n}\n\n// Check if a matching ASN was found\nif (matchingASN !== null) {\n    // If a match is found, retrieve the 'createdAt' value from asnData\n    let matchedCreatedAt = asnData.find(item => item.asn === matchingASN).createdAt;\n\n    // You can do something with the matchedCreatedAt value, for example, log it or use it further.\n    node.warn('Matched ASN! createdAt:' + matchedCreatedAt);\n\n    // If you want to assign it back to msg or perform other actions, you can do that here\n    // For example, msg.matchedCreatedAt = matchedCreatedAt;\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "f13dcd3188c905b8"
            ]
        ]
    },
    {
        "id": "38bd0a6a4f9fc0b9",
        "type": "function",
        "z": "ceb078855481dd99",
        "name": "Get ASN's",
        "func": "let msgData = msg.req.body;;\nnode.warn(\"my warning\"+JSON.stringify(msgData));\nmsg.receivingRecord = msgData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "013ad07b3746862f"
            ]
        ]
    },
    {
        "id": "159779b0509c5620",
        "type": "http response",
        "z": "ceb078855481dd99",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 120,
        "wires": []
    },
    {
        "id": "e4fe98311abe2589",
        "type": "function",
        "z": "ceb078855481dd99",
        "name": "",
        "func": "var oldMovedBinLocation = flow.get(\"movedLocation\") || null; // Store the previous movedBinlocation in flow context\n\nif (msg.payload.operationType === \"update\") {\n    var updatedFields = msg.payload.updateDescription.updatedFields;\n\n    if (\n        \"movedlocation\" in updatedFields &&\n        updatedFields.movedBinlocation !== oldMovedBinLocation &&\n        (updatedFields.operation === \"putAwaye\" || updatedFields.operation === \"full movement\")\n    ) {\n        flow.set(\"movedLocation\", updatedFields.movedBinlocation); // Update the stored movedBinlocation\n        var alertMessage = `ASN is moved to ${updatedFields.movedBinlocation} movedLocation`;\n        msg.payload = alertMessage;\n        return msg; // Trigger the alert\n    }\n}\n\nreturn null; // No alert triggered\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "3271df138dd62cd0"
            ]
        ]
    }
]